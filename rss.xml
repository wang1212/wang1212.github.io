<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>不如怀念 Blog</title>
        <link>https://wang1212.github.io</link>
        <description>不如怀念 Blog</description>
        <lastBuildDate>Sun, 20 Jul 2025 13:43:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hans</language>
        <item>
            <title><![CDATA[「每周回顾」EP2025W29：AI 工具进展与 WebAssembly 的十年]]></title>
            <link>https://wang1212.github.io/2025/07/20/weekly/2025/weekly-review-ep2025w29</link>
            <guid>https://wang1212.github.io/2025/07/20/weekly/2025/weekly-review-ep2025w29</guid>
            <pubDate>Sun, 20 Jul 2025 13:43:00 GMT</pubDate>
            <description><![CDATA[2025 年第 29  周的回顾，聚焦 AI 领域，Windsurf IDE 迎来重大更新，支持语音输入与历史对话引用。OpenAI 发布 ChatGPT Agent，整合交互、信息合成与对话能力。月之暗面推出开源大模型 Kimi-K2，强调规划与工具调用。此外，Stack Overflow 宣布转型，旨在重建高质量开发者社区并引入 AI 问答搜索，以应对生成式 AI 带来的挑战。WebAssembly 发展十年，仍待广泛成熟的应用场景。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>聚焦 AI 领域，Windsurf IDE迎来重大更新，支持语音输入与历史对话引用。OpenAI 发布 ChatGPT Agent，整合交互、信息合成与对话能力。月之暗面推出开源大模型 Kimi-K2，强调规划与工具调用。此外，Stack Overflow 宣布转型，旨在重建高质量开发者社区并引入 AI 问答搜索，以应对生成式 AI 带来的挑战。WebAssembly 发展十年，仍待广泛成熟的应用场景。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="windsurf-wave-11"><a href="https://windsurf.com/blog/windsurf-wave-11" target="_blank" rel="noopener noreferrer">Windsurf Wave 11</a><a href="https://wang1212.github.io/2025/07/20/weekly/2025/weekly-review-ep2025w29#windsurf-wave-11" class="hash-link" aria-label="windsurf-wave-11的直接链接" title="windsurf-wave-11的直接链接">​</a></h5>
<p>过去的两周，AI IDE 领域发生了一些重大变化，主角便是 Windsurf，现在 Windsurf 的变化终于具有了确定性，也发布最新一次大更新，带来了语音输入支持，以及对历史对话的引用特性。</p>
<p><code>Windsurf</code> <code>AI</code> <code>Code Agent</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="webassembly-yes-but-for-what"><a href="https://queue.acm.org/detail.cfm?id=3746171" target="_blank" rel="noopener noreferrer">WebAssembly: Yes, but for What?</a><a href="https://wang1212.github.io/2025/07/20/weekly/2025/weekly-review-ep2025w29#webassembly-yes-but-for-what" class="hash-link" aria-label="webassembly-yes-but-for-what的直接链接" title="webassembly-yes-but-for-what的直接链接">​</a></h5>
<p>不知不觉间，WebAssembly 已经发展了十年，从最初的实验性技术，到如今已经成为成熟的 Web 技术之一。但就目前的发展来看，WebAssembly 还没有广泛且成熟的场景应用，可能最成功的场景之一便是 SQLite 的 WebAssembly 版本，使得 Chrome 放弃了 WebSQL 规范。除此之外，WebAssembly 最让大家觉得有潜力的便是高性能场景，毕竟 JavaScript 相对于 C++ 等语言来说，性能差距还是比较明显的，但即便如此这仍然不是一个成熟的应用场景。</p>
<p><code>WebAssembly</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="introducing-chatgpt-agent-bridging-research-and-action"><a href="https://openai.com/index/introducing-chatgpt-agent/" target="_blank" rel="noopener noreferrer">Introducing ChatGPT agent: bridging research and action</a><a href="https://wang1212.github.io/2025/07/20/weekly/2025/weekly-review-ep2025w29#introducing-chatgpt-agent-bridging-research-and-action" class="hash-link" aria-label="introducing-chatgpt-agent-bridging-research-and-action的直接链接" title="introducing-chatgpt-agent-bridging-research-and-action的直接链接">​</a></h5>
<p>OpenAI 发布了 ChatGPT Agent，这是一个基于 LLM 的智能体，可以与用户进行交互，并执行一些任务。据称，ChatGPT Agent 的性能在多个基准测试中都表现出色，它融合了先前突破的三大优势：Operator 与网站的交互能力、Deep Research 的信息合成能力，以及 ChatGPT 的智能和对话流畅性。</p>
<p><code>ChatGPT Agent</code> <code>AI</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="kimi-k2"><a href="https://moonshotai.github.io/Kimi-K2/" target="_blank" rel="noopener noreferrer">Kimi-K2</a><a href="https://wang1212.github.io/2025/07/20/weekly/2025/weekly-review-ep2025w29#kimi-k2" class="hash-link" aria-label="kimi-k2的直接链接" title="kimi-k2的直接链接">​</a></h5>
<p>月之暗面发布了迄今为止参数规模最大的开源 LLM，并在各个领域的基准测试取得优秀成绩，这是一个面向智能体的大模型，具备规划能力以及优秀的工具调用能力。</p>
<p><code>Kimi K2</code> <code>LLM</code> <code>AI</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="a-new-era-of-stack-overflow"><a href="https://stackoverflow.blog/2025/07/10/a-new-era-of-stack-overflow/" target="_blank" rel="noopener noreferrer">A New Era of Stack Overflow</a><a href="https://wang1212.github.io/2025/07/20/weekly/2025/weekly-review-ep2025w29#a-new-era-of-stack-overflow" class="hash-link" aria-label="a-new-era-of-stack-overflow的直接链接" title="a-new-era-of-stack-overflow的直接链接">​</a></h5>
<p>Stack Overflow 宣布了未来的发展方向以及使命和愿景，对于喜欢 Stack Overflow 的开发者来说，这是一个值得期待的消息。由于两三年前突然爆火的生成式 AI 浪潮，Stack Overflow 的用户数量急剧下降，似乎全世界都认为 Stack Overflow 将会衰退，但可能一个简单的真相被忽略了，那就是现有的 LLMs 训练数据依赖于高质量的数据集，而 Stack Overflow 的数据恰恰是高质量的数据集，当我们的时代不算发展，LLMs 所依赖的高质量数据集将会更加匮乏，而 Stack Overflow 的未来目标方向则是围绕如何使其社区重回开发者中心，并积累高质量的数据集。同时，Stack Overflow 也为开发者带来了自然语言问答搜索的功能，帮助开发者更快速的找到可信的答案。</p>
<ul>
<li><a href="https://stackoverflow.ai/" target="_blank" rel="noopener noreferrer">Stack Overflow AI</a></li>
</ul>
<p><code>Stack Overflow</code> <code>AI</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W28：Grok 4 发布与 AI 企业服务转型]]></title>
            <link>https://wang1212.github.io/2025/07/13/weekly/2025/weekly-review-ep2025w28</link>
            <guid>https://wang1212.github.io/2025/07/13/weekly/2025/weekly-review-ep2025w28</guid>
            <pubDate>Sun, 13 Jul 2025 13:43:00 GMT</pubDate>
            <description><![CDATA[2025 年第 28 周的回顾，xAI 发布的 Grok 4 虽在基准测试中表现出色，但实际用户反馈不佳，凸显了 AI 模型性能商品化时代，独特价值而非单纯分数更能决定市场成功。同时，Cody 和 TabNine 等 AI 代码工具取消免费计划并转向企业客户，以及 Vercel 收购 NuxtLabs，均表明 AI 和前端服务市场正经历商业模式调整与资源整合，基础大模型性能仍是核心竞争力。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>xAI 发布的 Grok 4 虽在基准测试中表现出色，但实际用户反馈不佳，凸显了 AI 模型性能商品化时代，独特价值而非单纯分数更能决定市场成功。同时，Cody 和 TabNine 等 AI 代码工具取消免费计划并转向企业客户，以及 Vercel 收购 NuxtLabs，均表明 AI 和前端服务市场正经历商业模式调整与资源整合，基础大模型性能仍是核心竞争力。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="grok-4"><a href="https://x.ai/news/grok-4" target="_blank" rel="noopener noreferrer">Grok 4</a><a href="https://wang1212.github.io/2025/07/13/weekly/2025/weekly-review-ep2025w28#grok-4" class="hash-link" aria-label="grok-4的直接链接" title="grok-4的直接链接">​</a></h5>
<p>在本周，xAI 发布了 Grok 4，官方宣布在所有基准测试中都排名领先，但实际的用户反馈却并非如此。Grok 4 代表了 xAI 的重大技术成就（基准领先、并行计算创新），但市场成功受限于产品差异化不足、高价格和文化风险。模型性能商品化时代，AI 采用依赖独特价值（如 Claude 的“品味”或开源模型的可部署性），而非仅靠分数。</p>
<ul>
<li><a href="https://www.interconnects.ai/p/grok-4-an-o3-look-alike-in-search" target="_blank" rel="noopener noreferrer">Grok 4: An O3 Look-Alike in Search</a></li>
</ul>
<p><code>Grok</code> <code>AI</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="changes-to-cody-free-pro-and-enterprise-starter-plans"><a href="https://sourcegraph.com/blog/changes-to-cody-free-pro-and-enterprise-starter-plans" target="_blank" rel="noopener noreferrer">Changes to Cody Free, Pro, and Enterprise Starter plans</a><a href="https://wang1212.github.io/2025/07/13/weekly/2025/weekly-review-ep2025w28#changes-to-cody-free-pro-and-enterprise-starter-plans" class="hash-link" aria-label="changes-to-cody-free-pro-and-enterprise-starter-plans的直接链接" title="changes-to-cody-free-pro-and-enterprise-starter-plans的直接链接">​</a></h5>
<p>继年初 TabNine 的免费计划被取消后，近期 Sourcegraph 的 Cody 也做出了类似的调整，取消了免费计划，而他们都将服务客户的重心转向了企业客户。无独有偶，这个周末还有一则重磅新闻，那就是 Google 收购了 Windsurf 创始人领导的核心研发团队，Windsurf 也重申了他们的目标是服务好企业客户。同时，结合近期 Cursor 不断的调整其付费计划，从而引起了大量开发者用户的不满的现状，不禁让其想起了过去的一年大家都说是大模型元年，今年应该是 AI 产品蓬勃发展的一年，但就从目前大家一致认为最能产生价值的 AI 代码代理赛道发生的一系列变化来看，似乎基础大模型的性能仍然是构建 AI 产品的核心优势能力。</p>
<p><code>AI</code> <code>Sourcegraph</code> <code>Cody</code> <code>TabNine</code> <code>Google</code> <code>Windsurf</code> <code>Cursor</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="nuxtlabs-joins-vercel"><a href="https://vercel.com/blog/nuxtlabs-joins-vercel" target="_blank" rel="noopener noreferrer">NuxtLabs joins Vercel</a><a href="https://wang1212.github.io/2025/07/13/weekly/2025/weekly-review-ep2025w28#nuxtlabs-joins-vercel" class="hash-link" aria-label="nuxtlabs-joins-vercel的直接链接" title="nuxtlabs-joins-vercel的直接链接">​</a></h5>
<p>Vercel 宣布收购了 NuxtLabs，作为前端开发者最喜欢的云服务商，Vercel 正在将他们亲手构建的 Next.js 元框架的竞争对手和生态伙伴收入麾下。也许，这意味前端开发者将拥有更好的体验，但另一方面也意味着资源的过度集中可能对市场产生负面影响。</p>
<p><code>Vercel</code> <code>NuxtLabs</code> <code>Next.js</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="repomix"><a href="https://repomix.com/" target="_blank" rel="noopener noreferrer">RepoMix</a><a href="https://wang1212.github.io/2025/07/13/weekly/2025/weekly-review-ep2025w28#repomix" class="hash-link" aria-label="repomix的直接链接" title="repomix的直接链接">​</a></h5>
<p>Repomix 是一款功能强大的工具，它可以将您的整个代码库打包成一个 AI 友好的文件。无论您是在进行代码审查、重构，还是在项目中寻求 AI 协助，Repomix 都能让您轻松地与 AI 工具共享整个代码库上下文。</p>
<p><code>Repomix</code> <code>AI</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-generative-ai-tech-stack"><a href="https://blog.bytebytego.com/p/ep171-the-generative-ai-tech-stack" target="_blank" rel="noopener noreferrer">The Generative AI Tech Stack</a><a href="https://wang1212.github.io/2025/07/13/weekly/2025/weekly-review-ep2025w28#the-generative-ai-tech-stack" class="hash-link" aria-label="the-generative-ai-tech-stack的直接链接" title="the-generative-ai-tech-stack的直接链接">​</a></h5>
<p>ByteByteGo 第 171 期内容带来的是生成式 AI（Generative AI）领域的技术堆栈介绍，GenAI 是指能够通过从现有数据中学习模式来创建新内容（例如文本、图像、代码或音乐）的系统。</p>
<p><code>&lt;&lt;ByteByteGo&gt;&gt;</code> <code>AI</code> <code>Tech Stack</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="andrej-karpathy-on-software-30-software-in-the-age-of-ai"><a href="https://www.youtube.com/watch?v=LCEmiRjPEtQ" target="_blank" rel="noopener noreferrer">Andrej Karpathy on Software 3.0: Software in the Age of AI</a><a href="https://wang1212.github.io/2025/07/13/weekly/2025/weekly-review-ep2025w28#andrej-karpathy-on-software-30-software-in-the-age-of-ai" class="hash-link" aria-label="andrej-karpathy-on-software-30-software-in-the-age-of-ai的直接链接" title="andrej-karpathy-on-software-30-software-in-the-age-of-ai的直接链接">​</a></h5>
<p>OpenAI 创始人 Andrej Karpathy 一次经常的演讲，他认为软件已进入「3.0时代」，以自然语言为编程接口，大型语言模型（LLMs）成为新型操作系统，可类比为 1960 年代早期计算机的进化阶段。另外，他也是提出 Vibe Coding 概念的人。</p>
<ul>
<li><a href="https://www.latent.space/p/s3" target="_blank" rel="noopener noreferrer">Software 3.0: Software in the Age of AI</a></li>
<li><a href="https://mp.weixin.qq.com/s/myW5FeVSsb1a8nsxMFj3IA" target="_blank" rel="noopener noreferrer">AI大神Andrej Karpathy爆火演讲，为何值得开发者反复观看？</a></li>
</ul>
<p><code>AI</code> <code>Software 3.0</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W27：GitHub Copilot Chat 开源]]></title>
            <link>https://wang1212.github.io/2025/07/06/weekly/2025/weekly-review-ep2025w27</link>
            <guid>https://wang1212.github.io/2025/07/06/weekly/2025/weekly-review-ep2025w27</guid>
            <pubDate>Sun, 06 Jul 2025 21:43:00 GMT</pubDate>
            <description><![CDATA[2025 年第 27 周的回顾，微软宣布开源 GitHub Copilot Chat 扩展，旨在巩固 VSCode 在开发者心中的地位，并将其打造成开源的 AI 编辑器，以应对 Cursor、Windsurf 等竞品的挑战。同时，文章也介绍了奖励模型（RM）作为 LLM 研究基石的重要性，以及上下文工程如何提升 LLM 性能。此外，20 年后 PNG 标准的更新也值得关注，它带来了对 HDR 和 APNG 动画等新特性支持。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>微软宣布开源 GitHub Copilot Chat 扩展，旨在巩固 VSCode 在开发者心中的地位，并将其打造成开源的 AI 编辑器，以应对 Cursor、Windsurf 等竞品的挑战。同时，文章也介绍了奖励模型（RM）作为 LLM 研究基石的重要性，以及上下文工程如何提升 LLM 性能。此外，20 年后 PNG 标准的更新也值得关注，它带来了对 HDR 和 APNG 动画等新特性支持。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="open-source-ai-editor-first-milestone4"><a href="https://code.visualstudio.com/blogs/2025/06/30/openSourceAIEditorFirstMilestone" target="_blank" rel="noopener noreferrer">Open Source AI Editor: First Milestone4</a><a href="https://wang1212.github.io/2025/07/06/weekly/2025/weekly-review-ep2025w27#open-source-ai-editor-first-milestone4" class="hash-link" aria-label="open-source-ai-editor-first-milestone4的直接链接" title="open-source-ai-editor-first-milestone4的直接链接">​</a></h5>
<p>VSCode 在不久前就宣布将开源 GitHub Copilot Chat 扩展，微软的这一举动的原因不得而知，但从最近编码智能体的发展来看，GitHub Copilot 从引领者已经变为落后的一员，Cursor、Windsurf 这些被开发者称赞的竞品目前是以 VSCode 开源项目的分支来进行开发维护的，很显然这对于社区来说是不友好的，对于商业公司来说也增加了巨大的维护成本，而这一切都是因为 VSCode 目前对于扩展的限制还是太多了。微软开源 GitHub Copilot Chat 扩展的重要原因想必包含了在这场竞争中一定要稳固 VSCode 在开发者心中的地位，就像他们说的，将其打造为开源的 AI 编辑器。</p>
<p><code>VSCode</code> <code>GitHub Copilot</code> <code>Open Source</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="reward-models"><a href="https://cameronrwolfe.substack.com/p/reward-models" target="_blank" rel="noopener noreferrer">Reward Models</a><a href="https://wang1212.github.io/2025/07/06/weekly/2025/weekly-review-ep2025w27#reward-models" class="hash-link" aria-label="reward-models的直接链接" title="reward-models的直接链接">​</a></h5>
<p>奖励模型 (RM) 是大型语言模型 (LLM) 研究的基石，通过将人类偏好融入训练过程，实现了显著的进步。尽管 RM 发挥着至关重要的作用，但它却常常被忽视。这篇文章针对奖励模型进行了详细的讨论和解读，即便不是算法相关的开发者也能很好的理解，这对我们了解现如今 LLMs 的原理和分析问题将会有极大的帮助。这篇文章中也提到了现如今可以简单评估 LLMs 输出的一种方案，即使用 LLMs 作为裁判，以此来替代人工评估。</p>
<ul>
<li><a href="https://cameronrwolfe.substack.com/p/llm-as-a-judge" target="_blank" rel="noopener noreferrer">Using LLMs for Evaluation</a></li>
</ul>
<p><code>LLM</code> <code>Reward Model</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="context-engineering-guide"><a href="https://nlp.elvissaravia.com/p/context-engineering-guide" target="_blank" rel="noopener noreferrer">Context Engineering Guide</a><a href="https://wang1212.github.io/2025/07/06/weekly/2025/weekly-review-ep2025w27#context-engineering-guide" class="hash-link" aria-label="context-engineering-guide的直接链接" title="context-engineering-guide的直接链接">​</a></h5>
<p>很多人都说提示词工程已经不重要了，实际上它现在演变成了一种更具工程化的概念，即上下文工程（Context Engineering），通过合理组织上下文，可以显著提高 LLMs 的性能。</p>
<p><code>LLM</code> <code>Prompt Engineering</code> <code>Context Engineering</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="png-is-back"><a href="https://www.programmax.net/articles/png-is-back/" target="_blank" rel="noopener noreferrer">PNG is back</a><a href="https://wang1212.github.io/2025/07/06/weekly/2025/weekly-review-ep2025w27#png-is-back" class="hash-link" aria-label="png-is-back的直接链接" title="png-is-back的直接链接">​</a></h5>
<p>罕见的，20 年后 PNG 的规范标准更新了，这一次更新的亮点是对 HDR 的部分支持，识别 APNG 动画，支持 Exif 数据等等。</p>
<p><code>PNG</code> <code>Specification</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W26：ECMAScript 2025 正式发布，AI 代理与前端工具持续演进]]></title>
            <link>https://wang1212.github.io/2025/06/29/weekly/2025/weekly-review-ep2025w26</link>
            <guid>https://wang1212.github.io/2025/06/29/weekly/2025/weekly-review-ep2025w26</guid>
            <pubDate>Sun, 29 Jun 2025 12:48:00 GMT</pubDate>
            <description><![CDATA[2025 年第 26 周的回顾，ECMAScript 2025 正式发布，引入了 using 关键字和 Array.fromAsync 等新特性。同时，AI 领域Agentic RAG 概念的提出，强调了更智能的检索增强生成。前端工具方面，Prettier 发布了性能优化的新版本，Three.js 的色器语言 TSL 支持编译到多个目标环境。此外，Google 发布了开源的 Gemini CLI，为开发者提供了便捷的 AI 命令行交互工具。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>ECMAScript 2025 正式发布，引入了 using 关键字和 Array.fromAsync 等新特性。同时，AI 领域Agentic RAG 概念的提出，强调了更智能的检索增强生成。前端工具方面，Prettier 发布了性能优化的新版本，Three.js 的色器语言 TSL 支持编译到多个目标环境。此外，Google 发布了开源的 Gemini CLI，为开发者提供了便捷的 AI 命令行交互工具。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="whats-coming-to-javascript"><a href="https://deno.com/blog/updates-from-tc39" target="_blank" rel="noopener noreferrer">What's coming to JavaScript</a><a href="https://wang1212.github.io/2025/06/29/weekly/2025/weekly-review-ep2025w26#whats-coming-to-javascript" class="hash-link" aria-label="whats-coming-to-javascript的直接链接" title="whats-coming-to-javascript的直接链接">​</a></h5>
<p>TC39 第 108 次会议最近 提出了 4 个阶段的 9 项提案，代表了从粗略想法（阶段 0）到完全标准化的特征（阶段 4）。其中阶段 4 的提案基本上代表会在不久的将来成为 JavaScript 的一部分，这一次包含了使用 <code>using</code> 关键字自动化管理资源的使用和释放，<code>Array.fromAsync</code> 支持异步填充数组元素，<code>Error.isError()</code> 检查一个对象是否是错误等。另外，第 129 届 Ecma 大会批准了 ECMAScript 2025 语言规范，这意味着它现在正式成为标准。</p>
<ul>
<li><a href="https://2ality.com/2025/06/ecmascript-2025.html" target="_blank" rel="noopener noreferrer">Ecma International approves ECMAScript 2025: What’s new?</a></li>
</ul>
<p><code>TC39</code> <code>JavaScript</code> <code>ECMAScript</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="rag-vs-agentic-rag"><a href="https://blog.bytebytego.com/p/ep169-rag-vs-agentic-rag" target="_blank" rel="noopener noreferrer">RAG vs Agentic RAG</a><a href="https://wang1212.github.io/2025/06/29/weekly/2025/weekly-review-ep2025w26#rag-vs-agentic-rag" class="hash-link" aria-label="rag-vs-agentic-rag的直接链接" title="rag-vs-agentic-rag的直接链接">​</a></h5>
<p>传统的 RAG（Retrieval-Augmented Generation）检索简单、适应性有限，且依赖于静态知识，对于动态、实时信息的灵活性较差。Agentic RAG 对此进行了改进，引入了 AI 代理，这些代理可以做出决策、选择工具，甚至优化查询以获得更准确、更灵活的响应。</p>
<p><code>RAG</code> <code>Agentic</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="prettier-360"><a href="https://prettier.io/blog/2025/06/23/3.6.0" target="_blank" rel="noopener noreferrer">Prettier 3.6.0</a><a href="https://wang1212.github.io/2025/06/29/weekly/2025/weekly-review-ep2025w26#prettier-360" class="hash-link" aria-label="prettier-360的直接链接" title="prettier-360的直接链接">​</a></h5>
<p>Prettier v3.6 发布，现在经过性能优化的 CLI 工具只需通过一个 flag 配置即可启用。</p>
<p><code>Prettier</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="threejs-shading-language"><a href="https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language" target="_blank" rel="noopener noreferrer">Three.js Shading Language</a><a href="https://wang1212.github.io/2025/06/29/weekly/2025/weekly-review-ep2025w26#threejs-shading-language" class="hash-link" aria-label="threejs-shading-language的直接链接" title="threejs-shading-language的直接链接">​</a></h5>
<p>Three.js 创建了自己的着色器语言，目的是为了让开发者更容易地创建 GPU 程序，其直接由 JavaScript 编写，且对类型友好，更重要的是其可以编译成不同目标环境的着色器代码，例如 WebGL、WebGPU 等。</p>
<p><code>Three.js</code> <code>Shading</code> <code>Language</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="jpeg-image-format-history"><a href="https://spectrum.ieee.org/jpeg-image-format-history" target="_blank" rel="noopener noreferrer">JPEG Image Format History</a><a href="https://wang1212.github.io/2025/06/29/weekly/2025/weekly-review-ep2025w26#jpeg-image-format-history" class="hash-link" aria-label="jpeg-image-format-history的直接链接" title="jpeg-image-format-history的直接链接">​</a></h5>
<p>JPEG 图像格式的发展历程。JPEG 的成功源于委员会驱动的标准化、DCT 压缩的效率性和历史时机（例如 GIF 专利问题推动采用）。尽管技术局限存在，它通过高兼容性和"降级友好"设计，奠定了互联网图像共享基础。虽然现在有许多更先进的图像格式（WebP、AVIF 等），但 JPEG 仍然是最广泛使用的格式之一并将长期存在。</p>
<p><code>JPEG</code> <code>Image</code> <code>Format</code> <code>History</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="gemini-cli-your-open-source-ai-agent"><a href="https://blog.google/technology/developers/introducing-gemini-cli-open-source-ai-agent/" target="_blank" rel="noopener noreferrer">Gemini CLI: your open-source AI agent</a><a href="https://wang1212.github.io/2025/06/29/weekly/2025/weekly-review-ep2025w26#gemini-cli-your-open-source-ai-agent" class="hash-link" aria-label="gemini-cli-your-open-source-ai-agent的直接链接" title="gemini-cli-your-open-source-ai-agent的直接链接">​</a></h5>
<p>Google 发布了 Gemini CLI，一个开源的 AI 代理工具，它提供了一个命令行界面，可以让你通过自然语言与 AI 代理进行交互。同类型的还有 Claude Code、OpenAI Codex CLI 等等，不过 Google 不仅提供了免费版，更提供了业界最优惠的请求限制，每分钟 60 个模型请求和每天 1000 个模型请求。</p>
<p><code>AI</code> <code>Gemini</code> <code>CLI</code> <code>Google</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="react-visualized"><a href="https://react.gg/visualized" target="_blank" rel="noopener noreferrer">React Visualized</a><a href="https://wang1212.github.io/2025/06/29/weekly/2025/weekly-review-ep2025w26#react-visualized" class="hash-link" aria-label="react-visualized的直接链接" title="react-visualized的直接链接">​</a></h5>
<p>React Visualized 是一个以可视化方式来一步一步探索 React 的工作原理的教程。</p>
<p><code>React.js</code> <code>Visualized</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W25：AI 编程趋势、React 发展与 AI 代理安全]]></title>
            <link>https://wang1212.github.io/2025/06/22/weekly/2025/weekly-review-ep2025w25</link>
            <guid>https://wang1212.github.io/2025/06/22/weekly/2025/weekly-review-ep2025w25</guid>
            <pubDate>Sun, 22 Jun 2025 22:18:00 GMT</pubDate>
            <description><![CDATA[2025 年第 25 周的回顾，Motion AI 通过 MCP Server 实现自然语言生成动画代码，预示着开源库适应 AI 编程新模式的趋势；React 发布 12 周年，其声明式 UI 哲学对 Web 技术发展影响深远；文章强调 AI 代理面临私人数据、不可信内容和外部通信的安全挑战；此外，还有将复杂 TypeScript 类型解释为函数的实用工具 Type Buddy，以及 Google Gemini 和 LangGraph 构建全栈代理应用的快速入门指南。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>Motion AI 通过 MCP Server 实现自然语言生成动画代码，预示着开源库适应 AI 编程新模式的趋势；React 发布 12 周年，其声明式 UI 哲学对 Web 技术发展影响深远；文章强调 AI 代理面临私人数据、不可信内容和外部通信的安全挑战；此外，还有将复杂 TypeScript 类型解释为函数的实用工具 Type Buddy，以及 Google Gemini 和 LangGraph 构建全栈代理应用的快速入门指南。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="why-i-write-about-ai"><a href="https://newsletter.victordibia.com/p/why-i-write-about-ai" target="_blank" rel="noopener noreferrer">Why I write about AI</a><a href="https://wang1212.github.io/2025/06/22/weekly/2025/weekly-review-ep2025w25#why-i-write-about-ai" class="hash-link" aria-label="why-i-write-about-ai的直接链接" title="why-i-write-about-ai的直接链接">​</a></h5>
<p>Victor Dibia 分享了他写关于 AI 的原因，他认为 AI 会改变我们对技术的看法，改变我们对技术的使用方式，改变我们对技术的思考方式。只有我们亲自去实践、去思考，才能真正理解 AI 的力量。</p>
<p><code>写作</code> <code>AI</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="motion-ai"><a href="https://motion.dev/docs/ai-llm-documentation" target="_blank" rel="noopener noreferrer">Motion AI</a><a href="https://wang1212.github.io/2025/06/22/weekly/2025/weekly-review-ep2025w25#motion-ai" class="hash-link" aria-label="motion-ai的直接链接" title="motion-ai的直接链接">​</a></h5>
<p>动画库 motion 提供了 MCP Server，以便使用 AI IDE 的开发者现在能够通过自然语言来生成 motion 代码，更高效的实现动画效果。事实上，React 团队目前也在尝试构建 MCP Server 以实现自动优化代码。鉴于这种趋势，以后重要的开源社区库似乎都应用提供一个 MCP Server 来适应这种新的 AI 编程模式。</p>
<p><code>AI</code> <code>动画</code> <code>Motion</code> <code>MCP Server</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-story-of-react"><a href="https://www.youtube.com/watch?v=Wm_xI7KntDs" target="_blank" rel="noopener noreferrer">The Story of React</a><a href="https://wang1212.github.io/2025/06/22/weekly/2025/weekly-review-ep2025w25#the-story-of-react" class="hash-link" aria-label="the-story-of-react的直接链接" title="the-story-of-react的直接链接">​</a></h5>
<p>正值 React 发布 12 周年，回头再去看看 React 的发展历史，对于 Web 技术的发展历程能有更进一步的理解。React 声明式 UI 的设计哲学，将 UI 视图抽象为基于状态的函数式计算结果，UI 的状态管理与渲染逻辑分离，通过组件的组合来构建复杂的 UI，极大地提高了开发效率。</p>
<p><code>Web 前端</code> <code>React</code> <code>Web 技术</code> <code>发展历程</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-lethal-trifecta-for-ai-agents-private-data-untrusted-content-and-external-communication"><a href="https://simonwillison.net/2025/Jun/16/the-lethal-trifecta/" target="_blank" rel="noopener noreferrer">The lethal trifecta for AI agents: private data, untrusted content, and external communication</a><a href="https://wang1212.github.io/2025/06/22/weekly/2025/weekly-review-ep2025w25#the-lethal-trifecta-for-ai-agents-private-data-untrusted-content-and-external-communication" class="hash-link" aria-label="the-lethal-trifecta-for-ai-agents-private-data-untrusted-content-and-external-communication的直接链接" title="the-lethal-trifecta-for-ai-agents-private-data-untrusted-content-and-external-communication的直接链接">​</a></h5>
<p>这篇文章讲述了人工智能代理的致命三重打击：私人数据、不受信任的内容和外部通信。当前 AI 应用火热的背景下，数据安全已经成为一个重要的话题和关注点，尤其是对于普通用户来说，使用 AI 工具将比以往使用传统软件更容易泄露自己的数据。</p>
<p><code>AI</code> <code>AI 代理</code> <code>数据安全</code> <code>私有数据</code> <code>不可信内容</code> <code>外部通信</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="github---type-buddy"><a href="https://github.com/typed-rocks/type-buddy" target="_blank" rel="noopener noreferrer">Github - Type Buddy</a><a href="https://wang1212.github.io/2025/06/22/weekly/2025/weekly-review-ep2025w25#github---type-buddy" class="hash-link" aria-label="github---type-buddy的直接链接" title="github---type-buddy的直接链接">​</a></h5>
<p>一个有趣的小工具，可以将复杂的 TypeScript 类型定义解释为函数，以便能够更直观的理解其逻辑。</p>
<p><code>TypeScript</code> <code>类型定义</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="github---google-gemini-fullstack-langgraph-quickstart"><a href="https://github.com/google-gemini/gemini-fullstack-langgraph-quickstart" target="_blank" rel="noopener noreferrer">Github - Google Gemini FullStack LangGraph Quickstart</a><a href="https://wang1212.github.io/2025/06/22/weekly/2025/weekly-review-ep2025w25#github---google-gemini-fullstack-langgraph-quickstart" class="hash-link" aria-label="github---google-gemini-fullstack-langgraph-quickstart的直接链接" title="github---google-gemini-fullstack-langgraph-quickstart的直接链接">​</a></h5>
<p>Google 发布了一个使用 Gemini 模型和 LangGraph 框架构建的全栈代理应用，可作为快速入门指南的参考项目。</p>
<p><code>AI</code> <code>Google Gemini</code> <code>LangGraph</code> <code>全栈代理应用</code> <code>快速入门指南</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W24：React 服务器组件中导入的工作原理]]></title>
            <link>https://wang1212.github.io/2025/06/15/weekly/2025/weekly-review-ep2025w24</link>
            <guid>https://wang1212.github.io/2025/06/15/weekly/2025/weekly-review-ep2025w24</guid>
            <pubDate>Sun, 15 Jun 2025 18:00:00 GMT</pubDate>
            <description><![CDATA[2025 年第 24 周的回顾，Dan Abramov 的最新博文深入探讨了 React Server Components (RSC) 中导入的机制。文章阐述了 RSC 如何通过扩展 JavaScript 的模块系统，实现客户端与服务端代码的统一编写和边界控制，从而优化了在 React 应用中处理导入的方式。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>Dan Abramov 的最新博文深入探讨了 React Server Components (RSC) 中导入的机制。文章阐述了 RSC 如何通过扩展 JavaScript 的模块系统，实现客户端与服务端代码的统一编写和边界控制，从而优化了在 React 应用中处理导入的方式。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="how-imports-work-in-rsc"><a href="https://overreacted.io/how-imports-work-in-rsc/" target="_blank" rel="noopener noreferrer">How Imports Work in RSC</a><a href="https://wang1212.github.io/2025/06/15/weekly/2025/weekly-review-ep2025w24#how-imports-work-in-rsc" class="hash-link" aria-label="how-imports-work-in-rsc的直接链接" title="how-imports-work-in-rsc的直接链接">​</a></h5>
<p>Dan Abramov 新的博文，介绍了 React Server Components (RSC) 中导入（import）的工作原理，通过扩展 JavaScript 模块系统（<code>import</code>/<code>export</code>），实现客户端/服务端代码的统一编写与边界控制。</p>
<p><code>React.js</code> <code>React Server Components</code> <code>import</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W23：探索 Claude 4 系统提示与渐进式 JSON]]></title>
            <link>https://wang1212.github.io/2025/06/08/weekly/2025/weekly-review-ep2025w23</link>
            <guid>https://wang1212.github.io/2025/06/08/weekly/2025/weekly-review-ep2025w23</guid>
            <pubDate>Sun, 08 Jun 2025 18:00:00 GMT</pubDate>
            <description><![CDATA[2025 年第 23 周的回顾，Anthropic 发布了 Claude 4 系统提示符，揭示了其如何通过提示工程塑造模型行为。同时，Dan Abramov 提出了渐进式 JSON 概念，借鉴 JPEG 渐进式加载，通过广度优先传输和占位符使客户端能部分处理数据，提升并行性，旨在解决数据加载瓶颈。React Server Components (RSC) 也采用了此流式传输模型，作者呼吁工具生态系统采纳渐进式流式传输以优化性能。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>Anthropic 发布了 Claude 4 系统提示符，揭示了其如何通过提示工程塑造模型行为。同时，Dan Abramov 提出了渐进式 JSON 概念，借鉴 JPEG 渐进式加载，通过广度优先传输和占位符使客户端能部分处理数据，提升并行性，旨在解决数据加载瓶颈。React Server Components (RSC) 也采用了此流式传输模型，作者呼吁工具生态系统采纳渐进式流式传输以优化性能。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="highlights-from-the-claude-4-system-prompt"><a href="https://simonwillison.net/2025/May/25/claude-4-system-prompt/" target="_blank" rel="noopener noreferrer">Highlights from the Claude 4 system prompt</a><a href="https://wang1212.github.io/2025/06/08/weekly/2025/weekly-review-ep2025w23#highlights-from-the-claude-4-system-prompt" class="hash-link" aria-label="highlights-from-the-claude-4-system-prompt的直接链接" title="highlights-from-the-claude-4-system-prompt的直接链接">​</a></h5>
<p>Anthropic 将其聊天模型的大部分系统提示符作为发行说明的一部分发布，让我们有机会来了解 Anthropic 如何通过提示工程塑造模型行为。</p>
<p><code>AI</code> <code>Anthropic</code> <code>Claude</code> <code>提示工程</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="rsc-for-lisp-developers"><a href="https://overreacted.io/rsc-for-lisp-developers/" target="_blank" rel="noopener noreferrer">RSC for LISP Developers</a><a href="https://wang1212.github.io/2025/06/08/weekly/2025/weekly-review-ep2025w23#rsc-for-lisp-developers" class="hash-link" aria-label="rsc-for-lisp-developers的直接链接" title="rsc-for-lisp-developers的直接链接">​</a></h5>
<p>Dan Abramov 的新博文以类比论证（RSC ≈ LISP 引用）为中心，提出 RSC 作为现代 Web 开发的实用创新点，优点包括高效跨环境组合和流式处理。</p>
<p><code>React.js</code> <code>RSC</code> <code>LISP</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="progressive-json"><a href="https://overreacted.io/progressive-json/" target="_blank" rel="noopener noreferrer">Progressive JSON</a><a href="https://wang1212.github.io/2025/06/08/weekly/2025/weekly-review-ep2025w23#progressive-json" class="hash-link" aria-label="progressive-json的直接链接" title="progressive-json的直接链接">​</a></h5>
<p>Dan Abramov 带来了他新的一篇精彩的博文，通过类比 JPEG 渐进式加载的方式，提出渐进式 JSON，采用广度优先传输与占位符机制（如 $ 符号），使客户端能部分处理数据而无需全量加载，提升并行性。React Server Components (RSC) 的流式传输也应用了此模型。作者呼吁工具生态采纳渐进式流式传输，以解决单一慢操作拖累整体性能的工程瓶颈（如数据库延迟），并强调需编程模型（如 React 的 <code>&lt;Suspense&gt;</code>）优雅处理不完整数据。</p>
<p><code>React.js</code> <code>渐进式 JSON</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W21：JavaScript 30 年发展简史]]></title>
            <link>https://wang1212.github.io/2025/05/25/weekly/2025/weekly-review-ep2025w21</link>
            <guid>https://wang1212.github.io/2025/05/25/weekly/2025/weekly-review-ep2025w21</guid>
            <pubDate>Sun, 25 May 2025 18:00:00 GMT</pubDate>
            <description><![CDATA[2025 年第 21 周的回顾，为纪念 JavaScript 发布三十周年，Deno 发布了一篇博客文章，回顾了这门语言的演变历程。文章可能由 Deno 创始人撰写，因其与 JavaScript 有着深厚渊源，从独特角度梳理了 ECMAScript 标准化等关键发展阶段，展现了 JavaScript 如何从最初的脚本语言成长为如今无处不在的编程工具。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>为纪念 JavaScript 发布三十周年，Deno 发布了一篇博客文章，回顾了这门语言的演变历程。文章可能由 Deno 创始人撰写，因其与 JavaScript 有着深厚渊源，从独特角度梳理了 ECMAScript 标准化等关键发展阶段，展现了 JavaScript 如何从最初的脚本语言成长为如今无处不在的编程工具。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="a-brief-history-of-javascript"><a href="https://deno.com/blog/history-of-javascript" target="_blank" rel="noopener noreferrer">A Brief History of JavaScript</a><a href="https://wang1212.github.io/2025/05/25/weekly/2025/weekly-review-ep2025w21#a-brief-history-of-javascript" class="hash-link" aria-label="a-brief-history-of-javascript的直接链接" title="a-brief-history-of-javascript的直接链接">​</a></h5>
<p>Deno 发布了一篇博客文章，讲述了 JavaScript 的发展简史，恰好今年是其发布的 30 周年。至于为什么是 Deno 来发布这样一篇博文，可能是因为其创始人与 JavaScript 的渊源。</p>
<p><code>JavaScript</code> <code>ECMAScript</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W19：服务端组件、Node.js 24 及 Llama 4]]></title>
            <link>https://wang1212.github.io/2025/05/11/weekly/2025/weekly-review-ep2025w19</link>
            <guid>https://wang1212.github.io/2025/05/11/weekly/2025/weekly-review-ep2025w19</guid>
            <pubDate>Sun, 11 May 2025 18:00:00 GMT</pubDate>
            <description><![CDATA[2025 年第 19 周的回顾，Dan Abramov 探讨了 Astro 组件与 React Server Components 的差异，建议从 Astro 入手理解服务端组件。Node.js v24.0.0 发布，更新包括默认附带 npm v11。Meta 的 Llama 4 采用混合专家架构及原生多模态训练，支持千万级 Token 上下文，但对硬件要求更高。V8 引擎新增显式编译提示，开发者可通过注释优化 JavaScript 启动性能。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>Dan Abramov 探讨了 Astro 组件与 React Server Components 的差异，建议从 Astro 入手理解服务端组件。Node.js v24.0.0 发布，更新包括默认附带 npm v11。Meta 的 Llama 4 采用混合专家架构及原生多模态训练，支持千万级 Token 上下文，但对硬件要求更高。V8 引擎新增显式编译提示，开发者可通过注释优化 JavaScript 启动性能。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="rsc-for-astro-developers"><a href="https://overreacted.io/rsc-for-astro-developers" target="_blank" rel="noopener noreferrer">RSC for Astro Developers</a><a href="https://wang1212.github.io/2025/05/11/weekly/2025/weekly-review-ep2025w19#rsc-for-astro-developers" class="hash-link" aria-label="rsc-for-astro-developers的直接链接" title="rsc-for-astro-developers的直接链接">​</a></h5>
<p>Dan Abramov 新的博文，探讨了 Astro 中用于服务端的 Astro Components 和 React 的 Server Components 的差异，两者的数据模型是相似的，都是单向数据流，相对于前者，RSC 使用纯 JavaScript 函数，无文件格式限制。作者建议开发者如果对于 RSC 感到困惑，或许可以从 Astro 开始了解服务端组件这一技术概念。</p>
<p><code>React.js</code> <code>Astro</code> <code>React Server Component</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="node-v2400-current"><a href="https://nodejs.org/en/blog/release/v24.0.0" target="_blank" rel="noopener noreferrer">Node v24.0.0 (Current)</a><a href="https://wang1212.github.io/2025/05/11/weekly/2025/weekly-review-ep2025w19#node-v2400-current" class="hash-link" aria-label="node-v2400-current的直接链接" title="node-v2400-current的直接链接">​</a></h5>
<p>Node.js v24.0.0 发布，带多多项重要变化，包括默认附带 npm v11，<code>URLPattern</code> API 现在全局可用，测试运行器现在可以自动等待子测试完成等等。</p>
<p><code>Node.js</code> <code>npm</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="llama-4-the-challenges-of-creating-a-frontier-level-llm"><a href="https://cameronrwolfe.substack.com/p/llama-4" target="_blank" rel="noopener noreferrer">Llama 4: The Challenges of Creating a Frontier-Level LLM</a><a href="https://wang1212.github.io/2025/05/11/weekly/2025/weekly-review-ep2025w19#llama-4-the-challenges-of-creating-a-frontier-level-llm" class="hash-link" aria-label="llama-4-the-challenges-of-creating-a-frontier-level-llm的直接链接" title="llama-4-the-challenges-of-creating-a-frontier-level-llm的直接链接">​</a></h5>
<p>Llama 4 和 Meta 在研究战略上的巨大转变背后的完整故事，Llama 首次采用了混合专家（MOE）架构，并在多模态模型实现上采用了顶级实验室通用的做法，即统一的嵌入架构和原生的多模态训练方式，新的模型支持千万级 TOKEN 上下文。Meta 此次的重大转型也伴随着风险，作为开源标杆的 Llama，后续对硬件性能的要求将更高，如何平衡开源社区的成本也是值得考虑的关键点。</p>
<p><code>AI</code> <code>LLM</code> <code>LLama</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="v8-explicit-compile-hints"><a href="https://v8.dev/blog/explicit-compile-hints" target="_blank" rel="noopener noreferrer">V8: Explicit Compile Hints</a><a href="https://wang1212.github.io/2025/05/11/weekly/2025/weekly-review-ep2025w19#v8-explicit-compile-hints" class="hash-link" aria-label="v8-explicit-compile-hints的直接链接" title="v8-explicit-compile-hints的直接链接">​</a></h5>
<p>JavaScript 启动时的解析编译延迟影响网页加载性能，V8 需在即时编译（eager）与延迟编译（lazy）间抉择，开发者可以通过添加魔术注释标记关键 JS 文件，主动控制编译时机，相当于给 V8 引擎提了个醒。</p>
<p><code>V8</code> <code>编译器</code> <code>性能优化</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W17：React Compiler RC 发布，自动记忆优化 React 应用性能]]></title>
            <link>https://wang1212.github.io/2025/04/27/weekly/2025/weekly-review-ep2025w17</link>
            <guid>https://wang1212.github.io/2025/04/27/weekly/2025/weekly-review-ep2025w17</guid>
            <pubDate>Sun, 27 Apr 2025 18:00:00 GMT</pubDate>
            <description><![CDATA[2025 年第 17 周的回顾，React 团队已发布 React Compiler 的候选版本，预示着稳定版即将推出。这个构建时工具旨在通过自动记忆功能，显著优化 React 应用程序的性能。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>React 团队已发布 React Compiler 的候选版本，预示着稳定版即将推出。这个构建时工具旨在通过自动记忆功能，显著优化 React 应用程序的性能。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="react-compiler-rc"><a href="https://react.dev/blog/2025/04/21/react-compiler-rc" target="_blank" rel="noopener noreferrer">React Compiler RC</a><a href="https://wang1212.github.io/2025/04/27/weekly/2025/weekly-review-ep2025w17#react-compiler-rc" class="hash-link" aria-label="react-compiler-rc的直接链接" title="react-compiler-rc的直接链接">​</a></h5>
<p>React 团队发布了 React Compiler 特性的候选版本，接下来即将发布稳定版本。React Compiler 是一个构建时工具，它通过自动记忆来优化你的 React 应用程序。</p>
<p><code>React</code> <code>React Compiler</code> <code>性能优化</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W16：API 开发学习指南与 MCP AI 工具创新]]></title>
            <link>https://wang1212.github.io/2025/04/20/weekly/2025/weekly-review-ep2025w16</link>
            <guid>https://wang1212.github.io/2025/04/20/weekly/2025/weekly-review-ep2025w16</guid>
            <pubDate>Sun, 20 Apr 2025 18:00:00 GMT</pubDate>
            <description><![CDATA[2025 年第 16 周的回顾，ByteByteGo 第 158 期内容提供了一份 API 开发的结构化学习指南，涵盖从 API 分类、请求响应、鉴权到测试部署等关键环节，并推荐了相关工具。同时，MCPify 作为一个创新的 Web 工具，能将用户创意转化为 AI 可用的 MCP Server Tool，展现了 AI 应用的新可能性，尽管目前没有免费版本。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>ByteByteGo 第 158 期内容提供了一份 API 开发的结构化学习指南，涵盖从 API 分类、请求响应、鉴权到测试部署等关键环节，并推荐了相关工具。同时，MCPify 作为一个创新的 Web 工具，能将用户创意转化为 AI 可用的 MCP Server Tool，展现了 AI 应用的新可能性，尽管目前没有免费版本。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ep158-how-to-learn-api-development"><a href="https://blog.bytebytego.com/p/ep158-how-to-learn-api-development" target="_blank" rel="noopener noreferrer">EP158: How to Learn API Development</a><a href="https://wang1212.github.io/2025/04/20/weekly/2025/weekly-review-ep2025w16#ep158-how-to-learn-api-development" class="hash-link" aria-label="ep158-how-to-learn-api-development的直接链接" title="ep158-how-to-learn-api-development的直接链接">​</a></h5>
<p>&lt;&lt;ByteByteGo&gt;&gt; 第 158 期内容带来了 API 开发的学习路径指南，提出结构化学习框架，从 API 分类和定义、请求与响应、鉴权、状态设计与开发、测试、部署和第三方集成多个方面给出了学习建议，同时给出了一些推荐的工具。</p>
<p><code>ByteByteGo</code> <code>API</code> <code>学习指南</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="mcpify"><a href="https://mcpify.ai/" target="_blank" rel="noopener noreferrer">MCPify</a><a href="https://wang1212.github.io/2025/04/20/weekly/2025/weekly-review-ep2025w16#mcpify" class="hash-link" aria-label="mcpify的直接链接" title="mcpify的直接链接">​</a></h5>
<p>一个 Web 工具，能将用户的创意通过 AI 生成转换为一个 MCP Server Tool 形式的 AI 工具，可以让 AI 应用使用，没有提供免费版本，但似乎是一个不错的产品创意。</p>
<p><code>MCP</code> <code>MCP Server</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W15：React 服务器组件、CSS-in-JS 转向与 Agent 协议新进展]]></title>
            <link>https://wang1212.github.io/2025/04/13/weekly/2025/weekly-review-ep2025w15</link>
            <guid>https://wang1212.github.io/2025/04/13/weekly/2025/weekly-review-ep2025w15</guid>
            <pubDate>Thu, 10 Apr 2025 18:00:00 GMT</pubDate>
            <description><![CDATA[2025 年第 15 周的回顾，本周技术动态包括 Dan Abramov 对 React 服务器组件设计哲学的深入解读，以及 Anthropic 关于 MCP（Model Context Protocol）的研讨会。此外，CSS-in-JS 时代随着 styled-components 进入维护模式而走向尾声。值得关注的是，谷歌发布了 A2A（Agent2Agent Protocol），旨在与 MCP 互补，推动 Agent 应用间的互操作性。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>本周技术动态包括 Dan Abramov 对 React 服务器组件设计哲学的深入解读，以及 Anthropic 关于 MCP（Model Context Protocol）的研讨会。此外，CSS-in-JS 时代随着 styled-components 进入维护模式而走向尾声。值得关注的是，谷歌发布了 A2A（Agent2Agent Protocol），旨在与 MCP 互补，推动 Agent 应用间的互操作性。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="react-for-two-computers"><a href="https://overreacted.io/react-for-two-computers/" target="_blank" rel="noopener noreferrer">React for Two Computers</a><a href="https://wang1212.github.io/2025/04/13/weekly/2025/weekly-review-ep2025w15#react-for-two-computers" class="hash-link" aria-label="react-for-two-computers的直接链接" title="react-for-two-computers的直接链接">​</a></h5>
<p>Dan Abramov 又一次针对 React 中两种概念，标签和组件的深入探讨，解释了 React 服务器组件的设计哲学。</p>
<p><code>Web</code> <code>前端</code> <code>React.js</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="building-agents-with-model-context-protocol---full-workshop-with-mahesh-murag-of-anthropic"><a href="https://www.youtube.com/watch?v=kQmXtrmQ5Zg" target="_blank" rel="noopener noreferrer">Building Agents with Model Context Protocol - Full Workshop with Mahesh Murag of Anthropic</a><a href="https://wang1212.github.io/2025/04/13/weekly/2025/weekly-review-ep2025w15#building-agents-with-model-context-protocol---full-workshop-with-mahesh-murag-of-anthropic" class="hash-link" aria-label="building-agents-with-model-context-protocol---full-workshop-with-mahesh-murag-of-anthropic的直接链接" title="building-agents-with-model-context-protocol---full-workshop-with-mahesh-murag-of-anthropic的直接链接">​</a></h5>
<p>Anthropic 举办的一场探讨 MCP 的研讨会，视频有点长，不过有些讨论还是很是收获颇丰的。</p>
<p><code>AI</code> <code>MCP</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="styled-components--in-maintenance-mode"><a href="https://opencollective.com/styled-components/updates/thank-you" target="_blank" rel="noopener noreferrer">styled-components  in "maintenance mode"</a><a href="https://wang1212.github.io/2025/04/13/weekly/2025/weekly-review-ep2025w15#styled-components--in-maintenance-mode" class="hash-link" aria-label="styled-components--in-maintenance-mode的直接链接" title="styled-components--in-maintenance-mode的直接链接">​</a></h5>
<p>随着 styled-components 库的作者宣布其进入维护模式后，CSS-in-JS 的时代落幕了。</p>
<p><code>Web</code> <code>前端</code> <code>CSS-in-JS</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="announcing-the-agent2agent-protocol-a2a"><a href="https://developers.googleblog.com/en/a2a-a-new-era-of-agent-interoperability/" target="_blank" rel="noopener noreferrer">Announcing the Agent2Agent Protocol (A2A)</a><a href="https://wang1212.github.io/2025/04/13/weekly/2025/weekly-review-ep2025w15#announcing-the-agent2agent-protocol-a2a" class="hash-link" aria-label="announcing-the-agent2agent-protocol-a2a的直接链接" title="announcing-the-agent2agent-protocol-a2a的直接链接">​</a></h5>
<p>在 MCP 快速发展的同时，谷歌发布了 Agent 应用之间通信的标准协议 A2A，期望与 MCP 互为补充，而不是相互替代。</p>
<p><code>AI</code> <code>Agent</code> <code>A2A</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W13：AI Agent 工程化经验总结]]></title>
            <link>https://wang1212.github.io/2025/03/30/weekly/2025/weekly-review-ep2025w13</link>
            <guid>https://wang1212.github.io/2025/03/30/weekly/2025/weekly-review-ep2025w13</guid>
            <pubDate>Sat, 29 Mar 2025 18:00:00 GMT</pubDate>
            <description><![CDATA[2025 年第 13 周的回顾，一篇文章探讨了构建 AI Agent 应用的工程实践。通过回顾过去一段时间的技术迭代，作者对 Agent 工程化的概念有了更深入的理解，分享了在实际开发中积累的经验。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>一篇文章探讨了构建 AI Agent 应用的工程实践。通过回顾过去一段时间的技术迭代，作者对 Agent 工程化的概念有了更深入的理解，分享了在实际开发中积累的经验。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="agent-engineering"><a href="https://www.latent.space/p/agent" target="_blank" rel="noopener noreferrer">Agent Engineering</a><a href="https://wang1212.github.io/2025/03/30/weekly/2025/weekly-review-ep2025w13#agent-engineering" class="hash-link" aria-label="agent-engineering的直接链接" title="agent-engineering的直接链接">​</a></h5>
<p>探讨了构建 AI Agent 应用的工程化经验，结果过去一段时间不断发展的技术迭代过程，对 Agent 工程化的概念有了更好的理解。</p>
<p><code>AI</code> <code>Agent</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W12：AI 应用与基础算法新进展]]></title>
            <link>https://wang1212.github.io/2025/03/23/weekly/2025/weekly-review-ep2025w12</link>
            <guid>https://wang1212.github.io/2025/03/23/weekly/2025/weekly-review-ep2025w12</guid>
            <pubDate>Sat, 22 Mar 2025 18:00:00 GMT</pubDate>
            <description><![CDATA[2025 年第 12 周的回顾，近期值得关注的技术动态，包括全球顶尖风投机构发布的最新生成式 AI 应用榜单，揭示了行业趋势。同时，深入探讨了布隆过滤器的基本原理与应用场景，并介绍了 agents.json 和模型上下文协议（MCP），这些新协议旨在简化 AI Agent 与服务的集成，提升 AI 应用的响应效率和表现。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>近期值得关注的技术动态，包括全球顶尖风投机构发布的最新生成式 AI 应用榜单，揭示了行业趋势。同时，深入探讨了布隆过滤器的基本原理与应用场景，并介绍了 agents.json 和模型上下文协议（MCP），这些新协议旨在简化 AI Agent 与服务的集成，提升 AI 应用的响应效率和表现。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-top-100-gen-ai-apps"><a href="https://a16z.com/100-gen-ai-apps-4/" target="_blank" rel="noopener noreferrer">The Top 100 Gen AI Apps</a><a href="https://wang1212.github.io/2025/03/23/weekly/2025/weekly-review-ep2025w12#the-top-100-gen-ai-apps" class="hash-link" aria-label="the-top-100-gen-ai-apps的直接链接" title="the-top-100-gen-ai-apps的直接链接">​</a></h5>
<p>全球风投机构发布的全球前 100 名 AI 应用榜单，每 6 个月更新一次，包含了对行业的分析，值得关注。</p>
<p><code>AI</code> <code>App</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="bloom-filter-a-deep-dive"><a href="https://www.kirupa.com/data_structures_algorithms/bloom_filter.htm" target="_blank" rel="noopener noreferrer">Bloom Filter: A Deep Dive</a><a href="https://wang1212.github.io/2025/03/23/weekly/2025/weekly-review-ep2025w12#bloom-filter-a-deep-dive" class="hash-link" aria-label="bloom-filter-a-deep-dive的直接链接" title="bloom-filter-a-deep-dive的直接链接">​</a></h5>
<p>布隆过滤器作为一个应用广泛的基础算法，一直不是很了解其作用和原理，在这篇通俗易懂的文章中总算知道了其大致原理和应用场景。</p>
<p><code>算法</code> <code>布隆过滤器</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="introducing-agentsjson"><a href="https://docs.wild-card.ai/agentsjson/introduction" target="_blank" rel="noopener noreferrer">Introducing agents.json</a><a href="https://wang1212.github.io/2025/03/23/weekly/2025/weekly-review-ep2025w12#introducing-agentsjson" class="hash-link" aria-label="introducing-agentsjson的直接链接" title="introducing-agentsjson的直接链接">​</a></h5>
<p>与 MCP 类似，agent.json 提出了如何定义传统的 API 以帮助 Agent 应用更好的识别和调用服务来获得更好的响应。</p>
<p><code>AI</code> <code>Agent</code> <code>API</code> <code>agents.json</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-is-model-context-protocol-mcp-how-it-simplifies-ai-integrations-compared-to-apis"><a href="https://norahsakal.com/blog/mcp-vs-api-model-context-protocol-explained/" target="_blank" rel="noopener noreferrer">What is Model Context Protocol (MCP)? How it simplifies AI integrations compared to APIs</a><a href="https://wang1212.github.io/2025/03/23/weekly/2025/weekly-review-ep2025w12#what-is-model-context-protocol-mcp-how-it-simplifies-ai-integrations-compared-to-apis" class="hash-link" aria-label="what-is-model-context-protocol-mcp-how-it-simplifies-ai-integrations-compared-to-apis的直接链接" title="what-is-model-context-protocol-mcp-how-it-simplifies-ai-integrations-compared-to-apis的直接链接">​</a></h5>
<p>简单解释了为什么需要 MCP，以及与传统的 API 有什么差异。</p>
<p><code>AI</code> <code>Agent</code> <code>MCP</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W11：2025 年软件架构与开源 AI 技术栈学习资源]]></title>
            <link>https://wang1212.github.io/2025/03/16/weekly/2025/weekly-review-ep2025w11</link>
            <guid>https://wang1212.github.io/2025/03/16/weekly/2025/weekly-review-ep2025w11</guid>
            <pubDate>Sat, 15 Mar 2025 18:00:00 GMT</pubDate>
            <description><![CDATA[2025 年第 11 周的回顾，推荐 2025 年学习软件架构的优质阅读材料，并提供了构建 AI 应用的开源技术栈资源列表。它为希望在软件架构和 AI 领域提升技能的开发者提供了实用的学习路径和工具参考。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>推荐 2025 年学习软件架构的优质阅读材料，并提供了构建 AI 应用的开源技术栈资源列表。它为希望在软件架构和 AI 领域提升技能的开发者提供了实用的学习路径和工具参考。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ep146-the-open-source-ai-stack"><a href="https://blog.bytebytego.com/p/ep146-the-open-source-ai-stack" target="_blank" rel="noopener noreferrer">EP146: The Open Source AI Stack</a><a href="https://wang1212.github.io/2025/03/16/weekly/2025/weekly-review-ep2025w11#ep146-the-open-source-ai-stack" class="hash-link" aria-label="ep146-the-open-source-ai-stack的直接链接" title="ep146-the-open-source-ai-stack的直接链接">​</a></h5>
<p>构建 AI 应用的开源技术栈资源列表。</p>
<p><code>AI</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ep151-24-good-resources-to-learn-software-architecture-in-2025"><a href="https://blog.bytebytego.com/p/ep151-24-good-resources-to-learn" target="_blank" rel="noopener noreferrer">EP151: 24 Good Resources to Learn Software Architecture in 2025</a><a href="https://wang1212.github.io/2025/03/16/weekly/2025/weekly-review-ep2025w11#ep151-24-good-resources-to-learn-software-architecture-in-2025" class="hash-link" aria-label="ep151-24-good-resources-to-learn-software-architecture-in-2025的直接链接" title="ep151-24-good-resources-to-learn-software-architecture-in-2025的直接链接">​</a></h5>
<p>在 2025 年推荐学习软件架构设计的好的阅读资源列表。</p>
<p><code>Software Architecture</code> <code>Reading List</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W9：MoE 模型、AI 工程师阅读清单与浏览器控制代理]]></title>
            <link>https://wang1212.github.io/2025/03/02/weekly/2025/weekly-review-ep2025w9</link>
            <guid>https://wang1212.github.io/2025/03/02/weekly/2025/weekly-review-ep2025w9</guid>
            <pubDate>Sat, 01 Mar 2025 18:00:00 GMT</pubDate>
            <description><![CDATA[2025 年第 9 周的回顾，人工智能领域的最新进展，包括 DeepSeek 开源的 MoE 大语言模型，该模型因其架构设计和优缺点而备受关注。此外，文章还推荐了 2025 年 AI 工程师的必读资源，并探讨了利用 AI 模型通过自然语言对话控制浏览器的潜力，特别提到了 Operator 项目，预示着计算机使用代理的未来发展方向。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>人工智能领域的最新进展，包括 DeepSeek 开源的 MoE 大语言模型，该模型因其架构设计和优缺点而备受关注。此外，文章还推荐了 2025 年 AI 工程师的必读资源，并探讨了利用 AI 模型通过自然语言对话控制浏览器的潜力，特别提到了 Operator 项目，预示着计算机使用代理的未来发展方向。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="mixture-of-experts-moe-llms"><a href="https://cameronrwolfe.substack.com/p/moe-llms" target="_blank" rel="noopener noreferrer">Mixture-of-Experts (MoE) LLMs</a><a href="https://wang1212.github.io/2025/03/02/weekly/2025/weekly-review-ep2025w9#mixture-of-experts-moe-llms" class="hash-link" aria-label="mixture-of-experts-moe-llms的直接链接" title="mixture-of-experts-moe-llms的直接链接">​</a></h5>
<p>在春节期间，DeepSeek 开源了一个基于 MoE 的大语言模型，在全球引起了很大的关注，然而当下大部分的大语言模型都是 MoE 架构的，这篇文章详细的探讨了 MoE 架构的设计和优缺点，对于想了解模型底层设计的人来说非常值得一读。</p>
<p><code>AI</code> <code>MoEs</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-2025-ai-engineer-reading-list"><a href="https://www.latent.space/p/2025-papers" target="_blank" rel="noopener noreferrer">The 2025 AI Engineer Reading List</a><a href="https://wang1212.github.io/2025/03/02/weekly/2025/weekly-review-ep2025w9#the-2025-ai-engineer-reading-list" class="hash-link" aria-label="the-2025-ai-engineer-reading-list的直接链接" title="the-2025-ai-engineer-reading-list的直接链接">​</a></h5>
<p>2025 年建议 AI 工程师阅读的资源列表。</p>
<p><code>AI</code> <code>Reading List</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="open-operator-serverless-browsers-and-the-future-of-computer-using-agents"><a href="https://www.latent.space/p/browserbase" target="_blank" rel="noopener noreferrer">Open Operator, Serverless Browsers and the Future of Computer-Using Agents</a><a href="https://wang1212.github.io/2025/03/02/weekly/2025/weekly-review-ep2025w9#open-operator-serverless-browsers-and-the-future-of-computer-using-agents" class="hash-link" aria-label="open-operator-serverless-browsers-and-the-future-of-computer-using-agents的直接链接" title="open-operator-serverless-browsers-and-the-future-of-computer-using-agents的直接链接">​</a></h5>
<p>使用 AI 模型通过自然语言对话的方式来控制浏览器，这是一个非常有潜力的方向。</p>
<ul>
<li><a href="https://openai.com/index/introducing-operator/" target="_blank" rel="noopener noreferrer">Introducing Operator</a></li>
</ul>
<p><code>AI</code> <code>Serverless Browsers</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W8：揭秘推理模型，超越传统 LLM]]></title>
            <link>https://wang1212.github.io/2025/02/23/weekly/2025/weekly-review-ep2025w8</link>
            <guid>https://wang1212.github.io/2025/02/23/weekly/2025/weekly-review-ep2025w8</guid>
            <pubDate>Thu, 20 Feb 2025 18:00:00 GMT</pubDate>
            <description><![CDATA[2025 年第 8 周的回顾，一篇文章深入探讨了当前热门的推理模型，阐释了它们与标准**大型语言模型（LLM）**之间的关联。在推理模型备受关注的当下，理解其工作原理及与现有 AI 范式的整合方式至关重要，为读者提供了全面审视这一前沿 AI 技术视角的宝贵机会。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>一篇文章深入探讨了当前热门的推理模型，阐释了它们与标准**大型语言模型（LLM）**之间的关联。在推理模型备受关注的当下，理解其工作原理及与现有 AI 范式的整合方式至关重要，为读者提供了全面审视这一前沿 AI 技术视角的宝贵机会。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="demystifying-reasoning-models"><a href="https://cameronrwolfe.substack.com/p/demystifying-reasoning-models" target="_blank" rel="noopener noreferrer">Demystifying Reasoning Models</a><a href="https://wang1212.github.io/2025/02/23/weekly/2025/weekly-review-ep2025w8#demystifying-reasoning-models" class="hash-link" aria-label="demystifying-reasoning-models的直接链接" title="demystifying-reasoning-models的直接链接">​</a></h5>
<p>一篇讲述推理模型及其与标准 LLM 的关系的文章，在推理模型大火的当下非常值得一看。</p>
<p><code>AI</code> <code>推理模型</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W5：推理模型普及与数据验证标准]]></title>
            <link>https://wang1212.github.io/2025/02/02/weekly/2025/weekly-review-ep2025w5</link>
            <guid>https://wang1212.github.io/2025/02/02/weekly/2025/weekly-review-ep2025w5</guid>
            <pubDate>Sat, 01 Feb 2025 18:00:00 GMT</pubDate>
            <description><![CDATA[2025 年第 5 周的回顾，一篇文章探讨了推理模型相较于传统模型的优势，指出它们正成为主流趋势，因其更低的成本和更优的性能。此外，文中还提到了 Zod、Valibot 和 ArkType 库的作者们共同发起了 Schema 标准规范，旨在统一数据验证方法，从而提升开发者的体验和促进相关生态的发展。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>一篇文章探讨了推理模型相较于传统模型的优势，指出它们正成为主流趋势，因其更低的成本和更优的性能。此外，文中还提到了 Zod、Valibot 和 ArkType 库的作者们共同发起了 Schema 标准规范，旨在统一数据验证方法，从而提升开发者的体验和促进相关生态的发展。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="why-reasoning-models-will-generalize"><a href="https://www.interconnects.ai/p/why-reasoning-models-will-generalize" target="_blank" rel="noopener noreferrer">Why reasoning models will generalize</a><a href="https://wang1212.github.io/2025/02/02/weekly/2025/weekly-review-ep2025w5#why-reasoning-models-will-generalize" class="hash-link" aria-label="why-reasoning-models-will-generalize的直接链接" title="why-reasoning-models-will-generalize的直接链接">​</a></h5>
<p>一篇探讨推理模型为什么将会普及的博文，相对于标准模型来说，推理模型正成为一种趋势，并且成本更低，效果更好。</p>
<p><code>AI</code> <code>推理模型</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="standard-schema"><a href="https://standardschema.dev/" target="_blank" rel="noopener noreferrer">Standard Schema</a><a href="https://wang1212.github.io/2025/02/02/weekly/2025/weekly-review-ep2025w5#standard-schema" class="hash-link" aria-label="standard-schema的直接链接" title="standard-schema的直接链接">​</a></h5>
<p>Zod、Valibot 和 ArkType 库的作者们发起了 Schema 的标准规范并在各自的库中进行了实现，这为后续的生态发展提供了基础，以提升开发者体验为目标。</p>
<p><code>JavaScript</code> <code>Data Schema</code> <code>数据校验</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2025W3：Docusaurus 3.7 发布及 2024 大模型技术总结]]></title>
            <link>https://wang1212.github.io/2025/01/19/weekly/2025/weekly-review-ep2025w3</link>
            <guid>https://wang1212.github.io/2025/01/19/weekly/2025/weekly-review-ep2025w3</guid>
            <pubDate>Tue, 14 Jan 2025 18:00:00 GMT</pubDate>
            <description><![CDATA[2025 年第 3 周的回顾，Docusaurus 3.7 已发布，新增对 React 19 的支持，预示着 Docusaurus 4 即将面世。同时，一篇文章总结了 2024 年大型语言模型（LLMs）领域的技术进展，涵盖了该年度 AI 大模型发展的重要经验和趋势。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>Docusaurus 3.7 已发布，新增对 React 19 的支持，预示着 Docusaurus 4 即将面世。同时，一篇文章总结了 2024 年大型语言模型（LLMs）领域的技术进展，涵盖了该年度 AI 大模型发展的重要经验和趋势。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="docusaurus-37"><a href="https://docusaurus.io/blog/releases/3.7" target="_blank" rel="noopener noreferrer">Docusaurus 3.7</a><a href="https://wang1212.github.io/2025/01/19/weekly/2025/weekly-review-ep2025w3#docusaurus-37" class="hash-link" aria-label="docusaurus-37的直接链接" title="docusaurus-37的直接链接">​</a></h5>
<p>Docusaurus 3.7 发布，支持 react v19，相信很快 v4 将会发布。</p>
<p><code>Docusaurus</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="things-we-learned-about-llms-in-2024"><a href="https://simonwillison.net/2024/Dec/31/llms-in-2024/" target="_blank" rel="noopener noreferrer">Things we learned about LLMs in 2024</a><a href="https://wang1212.github.io/2025/01/19/weekly/2025/weekly-review-ep2025w3#things-we-learned-about-llms-in-2024" class="hash-link" aria-label="things-we-learned-about-llms-in-2024的直接链接" title="things-we-learned-about-llms-in-2024的直接链接">​</a></h5>
<p>一篇对 2024 年 AI 大模型领域技术发展的总结</p>
<p><code>AI</code> <code>LLMs</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
        <item>
            <title><![CDATA[「每周回顾」EP2024W49：AI 编码、抗锯齿技术与 React v19 发布]]></title>
            <link>https://wang1212.github.io/2024/12/08/weekly/2024/weekly-review-ep2024w49</link>
            <guid>https://wang1212.github.io/2024/12/08/weekly/2024/weekly-review-ep2024w49</guid>
            <pubDate>Fri, 06 Dec 2024 18:00:00 GMT</pubDate>
            <description><![CDATA[2024 年第 49 周的回顾，聚焦三大领域：首先，“70% 问题”揭示了 AI 辅助编码的现状，指出 AI 已能处理代码中大部分问题，但关键部分仍需人工介入。其次，文章深入探讨了画布中抗锯齿技术的历史演变与实现细节。最后，React v19 正式发布，此次更新带来了架构升级、表单开发体验优化及多项新功能。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>AI 总结</div><div class="admonitionContent_BuS1"><p>聚焦三大领域：首先，“70% 问题”揭示了 AI 辅助编码的现状，指出 AI 已能处理代码中大部分问题，但关键部分仍需人工介入。其次，文章深入探讨了画布中抗锯齿技术的历史演变与实现细节。最后，React v19 正式发布，此次更新带来了架构升级、表单开发体验优化及多项新功能。</p></div></div>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-70-problem-hard-truths-about-ai-assisted-coding"><a href="https://addyo.substack.com/p/the-70-problem-hard-truths-about" target="_blank" rel="noopener noreferrer">The 70% problem: Hard truths about AI-assisted coding</a><a href="https://wang1212.github.io/2024/12/08/weekly/2024/weekly-review-ep2024w49#the-70-problem-hard-truths-about-ai-assisted-coding" class="hash-link" aria-label="the-70-problem-hard-truths-about-ai-assisted-coding的直接链接" title="the-70-problem-hard-truths-about-ai-assisted-coding的直接链接">​</a></h5>
<p>探讨人工智能助理解决了编码过程中的 70% 那些问题，而其它问题目前还需要人类完成。</p>
<p><code>AI</code> <code>Coding</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="aaa---analytical-anti-aliasing"><a href="https://blog.frost.kiwi/analytical-anti-aliasing/" target="_blank" rel="noopener noreferrer">AAA - Analytical Anti-Aliasing</a><a href="https://wang1212.github.io/2024/12/08/weekly/2024/weekly-review-ep2024w49#aaa---analytical-anti-aliasing" class="hash-link" aria-label="aaa---analytical-anti-aliasing的直接链接" title="aaa---analytical-anti-aliasing的直接链接">​</a></h5>
<p>深入探讨了画布中抗锯齿效果的实现和历史发展路径。</p>
<p><code>Canvas</code> <code>Analytical Anti-Aliasing</code></p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="react-v19"><a href="https://react.dev/blog/2024/12/05/react-19" target="_blank" rel="noopener noreferrer">React v19</a><a href="https://wang1212.github.io/2024/12/08/weekly/2024/weekly-review-ep2024w49#react-v19" class="hash-link" aria-label="react-v19的直接链接" title="react-v19的直接链接">​</a></h5>
<p>React.js v19 正式发布，带来了架构上的升级，优化表单相关业务的开发体验，还有很多其它新功能，从源码来看，也是一次很大的变化。</p>
<p><code>React</code> <code>v19</code></p>]]></content:encoded>
            <author>mrwang1212@126.com (不如怀念)</author>
            <category>每周回顾</category>
        </item>
    </channel>
</rss>