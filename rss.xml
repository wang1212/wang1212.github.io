<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>不如怀念 Blog</title>
        <link>https://wang1212.github.io/</link>
        <description>不如怀念 Blog</description>
        <lastBuildDate>Sun, 16 Oct 2022 23:49:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hans</language>
        <item>
            <title><![CDATA[Web 字体加载对 DOM 位置的影响]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/web-tips-fonts</link>
            <guid>/Computer-Technology/Web/web-tips-fonts</guid>
            <pubDate>Sun, 16 Oct 2022 23:49:00 GMT</pubDate>
            <description><![CDATA[由于使用了第三方 Web 字体，产生了一个潜在的线上问题，苦于调试过程中一直没有考虑字体加载会对 DOM 位置产生影响，浪费了大量时间和精力。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-10-16 23:49:00 </em></p></blockquote><p>由于公司的业务会用到自己设计师定制的 Web 字体，所以一般在组件开发过程中会利用 CSS 引用该字体（<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face" target="_blank" rel="noopener noreferrer">@font-face</a>），前段时间发现一个线上问题：在部分 iOS 机型上，DOM 元素的位置发生了错位。</p><p>首先，对于问题复现的必要条件做了分析，为以下几个方面</p><ul><li>部分 iOS 机型（新旧机型均有）</li><li>问题发生在首次页面加载时（即后续加载问题不再复现）</li></ul><p>根据以往的经验和代码实现来看，必然是 DOM 测量的尺寸数据不准确导致的，于是首先尝试加了延迟的方案看看效果，发现问题依然存在，然后尝试线上调试看看具体测量到的 DOM 尺寸数据是否准确。由于线上调试比较麻烦，所以也更进一步分析为何问题出现在清除缓存后的首次加载，推测是什么资源加载太慢导致的？但当时由于着急，主要考虑的都是显式引入的资源（例如 js、css 文件等，忽略了一些细节），在这方面也没有什么进展。于是，继续尝试线上调试，结果发现首次加载和二次加载得到的 DOM 测量数据完全一致，此时这个问题就有点“邪门”了，难道是浏览器内核渲染的问题？Google 了很久，也没有什么收获，但由于对线上用户不是很大，就暂时搁置了这个问题，暂且认为是浏览器内核的一个什么 bug（虽然说这个确实没有什么说服力，但苦于花了很多精力和时间依然找不到原因，考虑到解决这个问题的性价比不高就先放弃了）。</p><p>当然，之所以写这篇文章也是为了记录导致这个问题的真正原因和解决方案。后来，有个同事提到之前的文档有记录过类似因为公司定制字体加载导致的页面问题，简单看了下文档后，发现之前确实忽略了这个细节（字体文件通常比较大，加载比较慢，但由于是放在 CDN 上的所以一直没太在意）。经过和业务侧的前端沟通后，一天下午抽空尝试了下，发现确实是由于 Web 字体资源太大（CDN 不太稳定）加载较慢导致的 DOM 位置渲染错位（需要注意的是，该原因并没有导致 DOM 测量出现错误）。这里贴一下解决该问题的示例代码：</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">document</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">fonts</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ready</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">then</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">resize</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Web 字体加载快慢没有对 DOM 测量的数据准确性产生影响，也是在视觉效果会有影响（导致 DOM 位置错位）。这个问题场景以前没有遇到过，其原因和解决该问题所用到的 API 也比较冷门，所以在此记录一下。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考资源">参考资源<a class="hash-link" href="#参考资源" title="标题的直接链接">​</a></h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/fonts" target="_blank" rel="noopener noreferrer"><code>Document.fonts</code></a></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
        </item>
        <item>
            <title><![CDATA[利用脚本执行 `tsc` 忽略类型检查错误]]></title>
            <link>https://wang1212.github.io/Computer-Technology/TypeScript/tools-typescript-use-script-to-ts-types</link>
            <guid>/Computer-Technology/TypeScript/tools-typescript-use-script-to-ts-types</guid>
            <pubDate>Sat, 06 Aug 2022 17:33:00 GMT</pubDate>
            <description><![CDATA[TypeScript 作为一个强类型的语言，增强了 JavaScript 编程开发体验，类型定义文件为一个第三方模块的使用体验增色不少，现如今很多 npm 包的发布都内置了对类型定义文件的支持。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-08-13 02:46:00 </em></p></blockquote><p>在发布 npm 包时添加对 TypeScript 类型定义文件的支持会让用户的使用体验增色不少，TypeScript 官方提供了 <code>tsc --emitDeclarationOnly</code> 命令用来生成类型定义文件（<code>.d.ts</code>）。但是，该命令会同时执行类型检查，遇到错误时会报错中断命令行进程，这就使其无法直接集成在 CI 环节在发布 npm 包时自动执行生成类型定义文件的操作。当然，一个解决办法就是解决掉代码中所有的类型检查错误即可，既然讨论到这个问题，必然不会花费额外精力去解决一些历史遗留问题。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tsc --emitDeclarationOnly</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>怎么能让以上脚本在执行时不做类型检查（或者说忽略错误，例如类似 <code>silent</code> 标志位），在查阅了很多资料之后，显然 TypeScript 官方没有对其支持（因为他们认为忽略类型检查错误就失去了使用 TypeScript 的意义），但另一方面前端生态的很多工具链却都一致的推荐使用类 Babel 这种编译方案（不做类型检查），而且有很多开发者是有这样的需求的。在查阅很多资料无果后，突然想到前段时间学习了 Nodejs 的 <code>child_process</code> API，可以用其来写一些工具脚本，最终有了一个待实践的方案：利用 JS 脚本执行该命令，但忽略类型检查错误不让进程中断，这样就可以安全的集成到 CI 环节中。经过实践，确实能达到预期效果，贴出代码：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> execSync </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'node:child_process'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword control-flow" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> args </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">argv</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">slice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> isSilent </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> args</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">findIndex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">item</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> item</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">trim</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'--silent'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">isSilent </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    args</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">splice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">isSilent</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    isSilent </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    isSilent </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">isSilent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'[generate-types] silent mode'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// see https://nodejs.org/dist/latest-v16.x/docs/api/child_process.html#optionsstdio</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">execSync</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">npx tsc --emitDeclarationOnly </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">args</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation method function property-access" style="color:#d73a49">join</span><span class="token template-string interpolation punctuation" style="color:#393A34">(</span><span class="token template-string interpolation string" style="color:#e3116c">' '</span><span class="token template-string interpolation punctuation" style="color:#393A34">)</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">cwd</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">WORKING_DIRECTORY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">encoding</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'utf8'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">stdio</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> isSilent </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'ignore'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'inherit'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'inherit'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'ignore'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// console.error(error.message);</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里实际上是利用 <code>try ... catch</code> 将错误捕获，防止其导致进程异常中断；另外，使用了 <code>stdio</code> 配置项去控制子进程的执行结果信息怎么交由父进程来处理，利用 <code>silent</code> 标志位将所有的输出信息忽略，或者仅忽略掉错误信息，类型检查的结果信息依然可以打印到控制台以做参考。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">node</span><span class="token plain"> generate-types.cjs --silent</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">node</span><span class="token plain"> generate-types.cjs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">node</span><span class="token plain"> generate-types.cjs --watch </span><span class="token comment" style="color:#999988;font-style:italic"># 等同于 tsc --emitDeclarationOnly --watch</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在实际使用的过程中，发现 CI 环节的 Node 环境中会报错（<code>npx</code> 不存在），解决方案就是将要执行的命令写成 npm 脚本，在 js 脚本中运行 npm 脚本即可，例如：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// npm 脚本</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string-property property" style="color:#36acaa">"tsc:types"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"tsc --emitDeclarationOnly"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// js 脚本</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">execSync</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">npm run tsc:types</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>至此，利用脚本执行命令可以轻松解决无法控制程序命令行为的问题。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考资源">参考资源<a class="hash-link" href="#参考资源" title="标题的直接链接">​</a></h2><ul><li><a href="https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html" target="_blank" rel="noopener noreferrer">https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html</a></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>工具</category>
            <category>TypeScript</category>
            <category>类型定义</category>
        </item>
        <item>
            <title><![CDATA[前端工程化：对于构建工具链的简单思考]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/tools-web-fee-toolchain</link>
            <guid>/Computer-Technology/Web/tools-web-fee-toolchain</guid>
            <pubDate>Mon, 01 Aug 2022 21:07:00 GMT</pubDate>
            <description><![CDATA[前端工程化是一个值得了解的方向，从软件开发、测试到部署上线整个环节的深入，可以对软件工程有一个更深刻的理解，对于前端来说，构建工具链是工程化中重要的一环，这里对这么多年接触过得工具做一个简单的总结思考。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-08-06 00:21:00 </em></p></blockquote><p>前端工程化是在做与业务开发完全不同的事情，旨在解决软件工程领域与开发者密切相关的问题，通常会将其与基建开发、DevOps 放在一起讨论。前端开发是复杂的，其结合了 HTML/CSS/JavaScript 3 种语言，甚至还有很多其超集，没有开箱即用的工具链，不像 Java Web 开发、Android 开发等等有官方或者商业领域非常成熟的工具可以利用，一切都源于开源社区的从 0 开始构建。正因如此，前端工程化领域百花齐放，开放与创新展现的淋漓尽致，这也是前端开发者了解学习软件工程的机会。</p><p>这里对于前端开发中比较重要的一个环节，即构建工具链，谈谈这么多年来了解与使用了多种工具后的简单思考。怎么理解构建工具链？也许可以想想前端开发中编译、打包、静态资源压缩、静态语法检查、热更新、代码 Lint、测试、类型文件生成……</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="任务运行器与打包工具">任务运行器与打包工具<a class="hash-link" href="#任务运行器与打包工具" title="标题的直接链接">​</a></h2><p>在 16、17 年刚开始接触前端构建工具时，最先尝试的则是 gulp.js，当时也了解到 grunt.js 但没有真正的使用过，主要是它们是同类东西，具有可替代性；后来，将 gulp.js 与 webpack(v3) 配合起来用，主要原因还是前者只能处理单个文件，后者可以将多个文件合并（bundle）；再后来，迁移到 webpack(v4) 后替代了 gulp.js 这部分的任务，直接将 gulp.js 移出工具链。</p><blockquote><p>gulp.js(grunt.js) -&gt; gulp.js + webpack(v3) -&gt; webpack(v4)</p></blockquote><p>以上是<strong>针对 Web 应用开发</strong>的构建工具的选择变化，即由任务运行器（Task Runner）向打包工具（Bundler）的转变，这些工具的目标是一致的：为 Web 开发建立一个完整的自动化工作流（automate workflow）。那么，为何会发生这样的转变呢？工具是为开发者服务的，Web 前端开发者对于 Web 应用的优化着力点则在于将多个分散的小文件合并为一个大文件，较少 HTTP 请求次数从而提高加载性能以改善用户体验。换句话说，像 gulp.js 这样的任务运行器更大程度上解决的是开发体验问题，可以自动将 JS/CSS 的超集语言（例如 Less/Sass/CoffeeScript）进行编译，对静态资源进行压缩等等；而打包工具在此基础之上，更加契合了前端领域的 Web 应用优化法则，帮开发者包办一切，只需编码即可交付上线。孰好孰坏？孰优孰劣？这不是一个绝对的问题，特定场景下用更适合的工具解决问题即可，但显然，当下 webpack 是可以解决大多数问题的最佳选择。</p><p>当然，同一时代下，打包工具不仅只有 webpack，还有 rollup（后续会提到）、Parcel 诸如此类的工具，所以前面说这个领域是百花齐放，开放与创新并存。每个工具都有自己的特点和优势，这里我重点讲讲我自己实际用过的一些工具。</p><p>后来，开发一些工具库的时候，尝试了 rollup 这个打包工具。先说一个比较有趣的观点：</p><ul><li>Web App -&gt; webpack</li><li>JS Lib -&gt; rollup</li></ul><p>这个意思就是打包 Web 应用选 webpack，打包工具库用 rollup。无论这个观点合不合理，但这是一个值得我去尝试 rollup 的理由。鉴于历史原因，一般工具库的构建产物需要包含多种格式（UMD/CJS/ESM），一番体验过后，rollup 可以轻松完成这个任务，反观 webpack 就不是很好处理了。另一方面，rollup 的生态中似乎处理 JS 的工具要多一些，反而处理静态资源，尤其是 CSS、HTML 的优秀工具就很匮乏了，而 webpack 的生态足够繁荣，针对 JS/CSS/HTML 都有相关的优秀工具。说到这里，实际上刚开始提到的观点多少还是有点道理的，两个工具的生态解决问题的侧重点不同。</p><p>任务运行器和打包工具的区别是前者处理单个文件，后者处理并合并所有文件，而真正完成编译、压缩、语法检查等等核心任务的则是其它工具（比如 Babel/ESLint/Prettier/TypeScript），通常会以相应的打包工具的插件方式来使用。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="插件">插件<a class="hash-link" href="#插件" title="标题的直接链接">​</a></h3><p>插件机制是一个程序具备可扩展性和灵活性的关键，各种任务运行器和打包工具均依赖于插件增强自身的能力，所以一个工具的社区生态中优秀插件足够多是非常重要的。这里秉承一个理念：一个工具只解决最关键的一个问题，多个工具组合起来就可以解决特定领域的一类问题，而像 webpack 和 rollup 这样的工具就是用来组合各种各样工具的容器。</p><p>以插件的方式解决问题很好，不同的工具解决同样的问题不用重复实现，避免造轮子，减轻了工具维护者的负担，也促进了前端工具生态的繁荣，可以有很多人以不同的方式解决同样的问题（例如 Terser 与 UglifyJS 都可以用来压缩和混淆 JS 代码）。</p><p>有人曾想过从 webpack 迁移到 rollup，但以我自身的体验为例，举个例子可以说明，插件有好处亦有坏处。webpack 的生态非常繁荣，当你尝试迁移到 rollup 时想找到对应的替代品，这个过程可能会让你非常沮丧，ESLint 工具可以帮助我们做代码 Lint，webpack 社区中有一个非常优秀的插件（<code>fork-ts-checker-webpack-plugin</code>(v6)）可以将 ESLint 集成到 webpack 工作流中，但 rollup 中似乎找不到一个满意的插件（<code>@rollup/plugin-eslint</code> 已经很久没有维护，且不支持 ESLint 8.x）。这个时候，你是不是会抛出一个疑问：一个工具（比如 ESLint）作为独立的工具库避免了造轮子，但为了适配 webpack、rollup 等众多的打包工具，都需要一一编写插件并持续维护，反而又造了一批轮子？</p><p>的确，插件是一个解决问题的好方式，但也有其劣势，每当出现一个新的打包工具，那么就需要复制实现一遍现有打包工具的插件。另一方面，我们也可以思考，将所有的工具集成到打包工具中是否有必要？实际上我最近就面临这个问题。</p><p>当我基于 rollup 工具链构建一个用来开发 UI 组件库的工作流时，庞大的第三方依赖让 rollup 在开发模式（watch）下增量编译非常缓慢（4s 以上），经过调试发现是 <code>@rollup/plugin-node-resolve</code> 插件耗费了大量的时间，这也是 rollup 与 webpakc 对待第三方模块实现有所不同的显著差异，基本上无解；另一方面，为了做 TypeScript 的类型检查，这又进一步减缓了增量编译的速度。为了解决庞大依赖项对增量编译的速度巨大影响，尝试换用用 Go 编写的 esbuild 打包工具，在这个迁移过程中对于 CSS 的处理则耗费了很多时间（因为 esbuild 主要还是专注于处理 JS 代码），对于 TypeScript 也不做类型检查。那么，当我们为了解决一个收益很高的问题而迁移到另一个打包工具时，一些收益较低的特性面临不被支持的问题（比如 TypeScript 类型检查），实际上我们可以将辅助性的工具与打包工具解耦，用任务运行器来与打包工具的工作流并行运行即可解决，这也是我所采用的方案。</p><blockquote><p>rollup + Core(plugin) + Util(plugin) -&gt; rollup + Core(plugin) + Util(task)</p></blockquote><p>借助 <code>concurrently</code> 这个命令行工具，我们可以将一些辅助性的工具与打包工具并行运行，这样就可以实现开发模式下用 esbuild，生产模式下用 rollup，还能具备 TypeScript 类型检查的能力：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># development</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">concurrently --kill-others </span><span class="token string" style="color:#e3116c">"node esbuild-watch.cjs"</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"tsc --noEmit --watch"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># production</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">concurrently --kill-others </span><span class="token string" style="color:#e3116c">"rollup --config"</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"tsc --noEmit --watch"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>实际上，开发模式使用 esbuild，生产模式使用 rollup 正是打包工具 vite 的底层架构设计。当然，这种方案有其性能劣势，本应该开启一个文件系统的 watch 服务即可，但这里可能会利用诸如 <code>chokidar</code> 这样的 npm 包开启多个 watch 服务，也许操作系统底层对该场景做了优化，但没有深究也就不得而知了。</p><p>所以说，当我们使用打包工具替代任务运行器时，刚开始是方便了，但也加强你对该工具的依赖性，后续很难迁移到其它工具链。没有最好的工具，只有更优的方案，满足自己的需求即可。</p><p>当然，对于利用插件来组合各种工具解决各类问题的方案，显然有部分人觉得是不满意的，每种工具都有特定的配置项，组合的工具越多，配置起来就越复杂。Rome 试图用一套工具来解决目前前端构建工具领域典型的几个环节的问题，替代 Babel/ESLint/webpack/Prettier/Jest 等等，值得关注。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="用高性能语言解决性能问题">用高性能语言解决性能问题<a class="hash-link" href="#用高性能语言解决性能问题" title="标题的直接链接">​</a></h2><p>当前端的项目日益复杂，庞大的代码库使用 JS 编写的构建工具处理起来显得有些力不从心，毕竟 JS 是一个脚本语言，有性能上的劣势。这个时候用一些高性能语言编写构建工具来解决前端工具链中存在的性能问题成为了一个有趣的方案，当前的代表作是 esbuild（用 Go 编写） 和 swc（用 Rust 编写）。为什么说它有趣呢？作为 Web 开发者，应该很少会有人想到利用一些比 JS 较为低级的高性能语言去编写工具，这个有很高的学习成本；另一方面，这些工具也确实以非常强的性能优势很好的解决了前端工具链中的性能问题，值得尝试。</p><p>以第三方语言编写的工具，目前有一个劣势就是能参与到社区生态中贡献的开发者群体将占比很小，对比 esbuild 和 rollup、webpack 这些用 JS 编写的工具的代码库贡献者数量就有一个非常直观的感受。其次，这些工具利用性能优势解决了核心性能问题，其它问题还依赖于前端社区中现有的工具来完成，而不是重复造轮子（实际上也不现实），而 esbuild 的插件机制实际上还处于实验阶段，而正如官方文档中所说的，用 JS 编写的插件将不具备 Go 的性能优势，esbuild 的方案就是暴露一些耗费性能的程序 API（用 Go 实现）供 JS 代码调用，以达到一个折衷的效果，既支持引入前端生态的现有工具，也不太会降低性能。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="如何定义工具">如何定义工具<a class="hash-link" href="#如何定义工具" title="标题的直接链接">​</a></h2><p>另一方面，前端工程化所做的一切应该是致力于提高开发者体验、让流程标准化、自动化，从而提高开发效率和保证质量。那么，在这个过程中，所引入的一些工具链不应该成为开发者的“绊脚石”，应该结合团队实际情况选择合适的工具和方案，当团队成员都在迎合工具时，实际上已经违背了前端工程化的初衷了。</p><p>这里其实可以以前端一个比较有争论的工具来举例，即 TypeScript。首先，TypeScript 在前端领域的应用是越来越广泛了，这是一个趋势，说明其在前端生态中有一定的重要性和作用。一般来说，有一部分人认为应该用 TypeScript，可以提高代码质量，而另一部分人则认为不应该用 TypeScript，因为会降低编码效率。当把 TypeScript 引入编译工具链时，一般来说有两种选择，一种是类 Babel 方案（不做类型检查），而另一种就是官方 <code>tsc</code> 方案，出于简单性后者会更方便一些，但后者会做类型检查更加严格，这就意味着开发过程中你要解决所有的错误才能让代码编译通过（这在一些场景下实际上是开发者的噩梦，至少我是这样觉得的并有所体会）。简单来说，引入 TypeScript 的目的是提高代码质量，但以什么样的方式和程度去实践这个事情其实是有争议的。对于体验过早期前端开发的人来说，我觉得 TypeScript 主要是解决了两个问题，第一个就是类型定义所带来的代码智能提示功能（以前是需要边写边查文档的），第二个就是类型检查可以帮助我们提前发现问题并修复（但这里并不代表开发者需要迎合严格的类型检查，应该更多的是作为一种参考信息）。由于前端开发（尤其是业务开发）有其复杂性，不适合生搬硬套类 Java 这种严格的静态类型语言标准，将 TypeScript 作为工具引入，而不是为了迎合 TypeScript 的标准花费精力解决额外的事情（或者说历史遗留问题）。对于 TypeScript 来说，更大的一个作用就是可以用来生成类型定义文件（<code>.d.ts</code>），官方提供的命令行工具（<code>tsc --emitDeclarationOnly</code>）会在发生类型检查错误时报错中断，这就使其很难集成在 CI 中（例如 npm 包发布前自动生成类型定义文件），期望官方能提供一个忽略类型检查错误的命令行标志位，但奈何没有（在查找资料的过程中发现有很多开发者有类似的需求），无奈之下只能以 JS 脚本的方式去运行该命令同时忽略掉类型检查错误以集成在 CI 中。</p><p>所以说，前端生态中，很多优秀的工具官方推荐或者默认是选择不做类型检查的编译方案的（类 Babel），我想这也是有原因的，且是被大多数人所认同的。工程化实施的过程中，引入任何工具链的最终效果应该是“帮助”开发者，而不是带来“绊脚石”的副作用，完美的类型检查是我们所追求的，但投入产出比是需要重点考虑的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>随着 <code>wasm</code>、ES Module、HTTP2/HTTP3 等的推广与普及，前端工程化领域还在不断演进，Bundle 与 Bundle less 将如何发展值得期待。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考资源">参考资源<a class="hash-link" href="#参考资源" title="标题的直接链接">​</a></h2><ul><li><a href="https://gulpjs.com/" target="_blank" rel="noopener noreferrer">https://gulpjs.com/</a></li><li><a href="https://gruntjs.com/" target="_blank" rel="noopener noreferrer">https://gruntjs.com/</a></li><li><a href="https://webpack.js.org/" target="_blank" rel="noopener noreferrer">https://webpack.js.org/</a></li><li><a href="https://rollupjs.org/" target="_blank" rel="noopener noreferrer">https://rollupjs.org/</a></li><li><a href="https://esbuild.github.io/" target="_blank" rel="noopener noreferrer">https://esbuild.github.io/</a></li><li><a href="https://swc.rs/" target="_blank" rel="noopener noreferrer">https://swc.rs/</a></li><li><a href="https://parceljs.org/" target="_blank" rel="noopener noreferrer">https://parceljs.org/</a></li><li><a href="https://babeljs.io/" target="_blank" rel="noopener noreferrer">https://babeljs.io/</a></li><li><a href="https://vitejs.dev/" target="_blank" rel="noopener noreferrer">https://vitejs.dev/</a></li><li><a href="https://rome.tools/" target="_blank" rel="noopener noreferrer">https://rome.tools/</a></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>工具</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>构建工具链</category>
        </item>
        <item>
            <title><![CDATA[桥接模式：跨平台的事件机制设计]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Program-Architecture-Design/bridge-mode-design-of-cross-platform-event-mechanism</link>
            <guid>/Computer-Technology/Program-Architecture-Design/bridge-mode-design-of-cross-platform-event-mechanism</guid>
            <pubDate>Sun, 12 Jun 2022 22:22:00 GMT</pubDate>
            <description><![CDATA[最近在做图表组件库的技术调研的架构方案设计，参考了很多开源库的源码，发现其中跨平台的事件机制设计很值得学习，如果要用软件设计模式来解释，那大概就是桥接模式了。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-06-12 22:22:00 </em></p></blockquote><p>对于 Web 的图表组件库来说，一些功能比较强大的开源库，渲染层可以支持 DOM、SVG、Canvas、WebGL 等多个平台的环境，而图表库的很多功能的实现都和渲染层紧密相关。</p><p>最近，在参考学习一些开源的图表组件库时，发现在跨平台设计中，事件机制的实现很有意思，所以在这里以最简化的代码来解释和记录一下这个方案。如果要用经典的软件设计模式来解释，大概就是<strong>桥接模式</strong>了。</p><p><strong>桥接模式（Bridge Pattern）</strong> 将一个功能的实现拆分为抽象（Abstraction）和实现（Implementor），让其相互独立的扩展和定义，借助该模式可以设计一种平台无关的软件架构。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="事件机制">事件机制<a class="hash-link" href="#事件机制" title="标题的直接链接">​</a></h2><p>事件机制是软件设计中最基础、最为常见的一种设计，对于 Web 图表组件库来说要提供一些处理用户交互（例如点击、拖动、右键点击等）的机制。一个典型的事件模型类如下：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">EventEmitter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  _handlerMap </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">event</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">off</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">event</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">emit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">event</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter spread operator" style="color:#393A34">...</span><span class="token parameter">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>对于用户来说，对外暴露 <code>on()</code> 和 <code>off()</code> 方法来注册和取消事件，而图表库内部需要完成事件触发（<code>emit()</code>）的实现，而这里与渲染层耦合。以渲染层为 DOM 实现来举例，支持点击事件：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Chart</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 渲染层为 DOM 实现</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">__renderer</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">DOMRenderer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_handler</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">EventEmitter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter spread operator" style="color:#393A34">...</span><span class="token parameter">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_handler</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">off</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter spread operator" style="color:#393A34">...</span><span class="token parameter">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_handler</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">off</span><span class="token punctuation" style="color:#393A34">(</span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">__bindEvent</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// ! 事件触发（绑定）与渲染层耦合</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">__renderer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">domElem</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">addEventListener</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'click'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_handler</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">emit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'click'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token spread operator" style="color:#393A34">...</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">event</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">otherArgs</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="跨平台实现">跨平台实现<a class="hash-link" href="#跨平台实现" title="标题的直接链接">​</a></h3><p>参考<strong>桥接模式</strong>，这里可以把图表类中的事件机制实现拆分为抽象（<code>Handler</code>）和实现（<code>HandlerProxy</code>），前者管理用户注册的事件池，后者负责特定平台的事件触发实现。示例代码如下：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Handler</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">EventEmitter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">handlerProxy</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">__handlerProxy</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> handlerProxy</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 注册事件到代理类中</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">__handlerProxy</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'click'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">event</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter spread operator" style="color:#393A34">...</span><span class="token parameter">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// ! 触发用户注册的事件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">emit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">event</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">DOMHandlerProxy</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">EventEmitter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">renderer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">__renderer</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> renderer</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">__bindEvent</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 根据渲染层的平台实现事件绑定，以 DOM 实现为例</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">renderer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">domElem</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'click'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">event</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter spread operator" style="color:#393A34">...</span><span class="token parameter">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// ! 触发 Handler 注册的事件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">emit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">event</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>对于图表类来说，<code>Handler</code> 类提供了完整的事件机制，但其内部把具体平台相关的事件触发实现交给 <code>HandlerProxy</code> 类去实现。这样就完成了事件机制的实现与特定平台实现分离的目标，针对不同平台实现不同的<code>HandlerProxy</code> 类即可。现在图表类的代码应该如下：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Chart</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 渲染层为 DOM 实现</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">__renderer</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">DOMRenderer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_handler</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Handler</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">DOMHandlerProxy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">__renderer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter spread operator" style="color:#393A34">...</span><span class="token parameter">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_handler</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">off</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter spread operator" style="color:#393A34">...</span><span class="token parameter">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_handler</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">off</span><span class="token punctuation" style="color:#393A34">(</span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>现在来看，图表类中之前事件触发实现与平台相关的代码已经被独立出去，且可以根据不同的渲染层实现完成无缝衔接。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>以上就是利用桥接模式对跨平台的事件机制的简化设计，解决此类问题时，最重要的是划分<strong>抽象</strong>和<strong>实现</strong>两部分。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li><a href="https://en.wikipedia.org/wiki/Bridge_pattern" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Bridge_pattern</a></li><li><a href="https://refactoringguru.cn/design-patterns/bridge" target="_blank" rel="noopener noreferrer">https://refactoringguru.cn/design-patterns/bridge</a></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>程序架构设计</category>
        </item>
        <item>
            <title><![CDATA[从贝塞尔曲线的计算感受数学建模的魅力]]></title>
            <link>https://wang1212.github.io/Tools/tools-animation-math</link>
            <guid>/Tools/tools-animation-math</guid>
            <pubDate>Sat, 30 Apr 2022 22:49:00 GMT</pubDate>
            <description><![CDATA[最近在做可视化相关的东西，需要计算贝塞尔曲线上一点的坐标位置，从这个解决过程中感受到了数学建模的魅力。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-05-03 20:38:00 </em></p></blockquote><p>最近在做前端可视化相关的东西，在完成动画效果时，遇到一个不是很好处理的问题，需要让一个元素在画布上以曲线的轨迹进行运动。因为动画这块之前基本也没有怎么接触过，做的也都是简单的线性动画效果，所以碰到这个需求点的时候觉得是有点难度的。</p><p>其实，要真的实现按照一定曲线轨迹运动的效果倒也不难，毕竟圆、椭圆方程在平时做布局计算的时候用的也挺多的。但是，用圆或者椭圆计算曲线相当于是找了个特殊场景，不具备通用性；另一方面，说到曲线的绘制，贝塞尔曲线是绕不开的，这也是非常值得考虑的方案。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="动画帧计算">动画帧计算<a class="hash-link" href="#动画帧计算" title="标题的直接链接">​</a></h2><p>一段动画实际上是由多个静态帧组成的，当帧率达到人眼不可分辨的程度时（比如 60 FPS），就感觉像是一个无缝连续的视频在流畅的播放。而某一静态帧的状态用数学公式来表达如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">y = F(t) (0 &lt;= t &lt;= 1)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>那么对于一个物体从 <strong>x0</strong> 运动到 <strong>x1</strong>，如何计算 <strong>t</strong> 时刻的位置？按照我的思路来看，可以转化为以下数学公式：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">F(t) = (x1 - x0)*t + x0 (0 &lt;= t &lt;= 1)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这么算其实是没错的，但这个公式在数学建模的角度来看，其实是不好的，后面以计算贝塞尔曲线上一点的坐标为例解释为什么。这里先给出线性贝塞尔曲线数学公式：</p><blockquote><p>B(t) = (1 - t)<em>P0 + t</em>P1 (0 &lt;= t &lt;= 1)</p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="贝塞尔曲线">贝塞尔曲线<a class="hash-link" href="#贝塞尔曲线" title="标题的直接链接">​</a></h2><p>贝塞尔曲线（Bézier curve）在工业设计领域是一个非常重要的存在，应用非常广泛，在计算机图形学领域中贝塞尔曲线也有很好的支持，例如 Canvas API 原生就有提供贝塞尔曲线的绘制接口。</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo" target="_blank" rel="noopener noreferrer">CanvasRenderingContext2D.bezierCurveTo()</a></p></blockquote><p>贝塞尔曲线从概念上来看是很难理解的，如何转化为数学公式来计算贝塞尔曲线，而这个过程是什么样的，刚开始理解起来也是比较抽象的。先来看看其（二次贝塞尔曲线）数学定义：</p><blockquote><p><img loading="lazy" src="https://raw.githubusercontent.com/wang1212/static-resources/dd604c85291dcdcc1ac677e8ad4c85d0aebcde12/images/Quadratic-Bezier-Curve-Formula.svg" alt="Quadratic Bezier Curve Formula" title="Quadratic Bezier Curve Formula" class="img_ev3q"></p></blockquote><p>其中 <strong>P0</strong>、<strong>P1</strong>、<strong>P2</strong> 分别为起点、控制点、终点。</p><p>那么，有了公式计算二次贝塞尔曲线上一点按理来说已经可以实现了，但在这里之所以用贝塞尔曲线这个比较难理解的数学模型来探讨，其实是为了最终得到一个简化的具有普适性的解决动画帧计算的数学模型。对于熟悉动画计算的人来说，很多文档中对于开头提出的问题给出的数学公式为以下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">F(t) = (1 - t)*x0 + t*x1 (0 &lt;= t &lt;= 1)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个时候，你会发现无论是以上公式，还是一次、二次或更高次的贝塞尔曲线公式中都有一个类似的元素即 <strong>1 - t</strong>。当然，公式都是相互推导以不同形式展现的，即：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">F(t) = (1 - t)*x0 + t*x1 = (x1 - x0)*t + x0 (0 &lt;= t &lt;= 1)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>公式相等是本质，但不同的展现形式蕴含的思维模式不同（或者说有没有利用好数学建模来进行问题的抽象）。以上面的公式来分析，前者表达的是 <strong>x0</strong> 与 <strong>x1</strong> 分别在 <strong>t</strong> 时刻状态的叠加，后者则表达的是起始状态 <strong>x0</strong> 叠加从 <strong>x0</strong> 运动到 <strong>x1</strong> 过程中 <strong>t</strong> 时刻的状态。从其蕴含的思维模式来分析，<strong>前者关注的是结果，后者则先分析过程再得到结果。</strong></p><p>其实，说到这里，我觉得一个好的数学建模思维的魅力已经体现出来了，动画帧计算应尽可能的简单且关注核心问题，不要被过程所迷惑，这也是为何很多文档中的公式包含 <strong>1 - t</strong> 元素的原因。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="计算二次贝塞尔曲线上一点的坐标">计算二次贝塞尔曲线上一点的坐标<a class="hash-link" href="#计算二次贝塞尔曲线上一点的坐标" title="标题的直接链接">​</a></h3><p>接下来，结合 <a href="https://zh.wikipedia.org/zh-cn/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A#%E4%BA%8C%E6%AC%A1%E6%9B%B2%E7%B7%9A" target="_blank" rel="noopener noreferrer">wiki 中构建贝塞尔曲线一节的动态图</a> 对二次贝塞尔曲线的形成过程有个直观的理解，利用以上思路对计算二次贝塞尔曲线上一点的坐标这个问题进行数学建模：</p><p>给出 <strong>P0</strong>、<strong>P1</strong>、<strong>P2</strong> 分别为起点、控制点、终点，曲线上的点是控制点由 P0 运动到 P1 过程中点 P01 与终点由 P1 运动到 P2 过程中点 P12 连线上的点，转为数学公式如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">P01 = (1 - t)P0 + tP1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">P12 = (1 - t)P1 + tP2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">P012 = (1 - t)P01 + tP12</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这样就得到了 <strong>t</strong> 时刻曲线上的点坐标为 <strong>P012</strong>，根据推导 P012 其实就等于前面给出的二次贝塞尔曲线的公式 <strong>B(t)</strong> 。按照这个思路和数学建模的思维，计算三次、四次贝塞尔曲线上点的坐标就很简单，不断叠加 t 时刻的状态即可。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>总结成一句话来说，用数学建模的思维把复杂问题高度抽象成简单问题，再用简单的方案去解决复杂的问题。对于动画帧计算来说，就要把问题高度抽象成起始状态与终止状态在 t 时刻状态的叠加，不应该关注过程，最终就可以得出线性轨迹和曲线轨迹的计算本质上都是一个线性插值的过程，无论多么复杂的轨迹问题都是要用线性插值的方案来解决。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li><a href="https://zh.wikipedia.org/zh-cn/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A" target="_blank" rel="noopener noreferrer">https://zh.wikipedia.org/zh-cn/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A</a></li><li><a href="https://www.cnblogs.com/fangsmile/articles/11642607.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/fangsmile/articles/11642607.html</a></li></ul>]]></content:encoded>
            <category>工具</category>
            <category>动画</category>
            <category>数学</category>
        </item>
        <item>
            <title><![CDATA[如何更好的维护开源项目]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Tools/tools-maintain-open-source-projects-with-tools</link>
            <guid>/Computer-Technology/Tools/tools-maintain-open-source-projects-with-tools</guid>
            <pubDate>Fri, 22 Apr 2022 22:53:00 GMT</pubDate>
            <description><![CDATA[一直以来开源精神被开发者所推崇，维护开源项目需要注意什么，有哪些工具可以帮助我们解决通用的复杂问题，值得学习了解。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-05-03 16:43:00 </em></p></blockquote><p>一直以来，开源精神被开发者所推崇，开源项目为开发者提供了不用付出除时间以外任何成本就可以学习前沿技术的最佳途径，另一方面，我们应该思考开源为何会成功，在全球开发者参与协作的情况下代码仓库为何能保持整洁、不出现大规模冲突而奔溃，上下游依赖如何管理，这背后有既定的规范进行强约束，也有一系列社区工具来完成复杂而有价值的工作。所以，从参与或者维护开源项目的角度来看，这些<strong>社区公认的最佳实践</strong>值得我们了解，学习这些东西也能在一定程度上提高我们管理项目的能力。</p><p>以下内容属于经验积累，持续更新，仅供参考。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="许可证license">许可证（License）<a class="hash-link" href="#许可证license" title="标题的直接链接">​</a></h2><p>代码本质上是开发者的创作成果，具有<strong>专利权</strong>，所以开发者应该意识到自己所享有的权利，同时在使用其他人所提供的代码时避免侵权。作为开源项目，有必要在开源之前选择一个合适的<strong>许可证</strong>，提前<strong>声明权利和义务</strong>（一般作为单独的 <em>LICENSE</em> 文本文件保存），避免在后期陷入麻烦之中，GitHub 官方为我们提供了一个简单的工具站点：</p><blockquote><p><a href="https://choosealicense.com/" target="_blank" rel="noopener noreferrer">Choose an open source license</a></p></blockquote><p>另外，在如今很多人喜欢自由创作并分享的氛围下，创作者应该了解一个比较有用的许可证类型：</p><blockquote><p><a href="https://creativecommons.org/" target="_blank" rel="noopener noreferrer">Creative Commons licenses</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="贡献者许可协议cla">贡献者许可协议（CLA）<a class="hash-link" href="#贡献者许可协议cla" title="标题的直接链接">​</a></h2><p>对于一些大型开源项目，尤其是有商业公司背景的项目，个人开发者想参与贡献首先面临的是要签署相应的<strong>贡献者许可协议（Contributor License Agreement, CLA）</strong>，该协议本质上是要求开发者授予他们所贡献代码段的永久专利权，目前来看这是商业公司规避法律风险的一种通用做法。</p><p>作为示例，以下是 Facebook(Meta) 公司的贡献者许可协议：</p><blockquote><p><a href="https://code.facebook.com/cla" target="_blank" rel="noopener noreferrer">Contributing to Meta Open Source Projects</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="文档">文档<a class="hash-link" href="#文档" title="标题的直接链接">​</a></h2><p>我们知道，在全球开发者参与协作的背景下，口头沟通是不现实的（即便有条件，长期来看我认为依赖口头沟通是一件非常低效的事情），所以文档也就成了最关键的东西，无论对于使用开源项目的开发者还是维护开源项目的开发者，文档都成了达成共识的关键，各种类型的文档也成为了默认的规范。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="markdown">Markdown<a class="hash-link" href="#markdown" title="标题的直接链接">​</a></h3><p>首先，文档的载体是比较重要的，因为其必须满足易于使用、富有表现力的特点。Markdown 已是开发者群体使用最为广泛的文档格式了，目前许多创作者也用该格式来写博客文章，其最终可以被转换为 HTML 文件从而以更好的视觉效果发布在网络。</p><p>Markdown 格式没有统一的规范，由于平台差异和实现差异，在一些细节处有略微不同或者增强，但通过了解 <strong>CommonMark Spec</strong> 来学习使用 Markdown 应该是一个好的开始：</p><blockquote><p><a href="https://commonmark.org/" target="_blank" rel="noopener noreferrer">https://commonmark.org/</a></p></blockquote><p>这里有一个专门学习 Markdown 的网站，可以了解一些 Markdown 的扩展语法和相关的工具：</p><blockquote><p><a href="https://www.markdownguide.org/" target="_blank" rel="noopener noreferrer">Markdown Guide</a></p></blockquote><p>除此之外，为了使用 Markdown 编写文档更方便，有一种将 <a href="https://reactjs.org/docs/introducing-jsx.html" target="_blank" rel="noopener noreferrer">JSX</a> 和 Markdown 相结合的增强格式：</p><blockquote><p><a href="https://mdxjs.com/" target="_blank" rel="noopener noreferrer">MDX</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="自述文档">自述文档<a class="hash-link" href="#自述文档" title="标题的直接链接">​</a></h3><p>优秀的开源项目不仅仅只提供源代码，更附带了一系列非常有价值的文档，其中最基本且不可或缺的应该是<strong>自述文档（READMEs）</strong> 了（通常命名为 <em>README.md</em>），项目维护者应该通过这个文档向人们传递一些项目的基本信息，例如项目名称、作者的动机、建立项目的原因、解决了什么问题、简单的使用方法、注意事项、问题反馈途径、许可证、其它相关文档的引用链接等。</p><p>关于该文档的一些详细信息，可以看看 GitHub 官方对其的描述：</p><blockquote><p><a href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes" target="_blank" rel="noopener noreferrer">About READMEs</a></p></blockquote><p>也许，这里有一个更好的站点可以学习了解：</p><blockquote><p><a href="https://www.makeareadme.com/" target="_blank" rel="noopener noreferrer">Make a README</a></p></blockquote><p>当然，对于一些刚开始的简单项目，可以借助一些社区提供的工具来自动生成自述文档，例如：</p><blockquote><p><a href="https://github.com/kefranabg/readme-md-generator" target="_blank" rel="noopener noreferrer">readme-md-generator</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="架构概述文档">架构概述文档<a class="hash-link" href="#架构概述文档" title="标题的直接链接">​</a></h3><p>对于一个大型复杂的项目来说，开发者参与贡献有一定的困难，这个困难体现在开发者无法了解庞大项目背后的整体架构设计理念和原则，难以评估局部代码改动对整体项目的影响，所以项目中如果拥有一个<strong>架构概述文档（Architecture Overview）</strong> 那么这种状况就会得到改善。</p><p>最简单的方式就是在项目中提供一个 <em>ARCHITECTURE.md</em>，通过下面这篇文章也可以进一步了解：</p><blockquote><p><a href="https://matklad.github.io/2021/02/06/ARCHITECTURE.md.html" target="_blank" rel="noopener noreferrer">ARCHITECTURE.md</a></p></blockquote><p>作为示例，这是 Google 的一个项目的架构概述文档：</p><blockquote><p><a href="https://github.com/google/crosvm/blob/main/ARCHITECTURE.md" target="_blank" rel="noopener noreferrer">crosvm Architecture</a></p></blockquote><p>事实上，架构概述文档不止是解决了贡献者参与困难的问题，也是一种非常有价值的学习资料，作为一种行业的通用方案，向社区公开其背后的架构设计理念，可以促进技术改进和变革。这里，以 React Native 的文档为例：</p><blockquote><p><a href="https://reactnative.dev/architecture/overview" target="_blank" rel="noopener noreferrer">React Native Architecture Overview</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="行为准则声明">行为准则声明<a class="hash-link" href="#行为准则声明" title="标题的直接链接">​</a></h3><p>开源社区之所以发展到如今的规模，是因为参与其中的人们遵守共同的价值观、具备契约精神，所以声明你的态度以及表明你的价值观会消除人们的不信任感，鼓励人们积极参与进来。</p><p><strong>开源社区的行为准则（A Code of Conduct for Open Source Communities）</strong> 声明通常以 <em>CODE_OF_CONDUCT.md</em> 文档的形式存在于项目中，通过以下站点了解更多信息：</p><blockquote><p><a href="https://www.contributor-covenant.org/" target="_blank" rel="noopener noreferrer">Contributor Covenant</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="贡献指南文档">贡献指南文档<a class="hash-link" href="#贡献指南文档" title="标题的直接链接">​</a></h3><p>开源项目参与协作的开发者来自全球各个国家，他们有不同的习惯和文化，如何保证项目代码的整洁、风格统一、项目的管理不会由此崩溃，需要指导贡献者按照既定的规则完成整个过程的工作，社区通用的做法是在项目中提供一份<strong>贡献指南（Contributing guidelines）</strong> 文档，一般被命名为 <em>CONTRIBUTING.md</em>。</p><p>具体内容参考以下 Mozilla Science Lab 的文档：</p><blockquote><p><a href="https://mozillascience.github.io/working-open-workshop/contributing/" target="_blank" rel="noopener noreferrer">How to Build a CONTRIBUTING.md</a></p></blockquote><p>作为示例，Atom 项目的贡献指南非常具有参考意义：</p><blockquote><p><a href="https://github.com/atom/atom/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contributing to Atom</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="rfc-文档">RFC 文档<a class="hash-link" href="#rfc-文档" title="标题的直接链接">​</a></h3><p><strong>RFC (Request for Comments) 文档</strong>在互联网世界是一个重要的存在，早期是网络技术标准工作组用来在互联网上针对即将推出的技术标准征求意见进行记录的，最著名的组织是 Internet Engineering Task Force (IETF)。</p><p>事实上，这种模式已在各行各业被采纳，作为开源项目来说，项目的主导方一般在大版本更新中预期引入的重大变化或者新的功能等也会采用 RFC 文档的形式向所有的贡献者和使用者等群体征求意见并记录，这也是项目维护团队针对项目进一步的发展方向达成共识的关键所在。</p><p>作为示例，以下是 React.js 官方的 RFC 文档仓库：</p><blockquote><p><a href="https://github.com/reactjs/rfcs" target="_blank" rel="noopener noreferrer">https://github.com/reactjs/rfcs</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="国际化与本地化">国际化与本地化<a class="hash-link" href="#国际化与本地化" title="标题的直接链接">​</a></h3><p>开源社区是全球开发者都可以参与其中的，所以文档方面应当考虑到<a href="https://en.wikipedia.org/wiki/Internationalization_and_localization" target="_blank" rel="noopener noreferrer"><strong>国际化与本地化（i18n &amp; L10n）</strong></a>的有限支持，这里为什么说有限支持呢？因为文档的翻译事实上是比较耗费时间成本的一件事情，而且要有高质量的文档翻译则需要了解相应国家文化的人来完成这项工作，所以折衷方案是视项目情况而定，一般来说至少提供一份用国际通用语言英语编写的文档，再提供一份用项目核心开发者群体所在国家的主流语言编写的文档。</p><p>文档的命名应该相同，不同的是本地化的文档用相应的<a href="https://www.w3.org/International/articles/language-tags/" target="_blank" rel="noopener noreferrer">语言标签</a>（参考<a href="https://docs.microsoft.com/en-us/cpp/c-runtime-library/language-strings" target="_blank" rel="noopener noreferrer">微软文档</a>）进行标识，例如：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">README.md</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">README.zh-CN.md</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="源代码管理">源代码管理<a class="hash-link" href="#源代码管理" title="标题的直接链接">​</a></h2><p>源代码管理通常借助 SVN 和 Git 等类似版本控制软件进行，现今主流的方案多是采用 Git，所以下面的内容可能更多的倾向于 Git 相关。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="git-工作流">Git 工作流<a class="hash-link" href="#git-工作流" title="标题的直接链接">​</a></h3><p>Git 非常适合多人协作的项目源代码管理，而协作的模式要视具体项目情况而定，一般来说社区推荐的有以下几种 <strong>Git 工作流（Workflow）</strong>，可以进行学习了解，根据情况采用或改进：</p><ul><li><a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener noreferrer">Git Flow - A successful Git branching model</a></li><li><a href="https://docs.gitlab.com/ee/topics/gitlab_flow.html" target="_blank" rel="noopener noreferrer">GitLab Flow</a></li><li><a href="http://githubflow.github.io/" target="_blank" rel="noopener noreferrer">GitHub Flow</a></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="提交信息格式">提交信息格式<a class="hash-link" href="#提交信息格式" title="标题的直接链接">​</a></h3><p>Git 的提交日志信息可能是除通过看源代码以外最快速最直观的了解某次提交做了哪些变动、对项目产生了哪些影响的最佳途径，所以项目拥有一个达成共识的<strong>提交信息格式（Commit Message Format）</strong> 的约束规则是保证项目质量的一大举措。</p><p>社区有一个推荐的提交信息格式的规范：</p><blockquote><p><a href="https://www.conventionalcommits.org/" target="_blank" rel="noopener noreferrer">Conventional Commits</a></p></blockquote><p>作为示例，Google 的 Angular 项目的提交信息格式规范非常具有参考意义：</p><blockquote><p><a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-format" target="_blank" rel="noopener noreferrer">Angular Commit Message Format</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="代码审查">代码审查<a class="hash-link" href="#代码审查" title="标题的直接链接">​</a></h3><p>开源项目的代码贡献是受严格控制的，一般来说参与者分为维护者（Maintainer）和贡献者（Contributor），贡献者对项目代码所做的更改需要提交 PR（Pull Request，GitLab 为 Merge Request）经过维护者的<strong>代码审查（Code Review）</strong> 后才能成功合并到项目中。</p><p>对于代码审查的意义，不仅在于控制项目的代码质量，还有益于项目成员之间进行相互学习。社区有非常多的代码审查指南可以进行参考，这里推荐谷歌的工程实践进行学习：</p><blockquote><p><a href="https://google.github.io/eng-practices/" target="_blank" rel="noopener noreferrer">Google Engineering Practices Documentation</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="软件发布的生命周期">软件发布的生命周期<a class="hash-link" href="#软件发布的生命周期" title="标题的直接链接">​</a></h2><p>无论是使用软件还是维护软件项目的开发者，都应该了解<strong>软件发布的生命周期</strong>，尽管现今的 Web 应用弱化了软件版本的概念。遵循行业惯例的好处是可以大大降低人们的理解成本，也能更好的融入社区，以下是关于软件发布的生命周期的详细信息，可以作为很好的参考进行学习：</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Software_release_life_cycle" target="_blank" rel="noopener noreferrer">Software release life cycle</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="语义化版本控制">语义化版本控制<a class="hash-link" href="#语义化版本控制" title="标题的直接链接">​</a></h3><p>互联网软件会随着时间变化不断的迭代更新以提供新的功能和更好的用户体验，前面所说的软件发布的生命周期是一个概念性的东西，真正运用在软件发布过程中的则是一种推荐性规范<strong>语义化版本控制（Semantic Versioning）</strong>：</p><blockquote><p><a href="https://semver.org/" target="_blank" rel="noopener noreferrer">https://semver.org/</a></p></blockquote><p>为了便于管理软件发布和版本控制，不同语言的生态中都有基于该规范所开发的一些自动化发布管理工具，借助这些工具则可以在遵守规范的同时省心省力，也不会因为手动管理导致出错。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="变更日志">变更日志<a class="hash-link" href="#变更日志" title="标题的直接链接">​</a></h3><p>随着软件版本的迭代发布，应该维护一个<strong>变更日志（Changelog）</strong>，因为软件的版本号变动可传递的信息是有限的，尤其是对于大版本更新、重要问题修复以及破坏性更新等需要更多更详细的信息，这样便于依赖方、使用方对于是否同步更新版本进行决策，也对旧版本用户迁移到新版本有一个比较明确的向导信息。</p><p>开源项目的代码仓库中，比较常见的变更日志文件通常为 <em>CHANGELOG.md</em>，这也是一个社区公认的最佳实践，更多信息可以从以下站点进行了解：</p><blockquote><p><a href="https://keepachangelog.com/" target="_blank" rel="noopener noreferrer">keep a changelog</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="devops">DevOps<a class="hash-link" href="#devops" title="标题的直接链接">​</a></h2><p>开源项目不同于商业公司的内部项目，缺少非常多的资源来保证项目的质量和管理，例如自动化测试、自动发布、自动漏洞监测修复等等，或者我们可以称之为 <a href="https://en.wikipedia.org/wiki/DevOps" target="_blank" rel="noopener noreferrer"><strong>DevOps</strong></a> 工具链。不过，好在现今有非常多的工具免费提供给开源项目使用，借助这些工具，我们可以让开源项目和商业公司的项目一样拥有规范的开发、测试、交付流程，从而保证项目质量，也能节省更多的时间专注于编码，而不是花费更多时间去做管理项目这种有价值但复杂又通用的事情。</p><p>下面推荐一些可以加入 CI/CD 工具链中的工具帮助开发者自动化完成开源项目的诸多管理工作。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cicd-平台">CI/CD 平台<a class="hash-link" href="#cicd-平台" title="标题的直接链接">​</a></h3><ul><li><a href="https://circleci.com/" target="_blank" rel="noopener noreferrer">CircleCI</a></li><li><a href="https://github.com/features/actions" target="_blank" rel="noopener noreferrer">GitHub Actions</a></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="代码审查与质量评估">代码审查与质量评估<a class="hash-link" href="#代码审查与质量评估" title="标题的直接链接">​</a></h3><ul><li><a href="https://about.codecov.io/" target="_blank" rel="noopener noreferrer">Codecov</a></li><li><a href="https://app.codacy.com/" target="_blank" rel="noopener noreferrer">Codacy</a></li><li><a href="https://www.codefactor.io/" target="_blank" rel="noopener noreferrer">CodeFactor</a></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="依赖更新">依赖更新<a class="hash-link" href="#依赖更新" title="标题的直接链接">​</a></h3><ul><li><a href="https://docs.renovatebot.com/" target="_blank" rel="noopener noreferrer">Renovate</a></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="漏洞监测和修复">漏洞监测和修复<a class="hash-link" href="#漏洞监测和修复" title="标题的直接链接">​</a></h3><ul><li><a href="https://snyk.io/" target="_blank" rel="noopener noreferrer">Snyk</a></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="版本控制和发布">版本控制和发布<a class="hash-link" href="#版本控制和发布" title="标题的直接链接">​</a></h3><ul><li><a href="https://semantic-release.gitbook.io/semantic-release/" target="_blank" rel="noopener noreferrer">semantic-release</a></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="api-文档管理">API 文档管理<a class="hash-link" href="#api-文档管理" title="标题的直接链接">​</a></h3><ul><li><a href="https://hoppscotch.io/" target="_blank" rel="noopener noreferrer">hoppscotch</a></li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="其它">其它<a class="hash-link" href="#其它" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="财务管理">财务管理<a class="hash-link" href="#财务管理" title="标题的直接链接">​</a></h3><p>很多时候，开源是免费且无偿的，但开源的本质是源代码自由而不是技术免费，开源社区发展到至今繁荣的程度与参与者遵守共同的价值观有很大的关系，开源社区为改变世界的技术变革付出了很多。另一方面，正是在这种强包容性和开放性的社区环境氛围中，开源事业才发展的越来越好，现今有很多人可以因为自己的开源项目给别人带来商业价值而获得财务收益，对于更懂代码的开发者来说，如何进行项目的财务收益管理和分配成了个一个棘手的问题，而社区也给出了相应的方案来帮助项目维护者改善这个局面。</p><ul><li><a href="https://opencollective.com/opensource" target="_blank" rel="noopener noreferrer">Open Source Collective</a></li><li><a href="https://github.com/sponsors" target="_blank" rel="noopener noreferrer">GitHub Sponsors</a></li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考资料">参考资料<a class="hash-link" href="#参考资料" title="标题的直接链接">​</a></h2><ul><li><a href="https://the-turing-way.netlify.app/" target="_blank" rel="noopener noreferrer">The Turing Way</a></li><li><a href="https://opensource.guide/" target="_blank" rel="noopener noreferrer">Open Source Guides</a></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>工具</category>
            <category>项目管理</category>
            <category>开源</category>
        </item>
        <item>
            <title><![CDATA[细数博客的这几年]]></title>
            <link>https://wang1212.github.io/Life/2022-life-blog</link>
            <guid>/Life/2022-life-blog</guid>
            <pubDate>Thu, 07 Apr 2022 22:53:00 GMT</pubDate>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-04-07 22:53:00 </em></p></blockquote><p>最近翻看自己的博客，尤其是对博客代码做了一些改动，不禁有些许感慨。于是，想就博客建立以来历经的这几年种种做个回顾并记录下来。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="博客的建立">博客的建立<a class="hash-link" href="#博客的建立" title="标题的直接链接">​</a></h2><p>根据博文目录的时间线来看，第一篇博文的发表是在 2016 年 04 月，想来那时正值大三的时光，也是接触 Web 前端不到一年的时间节点。</p><p>回忆大学时光，让自己觉得最有意思的便是缘于对梦幻西游网游的热爱，迷上了一款仿梦幻西游的单机游戏，这个过程中为了满足自己的愿望就尝试去修改游戏代码以实现定制化。这个过程持续了相当一段时间，期间自己学会了 Ruby 语言和了解了一些游戏制作和开发相关的知识，同时结交了一些热爱游戏的朋友，他们还自己运营着一个论坛网站。而这个游戏论坛网站起初也是用一个通用的论坛框架做的，后来论坛的一部分页面开始定制化开发，这便是自己大学期间对 Web 前端开发产生兴趣的一个重要原因。</p><p>刚开始接触 Web 前端开发的时候，大多数时候都是去图书馆借阅相关的技术书籍来看，闲暇时间也会去网上看一些公开课。已经记不太清楚是怎么接触到博客这个东西的，但建立自己的博客站是当时自己的一个大的目标。当时，技术流的玩家都是利用 GitHub 仓库托管自己的博客站的，还有很多主题非常漂亮的框架，刚开始也是费了好大劲利用 GitHub 仓库和一个框架建立了自己的博客站。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="自己写一个博客站点">自己写一个博客站点<a class="hash-link" href="#自己写一个博客站点" title="标题的直接链接">​</a></h2><p>有了自己的博客，当然就喜欢看看别人的博客是什么样子的，发现大家都大同小异。不过，有一次看到一个小姐姐的博客页面发现和大家的很不一样，有人评论问她这个页面是怎么做的，看她的回答意思自己是做 Web 前端开发的就尝试自己写一个博客站。拥有一个与众不同的博客站在当时对于自己来说是巨大的吸引力，而这也促进自己进一步加快了学习 Web 前端开发技术的速度。</p><p>另一方面，有了博客站，内容从哪里来呢？没有内容谁来看你的博客呢，自己的新鲜感也很快就会冷却下来，于是处于学习过程中的自己决定把觉得重要的技术知识用博文记录下来，这也是自己早期博文的唯一产出途径。</p><p>回过头来，自己写一个博客站倒不是什么难事，很快就实现了自己的目标。</p><p>不过，在自己去年做博客站的一次大改版和最近在改动博客站的代码时，博客站的核心代码都没有变动过。为什么会提到这一点呢？因为博客站的代码架构是基于单页面应用（SPA）设计的，而路由功能和按组件渲染页面都是基于自己当时实现的一段很简单的代码完成的，没有依赖任何第三方工具库。偶然间看到自己多年前写的代码，虽然简陋但又解决了核心问题，不由得怀念起自己当初刚开始学习 Web 前端的时光。</p><p>相对于 JavaScript，自己最先接触和使用比较多的是 Ruby 语言，所以当时博客文章的处理过程也是用 Ruby 写的脚本，后来才改为用 JavaScript 重写。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="写博客的初衷">写博客的初衷<a class="hash-link" href="#写博客的初衷" title="标题的直接链接">​</a></h2><p>一晃好多年过去了，当年一时兴起建立的博客站坚持到现在也属实不易，感叹之余也在思考自己写博客的初衷。</p><p>站在 2016 年来看，玩博客是一个热潮期，大家关注的是有没有一个自己的博客，至于博客里面有什么则不重要，更甚的是大家还关注写的某篇博文点击量有多少，博客站的访问量有多少，自己也曾短暂追随过一段时间这些让人着迷的东西，不过很快自己就从中脱离出来了。站在当下来看，当年很多技术论坛或者博客站发展的还不错，现如今却惨不忍睹，最典型的莫过于 CSDN 了，灌水的内容多于正经内容。</p><p>在自己不再漫无目的的追求点击量、访问量，回归到产出内容时，自己曾经认为点击量、访问量是一些虚无的东西，目的在于满足虚荣心。这么多年过去了，“自媒体”成了当下一个热词，圈子内的一些人逐渐将博客延伸到各个媒体平台，最典型的莫过于公众号，点击量、访问量却成了一个商业变现的手段和核心指标，同样的事情，以前人们称之为技术大佬，现在人们渐渐表现出了厌恶，多数人称之为“网红”，更有甚者称之为“恶心、骗人”。</p><p>当一件正常的事情变得不再正常，除了不可控的时代因素，更为可控的便是自己的认知。其实，产生这样的思考是经历了一系列心理变化的，认知也在跟随着变化，这个时间尺度也跨越了这几年。</p><p>刚开始建博客站的时候，主要是新鲜感驱使，经过一段时间后发现内容才是博客的核心，这个时候就把博客当作一个学习知识记录的地方。当走上工作岗位，在不断完成业务的过程中，又体会到纯粹的技术是毫无意义的，技术本质上还是要解决一定问题的，而同样的技术或者知识在一定场景下的应用所积累的经验是非常宝贵的，这个其实是很难通过捷径学习的，主要还是依靠自己的实践。所以，到了这个阶段，博客作为一个记录学习知识点的地方，还可以用来记录一些技术和知识在实际业务场景中的应用案例或者落地实践过程。</p><p>其次，在不断地学习过程中，每每看到别人博客中一些文章来剖析一些技术或者知识深层次原理和本质的内容时觉得自己总是欠缺一些什么。经过思考，发现很多时候学习的知识偏向于应用层、比较浅显易懂，而如何给自己建立一个知识体系，怎么才能对一个东西“举一反三”，对于一个新的事物怎么利用现有的知识去推测、分析等等，这些能力才是让自己快速成长的关键。换句话说，博客的内容涉及应该更宽泛一些，日常生活中自己对于某些事物进行的深层次学习、分析，以及突然产生的灵感等等都应该记录下来，这些内容更有价值。</p><p>总的来说，写博客的初衷是基于内容为核心、以记录为目的，首要关注的是自己，对自己负责。这几年也偶尔会看看业内技术大牛的博客进行学习，从他们的博客站来看，唯一共有的特点便是没有花里胡哨的东西，突出内容。我想，这便是优秀的人对博客所持有的一种信念吧。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="博客还能干些什么">博客还能干些什么<a class="hash-link" href="#博客还能干些什么" title="标题的直接链接">​</a></h2><p>其实，博客站看似是一个很简单的文本网站，但其可利用的价值也有很多。</p><p>其一，便是记录。作为 IT 从业者很容易就把博客定位为技术博客，其实在自己想明白写博客的初衷之后，博文的内容便不再有局限性，更可能充当一个日常事情记录的地方。自己每年年终的时候都会回顾一下过去几年写的博客，在脑海里回忆一下曾经发生过的事情，这种时候对于文字的力量还是颇有感慨的。</p><p>其二，便是当作练兵场。由于是自己开发的博客站，所以很多时候可以利用其来验证一些学习到的新技术，进行技术实践。博客站建立初期，实际上是依赖了很多第三方资源的，在后期学习了 Web 资源优化的知识后，就会有意识的以博客站为案例进行实践。而且，这几年关注前端工程化方面的东西比较多，博客站项目的脚手架工具搭建也是一个极佳的实践机会。除此之外，对于一些类 React.js 的库/框架进行学习实践以重新实现整个博客站也是一直所计划和期望的事情，奈何比较忙和懒的关系一直被搁置了，相信这个后期还是值得一试的。</p><p>至此，写博客成为一种生活的习惯，希望自己能坚持下去，多年以后这些将成为自己珍贵的财富。</p>]]></content:encoded>
            <category>生活</category>
            <category>记录</category>
        </item>
        <item>
            <title><![CDATA[了解一些互联网名词]]></title>
            <link>https://wang1212.github.io/Business/business-noun</link>
            <guid>/Business/business-noun</guid>
            <pubDate>Sun, 13 Mar 2022 18:12:00 GMT</pubDate>
            <description><![CDATA[互联网时代创造了诸多名词，而这些与商业活动紧密相关，了解一下还是挺有趣的。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-03-27 01:04:00 </em></p></blockquote><p>互联网时代是个新概念频出的时代，每年有相当多的新名词诞生，而诸多与商业活动紧密相关的词汇了解一下有助于我们熟悉日常工作中接触的东西。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="互联网名词">互联网名词<a class="hash-link" href="#互联网名词" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="商业模式">商业模式<a class="hash-link" href="#商业模式" title="标题的直接链接">​</a></h3><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="b2bbusiness-to-business">B2B（Business to Business）<a class="hash-link" href="#b2bbusiness-to-business" title="标题的直接链接">​</a></h4><p>传统的电子商务商业模式，供需双方都是商家（或企业、公司）。代表性企业如阿里巴巴、聪慧网等。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="b2cbusiness-to-consumer">B2C（Business to Consumer）<a class="hash-link" href="#b2cbusiness-to-consumer" title="标题的直接链接">​</a></h4><p>一种直接面向消费者销售产品和服务的商业零售模式。代表性企业如京东商城、当当网、亚马逊网等。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="c2cconsumer-to-consumer">C2C（Consumer to Consumer）<a class="hash-link" href="#c2cconsumer-to-consumer" title="标题的直接链接">​</a></h4><p>个人与个人之间的电子商务。代表性平台如淘宝网、京东商城、闲鱼、拍拍网等。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="b2b2cbusiness-to-business-to-consumer">B2B2C（Business to Business to Consumer）<a class="hash-link" href="#b2b2cbusiness-to-business-to-consumer" title="标题的直接链接">​</a></h4><p>第一个 B 是指商品或服务的供应商，第二个 B 是指商家，C 是指消费者。它是一种通过构建自己的物流供应链系统来提供统一的服务的商业模式，其核心思想是把“供应商 → 生产商 → 经销商 → 消费者”中的各个产业链紧密连接在一起，提升核心竞争力。代表性企业如京东、淘宝天猫等。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="o2oonline-to-offline">O2O（Online To Offline）<a class="hash-link" href="#o2oonline-to-offline" title="标题的直接链接">​</a></h4><p>是指将线下的商务机会与互联网结合，线上营销线上购买带动线下经营和线下消费的一种商业模式，例如线上团购，到店消费。代表性平台如携程、猫眼电影、美团等。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="c2bcustomer-to-business">C2B（Customer to Business）<a class="hash-link" href="#c2bcustomer-to-business" title="标题的直接链接">​</a></h4><p>一种新型的电子商务模式，是指先有消费者提出需求，然后生产企业按需求组织生产的商业模式，例如团购、商品预售。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="b2fbusiness-to-family">B2F（Business To Family）<a class="hash-link" href="#b2fbusiness-to-family" title="标题的直接链接">​</a></h4><p>企业以家庭为单位对其消费进行营销和引导的商业模式。代表性平台如京东到家、58 到家等。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="b2mbusiness-to-marketing">B2M（Business to Marketing）<a class="hash-link" href="#b2mbusiness-to-marketing" title="标题的直接链接">​</a></h4><p>指面向市场营销的电子商务企业，电子商务公司根据客户需求为核心而建立起的营销型站点，并通过线上和线下多种渠道对站点进行广泛的推广和规范化的导购管理，从而使得站点作为企业的重要营销渠道。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="m2cmanufacturers-to-consumer">M2C（Manufacturers to Consumer）<a class="hash-link" href="#m2cmanufacturers-to-consumer" title="标题的直接链接">​</a></h4><p>是指生产厂家直接对消费者提供自己生产的产品或服务的一种商业模式，特点是流通环节减少至一对一，销售成本降低，从而保障了产品品质和售后服务质量。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="c2mcustomer-to-manufacturer">C2M（Customer to Manufacturer）<a class="hash-link" href="#c2mcustomer-to-manufacturer" title="标题的直接链接">​</a></h4><p>新型的工业互联网电子商务模式，是指一种按照客户的产品订单要求，设定供应商和生产工序，最终生产出个性化产品的商业模式，又被称为“短路经济”。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="p2cproduction-to-consumer">P2C（Production to Consumer）<a class="hash-link" href="#p2cproduction-to-consumer" title="标题的直接链接">​</a></h4><p>是指整合日常生活中的服务资源，如房产、餐饮、交友、家政服务、票务等，实现服务业的电商化的商业模式，例如许多生活服务平台就是采用这种模式。代表性平台如 58 同城。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="云服务模式">云服务模式<a class="hash-link" href="#云服务模式" title="标题的直接链接">​</a></h4><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="iaasinfrastructure-as-a-service">IaaS（Infrastructure-as-a-Service）<a class="hash-link" href="#iaasinfrastructure-as-a-service" title="标题的直接链接">​</a></h5><p>基础设施即服务，云服务商将一些 IT 基础设施作为服务通过网络对外提供，主要是一些底层相关的硬件资源，比如服务器、数据中心、存储等。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="paasplatform-as-a-service">PaaS（Platform-as-a-Service）<a class="hash-link" href="#paasplatform-as-a-service" title="标题的直接链接">​</a></h5><p>平台即服务，云服务商把服务器平台作为一种服务通过网络对外提供，在 IaaS 的基础之上，再包含预配置的操作系统环境、软件开发平台、软件部署环境等进行交付。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="saassoftware-as-a-service">SaaS（Software-as-a-Service）<a class="hash-link" href="#saassoftware-as-a-service" title="标题的直接链接">​</a></h5><p>软件即服务，云服务商将特定的软件作为一种服务通过网络对外提供，在 PaaS 的基础之上，再包含特定的软件应用进行交付。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="媒体内容">媒体内容<a class="hash-link" href="#媒体内容" title="标题的直接链接">​</a></h3><p>媒体类型相关。</p><ul><li>门户网站（Portal Web），综合信息服务提供。</li><li>垂直门户（Vertical Portal），细分领域信息服务提供。</li><li>新媒体（New Media），基于数字互联网的新形态媒体。</li><li>自媒体（We Media），由个体提供信息服务的一种新媒体形式。</li><li>社交媒体（Social Media），基于社会公共关系的一种新媒体形式。</li></ul><p>媒介工具相关。</p><ul><li>SNS（Social Network Sites），社交网站。</li><li>IM（Instant Messaging），即时通讯。</li><li>TMT（Technology，Media，Telecom），科技、媒体、通信融合，数字新媒体产业。</li></ul><p>内容生产相关。</p><ul><li>UGC（User-generated Content），用户生产内容</li><li>PGC（Professionally-generated Content），专业生产内容</li><li>OGC（Occupationally-generated Content），职业生产内容</li><li>KOL（Key Opinion Leader），关键意见领袖</li></ul><p>内容运营相关。</p><ul><li>MCN（Multi-Channel Network），网红孵化</li><li>IP（Intellectual Property），知识产权</li><li>CP（Content Provider），内容提供商</li><li>ACG（Animation、Comic、Game），二次元文化</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="运营">运营<a class="hash-link" href="#运营" title="标题的直接链接">​</a></h3><p>用户流量统计相关。</p><ul><li>IP（Internet Protocols），独立 IP。</li><li>PV（Page View），页面浏览量。</li><li>UV（Unique Visitors），独立访客。</li></ul><p>衡量用户活跃度相关。</p><ul><li>PCU（Peak Concurrent Users），最高同时在线用户人数。</li><li>ACU（Average Concurrent Users），平均同时在线用户人数。</li><li>DAU（Daily Active User），日活跃用户量。</li><li>MAU（Month Active User），月活跃用户量。</li></ul><p>衡量用户粘性相关。</p><ul><li>RV（Repeat Visitors），重复访客。</li><li>TP（Time On Page），页面停留时长。</li></ul><p>流量渠道统计相关。</p><ul><li>TS（Traffic Sources），流量来源。</li></ul><p>衡量运营效率相关。</p><ul><li>ROI（Return On Investment），投资回报率。</li><li>GMV（Gross Merchandise Volume），商品交易总额（一定时间段内）。</li><li>ARPU（Average Revenue Per User），每用户平均收入。</li><li>ARPPU（Average Revenue per Paying User），每付费用户平均收益。</li><li>PUR（Pay User Rate），付费用户率。</li><li>LTV（Lift Time Value），客户终生价值。</li><li>SPU（Standard Product Unit），标准产品单位。</li><li>SKU（Stock Keeping Unit），库存量单位。</li><li>RR（Retention Rate），留存率，一段时间内，再次使用应用的用户比例。</li><li>CR（Conversion Rate），转化率，是指访问某一网站访客中，转化的访客占全部访客的比例。</li></ul><p>运营方式相关。</p><ul><li>AARRR 模型<ul><li>获取用户（Acquisition）</li><li>提高活跃度（Activation）</li><li>提高留存率（Retention）</li><li>获取收入（Revenue）</li><li>自传播（Refer）</li></ul></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="营销广告">营销广告<a class="hash-link" href="#营销广告" title="标题的直接链接">​</a></h3><ul><li>SEO（Search Engine Optimization），搜索引擎优化。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="产品">产品<a class="hash-link" href="#产品" title="标题的直接链接">​</a></h3><ul><li>UI（User Interface），用户界面。</li><li>UE（User Experience），用户体验。</li></ul><p>产品设计相关。</p><ul><li>BRD（Business Requirement Document），商业需求文档。</li><li>MRD（Market Requirement Document），市场需求文档。</li><li>PRD（Product Requirement Document），产品需求文档。</li><li>FSD（Functional Specifications Document），功能设计文档。</li><li>流程图（Flow Chart），核心业务流程图形。</li><li>原型图（Prototype），产品框架设计。</li></ul><p>产品发布相关。</p><ul><li>AB 测试</li><li>灰度发布</li></ul><p>其它。</p><ul><li>FAQ（Frequently Asked Questions），常见问题解答。</li><li>MVP（Minimum Viable Product），最简化可实行产品。</li><li>PLC（Product Life Cycle），产品生命周期。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="职业">职业<a class="hash-link" href="#职业" title="标题的直接链接">​</a></h3><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="产品岗">产品岗<a class="hash-link" href="#产品岗" title="标题的直接链接">​</a></h4><ul><li>PM（Product Manager），产品经理<ul><li>MRD（Market Requirements Document），市场需求文档，侧重产品立项时的前期调研分析。</li><li>PRD（Product Requirement Document），产品需求文档，侧重产品具体功能设计。</li></ul></li></ul><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="设计岗">设计岗<a class="hash-link" href="#设计岗" title="标题的直接链接">​</a></h4><ul><li>UI Design（User Interface Design），用户界面设计</li><li>UX Design（User Experience Design），用户体验设计</li><li>IxD（Interaction Design），交互设计</li><li>ID（Industrial Design），工业设计</li></ul><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="研发岗">研发岗<a class="hash-link" href="#研发岗" title="标题的直接链接">​</a></h4><ul><li>RD（Research &amp; Design Engineer），研发工程师</li><li>FE（Front End），前端研发工程师</li></ul><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="测试岗">测试岗<a class="hash-link" href="#测试岗" title="标题的直接链接">​</a></h4><ul><li>QA（Quality Assurance），质量保证工程师，即测试工程师</li></ul><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="运维岗">运维岗<a class="hash-link" href="#运维岗" title="标题的直接链接">​</a></h4><ul><li>SA（System Admin），侧重于基础设施建设</li><li>OP（Operator），侧重于各个业务线的服务部署、运行、维护</li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li><a href="http://www.woshipm.com/zhichang/1743064.html" target="_blank" rel="noopener noreferrer">http://www.woshipm.com/zhichang/1743064.html</a></li><li><a href="https://wenku.baidu.com/view/4ebe697dce7931b765ce0508763231126fdb7762.html" target="_blank" rel="noopener noreferrer">https://wenku.baidu.com/view/4ebe697dce7931b765ce0508763231126fdb7762.html</a></li><li><a href="https://wenku.baidu.com/view/6df81e405727a5e9846a6136.html" target="_blank" rel="noopener noreferrer">https://wenku.baidu.com/view/6df81e405727a5e9846a6136.html</a></li><li><a href="https://www.sohu.com/a/409413815_116126" target="_blank" rel="noopener noreferrer">https://www.sohu.com/a/409413815_116126</a></li></ul>]]></content:encoded>
            <category>商业</category>
            <category>互联网名词</category>
        </item>
        <item>
            <title><![CDATA[财务与会计中的一些常用概念]]></title>
            <link>https://wang1212.github.io/Finance-Economics/financial-accounting-concept</link>
            <guid>/Finance-Economics/financial-accounting-concept</guid>
            <pubDate>Mon, 21 Feb 2022 23:43:00 GMT</pubDate>
            <description><![CDATA[一些在生活中应该了解的财务与会计常用概念。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-02-21 23:43:00 </em></p></blockquote><p>一些在生活中应该了解的财务与会计常用概念。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="财务与会计">财务与会计<a class="hash-link" href="#财务与会计" title="标题的直接链接">​</a></h2><p>如果说金融与经济与我们的生活密切相关，那么财务与会计则与我们的工作息息相关，一些生活中应该了解的常用概念可以帮助我们更好的分析企业经营活动。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="会计恒等式">会计恒等式<a class="hash-link" href="#会计恒等式" title="标题的直接链接">​</a></h3><p>最基础的一个概念就是<a href="https://wiki.mbalib.com/wiki/%E4%BC%9A%E8%AE%A1%E7%AD%89%E5%BC%8F" target="_blank" rel="noopener noreferrer">会计恒等式</a>（亦称会计方程、会计平衡公式）：</p><ul><li>资产＝负债＋所有者权益</li><li>收入－费用＝利润</li><li>资产＋（收入－费用）＝负债＋所有者权益＋利润（分配前）</li></ul><p>资本的运动采取了两种的形态：<strong>相对静止状态</strong>和<strong>显著变动状态</strong>。</p><p>财务状况等式，亦称<strong>基本会计等式和静态会计等式</strong>，是用以反映企业某一特定时点资产、负债和所有者权益三者之间平衡关系的会计等式。即：资产＝负债＋所有者权益。这一等式是复式记账法的理论基础，也是编制<strong>资产负债表</strong>的依据。</p><p>经营成果等式，亦称<strong>动态会计等式</strong>，是用以反映企业一定时期收入、费用和利润之间恒等关系的会计等式。即：收入－费用＝利润。这一等式反映了利润的实现过程，是资金运动的动态状况，是编制<strong>利润表</strong>的依据。利润最终增加了所有者的权益。</p><p>财务状况与经营成果相结合的等式。<strong>资本运动的静态与动态是一种辩证的统一。</strong>资产、负债、所有者权益、收入、费用和利润的数量关系存在着一种内在有机的联系，即可以综合。它们的综合反映是：资产＋（收入－费用）＝负债＋所有者权益＋利润（分配前）。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li><a href="https://wiki.mbalib.com/wiki/" target="_blank" rel="noopener noreferrer">MBA 智库·百科</a></li></ul>]]></content:encoded>
            <category>财务与会计</category>
        </item>
        <item>
            <title><![CDATA[TypeScript：扩展第三方库的类型定义]]></title>
            <link>https://wang1212.github.io/Computer-Technology/TypeScript/tools-typescript-type-extend</link>
            <guid>/Computer-Technology/TypeScript/tools-typescript-type-extend</guid>
            <pubDate>Sun, 09 Jan 2022 17:36:00 GMT</pubDate>
            <description><![CDATA[TypeScript 作为 JavaScript 的超集，为 Web 开发带来了强类型语言和类似代码智能提示这种良好的开发体验，如何对第三方依赖库的类型定义进行扩展呢？]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-01-09 17:36:00 </em></p></blockquote><p>TypeScript 作为 JavaScript 的超集，为 Web 开发带来了强类型语言和类似代码智能提示这种良好的开发体验，而代码提示依赖于类型定义文件。类型定义文件的发展也经历了一个逐步演变的过程，从最初基于 JavaScript 编写的 npm 包，通过<a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="noopener noreferrer">社区方案</a>来引入类型定义包，再到目前多数模块基于 TypeScript 编写并在发布时带上类型定义文件这种最佳方案，开发者体验得到进一步的提升。</p><p>不过，在使用类型定义文件的过程中我们通常需要和类型定义进行交互，大多数场景可以通过泛型来解决；而有一个典型场景就是需要我们扩展第三方库的类型定义，避免在多个文件中编码时都要引入类型定义的麻烦。可能不是很好理解，在这里通过一个实际的例子就可以解释清楚。</p><p>使用 <code>koa2</code> 框架进行 Node 应用开发时，为了利用 TypeScript 带来的优势，需要引入类型定义，而该框架本身是用 JavaScript 编写的，不过可以通过安装社区提供的 <code>@types/koa</code> 包来获得支持。<code>koa2</code> 框架可以通过扩展 <code>context</code> 对象来引入一些工具，最典型的就是日志管理，这里使用 <code>koa-log4</code>，在 <code>context</code> 上挂载一个 <code>logger</code> 属性引用日志打印器实例，可以通过泛型的方式扩展应用实例上下文对象的定义，但在多个文件中就显的比较麻烦了，<strong>开发体验最好且最自然的方式就是直接一次扩展 <code>koa2</code> 的 <code>context</code> 类型定义，后续在多个文件中不用使用泛型即可自动获得代码提示。</strong></p><p>这里直接给出最终代码：</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// src/@types/index.d.ts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> log4js </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'koa-log4'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">declare</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">module</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'koa'</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token class-name">DefaultContext</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    logger</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> log4js</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Logger</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>起初，我认为 TypeScript 官方会对这种典型的场景给出明确的方案文档，但找了很久没找到，就去 Google，在 StackOverflow 上发现有人提及类似以上的方案，经过实验确实解决了问题。但是，我一般会找到明确的官方文档记录一下，以备后续参考，也是秉行尽量不 Hack 以官方且优雅的方式解决问题的原则，经过非常仔细的查找之后，确实在官方文档中找到了，但非常分散。</p><p>至此，就比较完美的解决了这个问题。而这个问题也是很久之前就解决的，回过头来发现记录下来会更好一些。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考资源">参考资源<a class="hash-link" href="#参考资源" title="标题的直接链接">​</a></h2><ul><li><a href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation" target="_blank" rel="noopener noreferrer">https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/declaration-files/templates/module-d-ts.html#testing-your-types" target="_blank" rel="noopener noreferrer">https://www.typescriptlang.org/docs/handbook/declaration-files/templates/module-d-ts.html#testing-your-types</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/declaration-files/templates/module-plugin-d-ts.html" target="_blank" rel="noopener noreferrer">https://www.typescriptlang.org/docs/handbook/declaration-files/templates/module-plugin-d-ts.html</a></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>工具</category>
            <category>TypeScript</category>
            <category>类型定义</category>
        </item>
        <item>
            <title><![CDATA[解析基于 core-js 与 ESLint 的 Web 兼容方案]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/tools-web-fee-polyfill-corejs-eslint</link>
            <guid>/Computer-Technology/Web/tools-web-fee-polyfill-corejs-eslint</guid>
            <pubDate>Tue, 07 Dec 2021 01:13:00 GMT</pubDate>
            <description><![CDATA[Web 网页为了保证在多个平台和低中高端设备上的体验稳定性和一致性，通常会做 Polyfill 以保证兼容性，当下社区的主流方案则是基于 core-js，而 ESLint 则可作为自动检测的辅助工具。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2021-12-08 21:12:00 </em></p></blockquote><p>Web 网页为了保证在多个平台和低中高端设备上的体验稳定性和一致性，通常会做 Polyfill 以保证兼容性。</p><p>然而，兼容性问题本身是个难题，Polyfill 也并非很好处理，所以在技术演变的过程中，社区达成了一致，有一个主流的方案，大家共同来使用和维护。当下社区的主流方案则是基于 <code>core-js</code>，另一方面， 利用 ESLint 插件则可以做到自动检测代码中需要添加 Polyfill 的 API。</p><p><code>core-js</code> 只是解决了 JavaScript 的兼容性问题，Web 网页还有 CSS / HTML / Web API 的兼容性问题，处理这些问题的过程中，必然会存在大量相似的逻辑，比如目标设备的检测、目标设备的 API 支持情况统计。当然，社区也给出了非常好的方案，下面就来了解一下。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="基于-core-js-的兼容方案">基于 <code>core-js</code> 的兼容方案<a class="hash-link" href="#基于-core-js-的兼容方案" title="标题的直接链接">​</a></h2><p>首先，来看看这两者如何进行配合以非常优雅的方式完成 Polyfill 任务的。</p><p><code>core-js</code> 是实现了遵循 ECMAScript 标准的模块化标准库，也就是说，主要是实现 JavaScript 的 API，这并不包括浏览器平台的 Web API（例如一些 DOM API、<code>fetch</code> 等）。用起来也很简单，直接在项目中引入即可：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// polyfill all `core-js` features:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'core-js'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// polyfill only stable `core-js` features - ES and web standards:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'core-js/stable'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// polyfill only stable ES features:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'core-js/es'</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面是将所有 API 的 polyfills 引入项目，为了构建包尺寸更小，可以选择性的对特定 API 做兼容：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'core-js/modules/es.array.unscopables.flat'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'core-js/modules/es.array.unscopables.flat-map'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'core-js/modules/es.object.from-entries'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'core-js/modules/web.immediate'</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这些方式引入的 polyfill 会污染全局作用域，开发 Web 应用项目时也许不存在太大问题，但若是开发第三方工具库，为了避免这个问题，官方提供了 <code>core-js-pure</code> 包：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token known-class-name class-name">Set</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'core-js-pure/features/set'</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>虽然说 <code>core-js</code> 只是针对 JavaScript API 的兼容方案，但为了方便，也提供了一些非常常用的 Web API 的 polyfills，例如 <code>setTimeout</code>、<code>URLSearchParams</code> 等。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="api-兼容性">API 兼容性<a class="hash-link" href="#api-兼容性" title="标题的直接链接">​</a></h3><p>怎么为 API 做兼容的问题解决掉之后，需要考虑的一个问题是怎么判断 API 的兼容性，首先在 <a href="https://developer.mozilla.org/" target="_blank" rel="noopener noreferrer">MDN Web Docs</a> 特定 API 文档页面最下方会有一个兼容性统计表格，这个是比较准确和全面的。当然，如果要最准确的结果，可以去特定浏览器厂商的标准状态页面查询，例如 <a href="https://www.chromestatus.com/features" target="_blank" rel="noopener noreferrer">Chrome Platform Status</a> 等。</p><p>除此之外，为了让社区各种工具链自动化去检测 API 兼容情况，有非常著名的 <a href="https://caniuse.com/" target="_blank" rel="noopener noreferrer">Can I use</a> 站点。该站点方便开发者查询各种 JavaScript / CSS / HTML / Web API 的设备兼容情况，同时维护了一个数据库，供社区其它工具开发者使用。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="兼容目标">兼容目标<a class="hash-link" href="#兼容目标" title="标题的直接链接">​</a></h3><p>有了检测 API 兼容情况和添加 polyfill 的工具后，还有一个很关键的问题：为了加载性能的优化，如果我们不引入全量的 polyfills，怎么针对特定平台去拣选相应的 polyfills？API 兼容检测工具的目标平台是什么？特定 API 是否需要添加 polyfills？</p><p>当然，为了保证社区各种工具链的通用性，也有一个很著名的项目 <code>Browserslist</code>，它可以帮助我们配置代码兼容的目标平台，相应的工具链将会以该目标处理我们所写的代码。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="eslint">ESLint<a class="hash-link" href="#eslint" title="标题的直接链接">​</a></h3><p>有了以上工具后，我们需要一个解析代码并运行这些工具的工具，ESLint 恰好适合这个角色。<code>eslint-plugin-compat</code> 插件可以根据 browserslist 的配置去查询所写代码中需要兼容的 API 并提示出来：</p><blockquote><p>eslint-plugin-compat（解析代码）-&gt; 用解析的代码和 browserslist 配置根据标准查询（MDN/Can I use 等）代码中的兼容情况 -&gt; 开发者手动引入 polyfills</p></blockquote><p>我们可以注意到，该插件仅仅是帮我们检测出来代码中需要引入 polyfills 的 API，最终还是需要开发者手动引入 polyfills，这是比较麻烦的。当然，ESLint 干了自己该干的，剩下的事情交给 Babel 即可。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="babel">Babel<a class="hash-link" href="#babel" title="标题的直接链接">​</a></h3><p>说到 Polyfill，还得再提一下社区主流的 JavaScript 编译方案 Babel，为什么呢？因为一开始，Babel 团队同时非常贴心的提供了 Polyfill 方案 <code>@babel/polyfill</code>。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="babelpolyfill"><code>@babel/polyfill</code><a class="hash-link" href="#babelpolyfill" title="标题的直接链接">​</a></h4><p>如果看过源码，或者看过目前的文档，其实 @babel/polyfill 做的事情等价于：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// see docs: https://babeljs.io/docs/en/babel-polyfill/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'core-js/stable'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'regenerator-runtime/runtime'</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当然，现在（Babel 7.4.0+）这个方案已经被官方弃用了，这又是为什么呢？其实看上面的代码也能猜出个大概，这种方案不够灵活，把需要和不需要的 polyfills 全部添加到项目代码中，不利于加载性能优化；其次，对于开发者来说是个黑盒子，开发者不清楚干了哪些事，干到了什么程度，不受开发者控制。文档中也有所提及：</p><blockquote><p>Note: Depending on what ES2015 methods you actually use, you may not need to use <code>@babel/polyfill</code> or the runtime plugin. You may want to only <a href="https://github.com/zloirock/core-js#commonjs-api" target="_blank" rel="noopener noreferrer">load the specific polyfills you are using</a> (like <code>Object.assign</code>) or just document that the environment the library is being loaded in should include certain polyfills.</p></blockquote><p>其实意思很简单，就是把 polyfill 的控制权交给了开发者。与此同时，Babel 又给出了另一个方案 <code>@babel/preset-env</code>。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="babelpreset-env"><code>@babel/preset-env</code><a class="hash-link" href="#babelpreset-env" title="标题的直接链接">​</a></h4><p>该方案主要解决了 @babel/polyfill 方案不够灵活的问题，提供了两种选择：即 <code>useBuiltIns</code> 配置项的 <code>usage</code> 和 <code>entry</code>。</p><ul><li><code>entry</code> 模式</li></ul><blockquote><p>This option enables a new plugin that replaces the <code>import "core-js/stable";</code> and <code>import "regenerator-runtime/runtime"</code> statements (or <code>require("core-js")</code> and <code>require("regenerator-runtime/runtime")</code>) with individual requires to different <code>core-js</code> entry points based on environment.</p></blockquote><p>该模式需要开发者在入口文件显式引入 <code>core-js</code>，然后 Babel 会根据配置的兼容目标环境精细化拣选需要的 polyfills 引入，达到减小最终构建包体积的目的。这里是以所有的 polyfills 和兼容目标环境为基础进行过滤，过滤掉目标环境已支持 API 的 polyfills，也就是说最终还是会引入项目代码没有用到的 API 的 polyfills。</p><ul><li><code>usage</code> 模式</li></ul><blockquote><p>Adds specific imports for polyfills when they are used in each file. We take advantage of the fact that a bundler will load the same polyfill only once.</p></blockquote><p>而这种模式就解决了上面的问题，在以上模式过滤掉的结果中，再以项目代码为基础，过滤掉没有用到的 API 的 polyfills，这样最终的构建包体积会进一步减小。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>至此，我们了解到基于 <code>core-js</code> 的兼容方案是通过一系列优秀的社区开源项目共同配合完成的，借助 Babel 的工具可以自动化完成大部分的兼容工作，而借助 ESLint 的插件工具可以显式知道哪些 API 需要引入 Polyfill 来做兼容。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考资源">参考资源<a class="hash-link" href="#参考资源" title="标题的直接链接">​</a></h2><ul><li><a href="https://github.com/zloirock/core-js" target="_blank" rel="noopener noreferrer">https://github.com/zloirock/core-js</a></li><li><a href="https://developer.mozilla.org/" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/</a></li><li><a href="https://caniuse.com/" target="_blank" rel="noopener noreferrer">https://caniuse.com/</a></li><li><a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener noreferrer">https://github.com/browserslist/browserslist</a></li><li><a href="https://browserslist.dev/" target="_blank" rel="noopener noreferrer">https://browserslist.dev/</a></li><li><a href="https://eslint.org/" target="_blank" rel="noopener noreferrer">https://eslint.org/</a></li><li><a href="https://github.com/amilajack/eslint-plugin-compat" target="_blank" rel="noopener noreferrer">https://github.com/amilajack/eslint-plugin-compat</a></li><li><a href="https://babeljs.io/" target="_blank" rel="noopener noreferrer">https://babeljs.io/</a></li><li><a href="https://babeljs.io/docs/en/babel-polyfill/" target="_blank" rel="noopener noreferrer">https://babeljs.io/docs/en/babel-polyfill/</a></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>工具</category>
            <category>Web</category>
            <category>Polyfill</category>
        </item>
        <item>
            <title><![CDATA[UNIX传奇：历史与回忆]]></title>
            <link>https://wang1212.github.io/2021/12/05/Life/reading/reading-</link>
            <guid>/2021/12/05/Life/reading/reading-</guid>
            <pubDate>Sun, 05 Dec 2021 16:47:00 GMT</pubDate>
            <description><![CDATA[有幸通过该书了解 UNIX 诞生的历史和一些故事，略有枯燥，却不乏精彩之处。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2021-12-05 16:47:00 </em></p></blockquote><p>对于经常看纯技术书籍的人来说，难免会感觉到烦闷，阅读纯技术书籍的过程通常是非常消耗人的，不像看小说，是一个享受和放松的过程。所以，借此机会，找到一本与技术相关但并非纯粹的技术教程类书，讲解了 UNIX 诞生的历史和之后发展壮大的过程，虽然相比于小说还是略有枯燥，但其中也不乏精彩之处，对于一个技术研发成果，从多个角度阐述和讨论，也会让作为从事技术开发工作的人来说有一定的启发。</p><p>为什么会选择看这一本书呢？大概是因为后续也想多了解一下 Linux 操作系统相关的东西，了解一种技术的发展历程和出现的原因，比了解技术本身可能更能获益。其次，本书的作者是与 UNIX 诞生和发展过程中紧密相关的人物，所以该书阐述的很多事情具有一定的真实性和现实性。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unix">UNIX<a class="hash-link" href="#unix" title="标题的直接链接">​</a></h2><p>Linux 作为现今互联网世界的主流服务器操作系统，其本质上是一个类 Unix 系统，而苹果公司的 MacOS 底层实际上也基于 Unix。同时，贝尔实验室因其强大的技术创新能力也为互联网界所熟知，而 Unix 就是在这里诞生的。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="贝尔实验室">贝尔实验室<a class="hash-link" href="#贝尔实验室" title="标题的直接链接">​</a></h3><p>要了解 Unix 是如何产生的，得先了解贝尔实验室，尤其是其运作机理，以及它提供的创意环境。</p><p>贝尔实验室起初是 AT&amp;T（即美国电话电报公司，American Telephone and Telegraph Company）的一个研究机构，主要目的是系统解决在建设全国电话系统时遇到的科学和工程难题。</p><blockquote><p>贝尔实验室的早期研究涉及物理、化学、材料学和通信系统。研究员们有追随兴趣的自由，相关问题的环境资源也非常丰富，若想探索既满足科学兴趣又能有益于贝尔系统（Bell System）乃至全世界的领域，并非难事。</p></blockquote><p>贝尔实验室很多的技术研究成果改变了世界，最先出现的就是晶体管，是半导体行业技术发展的里程碑。由于 AT&amp;T 从事的行业具有垄断性质，所以企业营收有所保障，而管理层的眼光也很长远，虽然被政府限制不能涉及通信行业以外的生意，但仍然为贝尔实验室提供高额的研发资金，这也为后来实验室招揽各行各业的人才提供了保证，进而才有后来实验室成员屡获诺贝尔奖的结果。</p><blockquote><p>持续的资金投入是研究工作的关键保障。这意味着 AT&amp;T 能布局长远，贝尔实验室的研究员们也能自由探索那些未必有短期回报，甚至可能永无回报的领域。现今世界已全然不同，多数人只做未来几个月的规划，功夫都花在了预测下一季度财务状况上。</p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unix-诞生">Unix 诞生<a class="hash-link" href="#unix-诞生" title="标题的直接链接">​</a></h3><p>Unix 并不是世界上第一个操作系统，其开发者也是基于使用和开发其它操作系统丰富的经验才开发出了 Unix，进而不断的完善。但是，为什么要开发一个新的操作系统呢？</p><blockquote><p>更加麻烦的是，操作系统用汇编语言写成。汇编语言是人能读懂的机器指令，与特定类型硬件的指令集紧密相关。每种计算机都有自己的汇编语言，所以操作系统是庞大且复杂的汇编语言程序，每个操作系统都针对特定硬件、使用特定语言编写。</p></blockquote><blockquote><p>系统之间缺乏共通性，使用相互不兼容的低级语言，导致同时需要多个版本的程序：为某一操作系统编写的程序，在移植到其他操作系统或硬件架构上时，必须完全重写。这种状况阻碍了进步。如后文所述，Unix 操作系统在所有类型的硬件上都保持一致，而且用较高级的语言写成，只需付出相对较少的成本，即可从一种计算机移植到另一种计算机。</p></blockquote><p>可以说，Unix 的出现是操作系统发展历史上具有里程碑式的意义的事件，其为后来的发展指明了方向。Unix 的核心开发者肯·汤普森最先是一名操作系统开发者，在其所在的项目结束后，毅然决定继续开发操作系统，而且是在没有公司支持的情况下，然而就是在这样困难的环境下，最终完成了 Unix 初始版本开发，并在实验室内部进行推广。</p><p>1969 年，Unix 还只是个雏形，到了 1971 年，Unix 才发布了初版，在实验室内处理文档相关的工作。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unix-第-6-版">Unix 第 6 版<a class="hash-link" href="#unix-第-6-版" title="标题的直接链接">​</a></h3><blockquote><p>按照手册上的日期，第 1 版 Unix 在 1971 年底开始运行。在接下来的几年里，大约每半年就会有一版新手册问世，每次都会增加重要的新功能、新工具和新语言的相关内容。第 6 版 Unix，其手册发布于 1975 年 5 月，首次拓展到贝尔实验室以外。它对世界产生了重大影响。</p></blockquote><p>1973 年 Unix 的两位核心开发者丹尼斯·里奇和肯·汤普森联名发布论文，向世界公开描述 Unix 是什么东西，可以做什么，有什么优势。而这也是 Unix 逐渐成熟，可以向外进行传播和推广的时刻了。对于 Unix 提供的几个非常有用的特性和工具，也一直延续至今：</p><blockquote><p>文件系统、系统调用、shell、管道、grep 命令、正则表达式、C 语言等等。</p></blockquote><p>其中，文件系统相关最伟大的构想则是莫过于将各种文件和设备统一简单的抽象为字节序列，将不同格式的文件处理程序从操作系统剥离，交给特定的应用软件来处理。</p><p>Unix 诸多好用的功能，在开发过程中，并不是由开发者凭空想象出来的，而是通过和其它人交流，借鉴其它人的经验，当然也包括从事非开发工作的人，在这样一种开放的沟通环境中被创造出来的。Unix 的核心思想就是简化一切复杂的东西，屏蔽硬件层面的区别，给应用程序开发者和用户更好的体验和更低的门槛。Unix 提出的许多优秀思想现如今在各种软件工程中都有所体现。</p><blockquote><p>今天的读者可能很难体会到这一切是做了多大简化之后的结果。早期操作系统中，真实设备的所有复杂情况都会反馈给用户。用户必须知道磁盘名称，了解磁盘的物理结构，如有多少柱面和磁道，以及数据是如何安放在上面。</p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unix-第-7-版">Unix 第 7 版<a class="hash-link" href="#unix-第-7-版" title="标题的直接链接">​</a></h3><blockquote><p>“正是从第 7 版开始，系统才逐渐成熟，走出了象牙塔。第 7 版是第一个可移植版本，Unix 从此核爆炸般地移植到了无数类型硬件上。因此，第 7 版的历史是所有 Unix 系统共同传承的一部分。”——道格·麦基尔罗伊，《科研版 Unix 读本》（A Research Unix Reader: Annotated Excerptsfrom the Programmer’s Manual<!-- -->[1]<!-- -->），1986 年</p></blockquote><p>此时，距离第 6 版发布已经过了 4 年，1979 年 Unix 的发展达到了高潮。如果说，第 6 版的 Unix 已经准备好了操作系统的核心，那么第 7 版所带来的各种应用工具，事实上进一步推动了操作系统的发展，尤其是编程语言的发展。</p><p>第 7 版中出现了我们至今还在使用的主流 shell，即 Bash（Bourne Again Shell），其前身为史蒂夫·伯恩开发的 sh。最重要的则是出现了基于语言的工具 Yacc、Lex、Make，这些工具大大降低了编程语言的开发难度，由此开始，新的编程语言犹如雨后春笋般的出现，蓬勃发展至今。</p><p>这个时候，已经有多位实验室成员加入了 Unix 的开发队列，为其开发了诸多工具程序。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unix-的传播">Unix 的传播<a class="hash-link" href="#unix-的传播" title="标题的直接链接">​</a></h3><p>前面提到，两位 Unix 的核心开发者通过发表论文的方式向世界公开了 Unix 的存在，也许有很多极客玩家和搞学术研究的人会对其产生兴趣并进行实践，但一款产品最终的目标用户应该是更广泛的人群。</p><blockquote><p>“目前，全世界有 1400 所大学和学院使用 Unix 操作系统。它是 70 种计算机产品线的基础，范围涵盖从微型计算机到超级计算机。目前正在运行的 Unix 系统约有 10 万个，约有 100 家公司正在开发基于它的应用程序。”——R·L·马丁（R.L.Martin），Unix System Readings and Applications，卷 2，1984 年</p></blockquote><p>Unix 除了在实验室内部传播之外，在外部的主要传播途径则是“免费”许可给高校作为学术研究使用。</p><blockquote><p>然而，社区迅速发展，用户群体在世界各地涌现，并发生了重大技术革新，例如将系统移植到不同类型的硬件上，以及增加访问互联网的新机制。</p></blockquote><blockquote><p>加利福尼亚大学伯克利分校是最活跃的许可获得者之一，该校的一些研究生对系统做出了重大贡献，最终演化出伯克利软件发行版（Berkeley Software Distribution，BSD）。BSD 是由最初的科研版 Unix 演变而来的两个主要分支之一。</p></blockquote><blockquote><p>由于 AT&amp;T 根本不向 Unix 许可持有人提供任何支持（这个想法并非 Unix 本意），用户被迫联合起来互相帮助，最终推动召开定期会议，开展技术介绍、软件交流，当然还有社交活动。IBM 系统的 SHARE 用户组 1955 年就成立了，现在还很活跃。其他硬件厂商也有用户组。</p></blockquote><p>Unix 在通过高校传播的过程中发生很多意想不到的事情，让 Unix 名声大噪，形成了自发的技术社区，还有学校老师约翰·莱昂斯为源代码亲自写评注并教授给学生，这些奇妙的事情太多太多，最终让 Unix 在短短几年内就拥有了大量的用户。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="商业化">商业化<a class="hash-link" href="#商业化" title="标题的直接链接">​</a></h3><p>如果说贝尔实验室能成功的前提是 AT&amp;T 以长远的发展目光为其提供高额的研发经费，那么实验室的研究成果如何转化为商业价值则是一个重要的问题。此时，AT&amp;T 因为从事垄断行业，政府禁止其售卖 Unix 以避免和操作系统厂商产生竞争，同时又用通信的收入来进行补贴。</p><p>不幸的是，AT&amp;T 虽然采取了规避监管的措施，但仍然由于其从事的垄断行业而遭到攻击，进而最终妥协被拆分。由此，贝尔实验室此前稳定的研发经费支持也不复存在，开始走下坡路。</p><p>被拆分后，AT&amp;T 无力销售 Unix，这给了 Unix 系统实验室（Unix System Laboratories）的商业机会，而 USL 也紧抓机会开始了 Unix 的商业推广。在这个过程中，品牌或者说商标所有权问题也浮出水面，幸好早有准备，才不至于将事情搞得很麻烦。</p><p>纵然，Unix 的商业化进展并非非常成功，但其也为了操作系统的发展和社区带来了突出的贡献。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="派生物和遗产">派生物和遗产<a class="hash-link" href="#派生物和遗产" title="标题的直接链接">​</a></h3><blockquote><p>从第 7 版开始有两条发展线：一条来自伯克利，它以比尔·乔伊及其同事的工作为基础；另一条来自 AT&amp;T，因为 AT&amp;T 试图将 Unix 的专业知识和所有权做成一桩有利可图的生意。</p></blockquote><p>由于 AT&amp;T 早期没有给予 Unix 足够的重视，导致在代码所有权上吃了亏。</p><blockquote><p>在 20 世纪 80 年代后期，许多 Unix 系统的供应商使用 Unix 商标名称，并提供起码是源自贝尔实验室第 7 版系统的软件。然而，版本之间，尤其是 AT&amp;T 的 System V 和伯克利发行版之间，存在不兼容问题。所有各方都同意，急需制订一套共同标准。至于标准该是什么样子，当然没有统一意见。</p></blockquote><blockquote><p>AT&amp;T 和一些盟友成立了自己的团体 Unix 国际（Unix International），颁布标准，与开放软件基金会（Open Software Foundation）制订的标准对打，结果是出现了两个相互竞争的不同“开放”标准。POSIX（Portable Operating System Interface，可移植操作系统接口）标准和由 X/Open 管理的“单一 Unix 规范”（Single Unix Specification）诞生了。前者用于基本的库函数，后者为各个 Unix 版本的库、系统调用和大量常用命令（包括 shell、awk、ed 和 vi）规定了统一标准。</p></blockquote><p>最终，Unix 没有作为主流发展起来，而类 Unix 系统则层出不穷，逐渐占据了主流位置。一些 Unix 的核心开发团队成员开始将工作重心转移到了开发新的操作系统 Plan9 上，Plan 9 操作系统力图进一步完善 Unix。</p><blockquote><p>Plan 9 于 1992 年提供给高校使用，几年后公开发布，用于商业用途，但如今只有一小部分爱好者使用。主要原因可能是 Unix 和持续增长的 Linux 势头太猛，没有令人信服的理由让大多数人换系统。可能还有一个较小的原因：它过于特立独行。</p></blockquote><p>可以看到，一个研究成果推广的时机也非常重要。</p><p>后来，由于 AT&amp;T 进一步被拆分，贝尔实验室的人员已经流散到各处，有谷歌公司、高校等等。</p><p>Unix 虽然最终没有成为主流，但现有的主流操作例如 Linux 均是基于 Unix 或是受到 Unix 的启发而出现，在不断的发展过程中，Unix 所倡导的思想也一直延续至今。Unix 得到了很多人的认可和尊重，留下了珍贵的遗产，无论是团队管理、人才招聘还是技术研发等方面，都给我们提供了诸多可借鉴的经验。</p><blockquote><p>会不会有另一个 Unix？会不会有新操作系统横空出世，在几十年内占领世界？当我谈到 Unix 时，经常会被问到这样的问题。我的回答是不会，至少目前不会。不会有革命发生。更有可能的是，操作系统将继续发展，同时携带大量的 Unix DNA。</p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="书">书<a class="hash-link" href="#书" title="标题的直接链接">​</a></h2><ul><li>《UNIX 传奇：历史与回忆》- <!-- -->[美]<!-- --> Brian W. Kernighan 著，韩磊 译</li></ul>]]></content:encoded>
            <category>生活</category>
            <category>阅读</category>
            <category>计算机技术</category>
            <category>操作系统</category>
            <category>商业</category>
        </item>
        <item>
            <title><![CDATA[Web 前端调试工具：SourceMap 文件]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/tools-web-fee-debug-with-source-map</link>
            <guid>/Computer-Technology/Web/tools-web-fee-debug-with-source-map</guid>
            <pubDate>Sun, 28 Nov 2021 22:31:00 GMT</pubDate>
            <description><![CDATA[Web 前端项目在生产环境发布的代码是经过混淆和压缩的，如何调试则成为了一个难题，SourceMap 文件则是一个解决该问题时可以利用的很好的工具。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-05-07 21:57:00 </em></p></blockquote><p>Web 前端项目出于加载性能优化和安全考虑，在生产环境部署的代码是经过混淆和压缩的，对于利用生产环境收集到的错误堆栈信息要进行调试是非常具有挑战性的。理想情况下，应该在生产环境收集错误堆栈信息，然后映射到源码进行调试。恰好，<strong>SourceMap 文件</strong>提供了这个机制，可以将编译（压缩）后的代码映射到源代码中。</p><p>以下是其规范：</p><blockquote><p><a href="https://sourcemaps.info/spec.html" target="_blank" rel="noopener noreferrer">Source Map Revision 3 Proposal</a></p></blockquote><p>所以，利用 SourceMap 文件可以改善线上问题调试困难的现状。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="实际应用调试线上问题">实际应用：调试线上问题<a class="hash-link" href="#实际应用调试线上问题" title="标题的直接链接">​</a></h2><p>几个月前，新上线的项目接入 SkyWalking 日志后，出了一些兼容性问题，大部分问题根据客户反馈的交互流程基本可以猜到出问题的代码位置，尤其是可以使用测试机进行复现，在本地调试直接可以获知具体的错误栈信息。但其中有几个问题，由于客户的机型太小众，而且系统版本太旧，没有类似的测试机环境可以复现，只能根据线上收集到的错误日志和其中的栈信息定位错误。这看似是个很简单的问题，但实际上不好解决，因为线上日志的错误栈信息中对应的行列号是压缩和混淆后的代码，基本定位不到具体的源码位置。于是，一直在本地模拟用户的交互和测试数据，苦于无法复现，最终回过头来还是决定思考一下怎么根据栈信息定位错误。</p><p>当然，一个很明显的场景就是，本地使用 Webpack 这类构建工具进行开发时，代码本身在本地调试的过程中就已经进行了编译转换和合并，为了能在 Web 开发工具中定位到错误发生的源码位置，会生成 <strong>sourcemap</strong> 文件来解决这一问题。想到这里，调试线上问题的思路也基本明确了，那就是利用构建发布代码时生成的 <strong>sourcemap</strong> 文件配合获取的线上日志栈信息中行列号解析出源码的对应位置（文件，行列号）。此时，又出现了两个问题，第一个问题是原来的构建发布代码过程中出于安全考虑是不产生 <strong>sourcemap</strong> 文件的，当然回过头来想一下，只要目前的项目源码和当前线上发布时的是一致的，重新生成 sourcemap 文件也能解决问题；第二个问题就比较难办了，以前只是配置 Webpack，至于自己如何手动解析 sourcemap 倒还没尝试过，先是查了下资料，发现这个文件格式标准是 Google 提出来的，但没有找到官方提供的解析工具，不过后续却找到了一个 <em>Mozilla</em> 的开源项目 <a href="https://github.com/mozilla/source-map" target="_blank" rel="noopener noreferrer"><code>source-map</code></a> 解决了该问题。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="工具脚本">工具脚本<a class="hash-link" href="#工具脚本" title="标题的直接链接">​</a></h3><p>有了 <strong>sourcemap</strong> 文件和解析工具其实就很好解决问题了，这里贴一下自己使用的工具脚本源码：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 调试压缩代码（要保留 dist 文件夹）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * ! 上线前请注意不要把 sourcemap 文件一同发布</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports">process</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'process'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports">path</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'path'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports">fs</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'fs'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports">sourceMap</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'source-map'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// * 第一步：更改要调试的压缩代码文件对应 sourcemap 文件名称</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sourcemap </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> fs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">readFileSync</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  path</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">join</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">cwd</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'./dist/js/index.314d075b.js.map'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sourcemap </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token known-class-name class-name">JSON</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">parse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sourcemap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">parse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> s </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">sourceMap</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">SourceMapConsumer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sourcemap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// * 第二步：将 `line` 和 `column` 更改为线上错误日志堆栈信息中的行列号</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">debug</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">originalPositionFor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">line</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">15</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">column</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">69</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">destroy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// * 最后运行脚本：`node scripts/debug-min-code.mjs`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 查看打印出的实际文件和位置信息</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">parse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="实际应用调试第三方库">实际应用：调试第三方库<a class="hash-link" href="#实际应用调试第三方库" title="标题的直接链接">​</a></h2><p>对于我们自己写的项目源代码利用诸如 Webpack 等构建工具可以在打包时生成 <strong>sourcemap</strong> 文件，调试项目源代码就会很方便。但是，在我们开发过程中，一般来说会依赖很多第三方库，大部分的第三方库最终提供的也是经过编译、混淆、压缩、打包的单个 js 文件，如何在开发过程中根据错误堆栈信息调试第三方库也是一个问题。</p><p>一般来说，有两种方案。第一种方案是社区普遍采用的方式，为用户额外提供一个经过编译、打包但未压缩、混淆的单个 js 文件，在包的入口处根据环境导出不同的版本。以 React 的入口文件为示例：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">NODE_ENV</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'production'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  module</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'./cjs/react.production.min.js'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  module</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'./cjs/react.development.js'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里的 <code>NODE_ENV</code> 环境变量是社区共识，而且在各种构建工具中都会自动设置相应的值。这种方案的优势是对于用户来说易于使用，劣势是用户调试过程中的代码依然是被编译和打包后的单个庞大的 js 文件，并非源代码，调试起来也有诸多不便。</p><p>第二种方案就是利用 <strong>sourcemap</strong> 文件，包在发布的时候附带相应的 sourcemap 文件。但这种方案对于用户来说可能不是开箱即用的，我在使用 Webpack 作为构建工具时，发生错误后，在 Chrome 的开发工具中发现第三方库的 sourcemap 文件没有生效，这个问题的原因可以参考下面这篇文章：</p><blockquote><p><a href="https://blog.sentry.io/2018/10/18/4-reasons-why-your-source-maps-are-broken" target="_blank" rel="noopener noreferrer">4 Reasons Why Your Source Maps are Broken</a></p></blockquote><p>前端构建工具链中基本都会涉及到处理 sourcemap 文件的过程，所以在使用多个工具链的时候，需要特别注意。对于 Webpack，使用 <a href="https://github.com/webpack-contrib/source-map-loader" target="_blank" rel="noopener noreferrer"><code>source-map-loader</code></a> 这个工具库就可以修复第三方库的 sourcemap 文件失效问题，这样我们在开发过程中就可以基于第三方库的源码进行调试了（当然前提是有提供 sourcemap 文件）。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考资料">参考资料<a class="hash-link" href="#参考资料" title="标题的直接链接">​</a></h2><ul><li><a href="https://sourcemaps.info/spec.html" target="_blank" rel="noopener noreferrer">Source Map Revision 3 Proposal</a></li><li><a href="https://github.com/mozilla/source-map" target="_blank" rel="noopener noreferrer">source-map</a></li><li><a href="https://blog.sentry.io/2018/10/18/4-reasons-why-your-source-maps-are-broken" target="_blank" rel="noopener noreferrer">4 Reasons Why Your Source Maps are Broken</a></li><li><a href="https://github.com/webpack-contrib/source-map-loader" target="_blank" rel="noopener noreferrer">source-map-loader</a></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>工具</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>Debug</category>
            <category>SourceMap</category>
        </item>
        <item>
            <title><![CDATA[Web 应用：轻量级状态管理工具 zustand]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/web-app-model-zustand</link>
            <guid>/Computer-Technology/Web/web-app-model-zustand</guid>
            <pubDate>Thu, 18 Nov 2021 00:14:00 GMT</pubDate>
            <description><![CDATA[Web 网页向 Web 应用发展的过程中，势必会出现 Web 项目的复杂化问题，而在移动端场景，基于 React.js 的应用中如何管理状态？zustand 也许值得一试。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2021-11-18 00:14:00 </em></p></blockquote><p>基于 React.js 的 Web 应用如何完成状态管理？社区主流方案是 <strong>react-redux</strong>，其本质上基于 React 的 <code>Context</code> 特性实现，如果应用足够简单，实际上用 <code>Context</code> 手写一个简单的状态管理工具倒也并不难。不过，考虑到工具的完善性、项目的健壮性，通常采用较好的、成熟的社区方案。在移动端场景下，<strong>react-redux</strong> 略显臃肿，轻量级状态管理工具 <strong>zustand</strong> 倒是一个不错的替代方案。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="轻量级状态管理方案">轻量级状态管理方案<a class="hash-link" href="#轻量级状态管理方案" title="标题的直接链接">​</a></h2><p>Web 优化中，资源大小的优化是重中之重，而且也是成本最低，收益最高的优化方式，在移动端场景下尤为突出。每在项目中引入一个工具库，都要考虑是否有更轻量级的替代品。众所周知，<strong>moment</strong> 就是一个典型的例子，我通常采用 <strong>dayjs</strong> 作为替代方案。而在应用状态管理工具的选择中，可以利用 Bundlephobia 首先评估一下社区主流方案 <strong>react-redux</strong>。</p><table><thead><tr><th></th><th align="right">MINIFIED</th><th align="right">MINIFIED + GZIPPED</th></tr></thead><tbody><tr><td><a href="https://bundlephobia.com/package/redux@4.1.2" target="_blank" rel="noopener noreferrer">redux@4.1.2</a></td><td align="right">4.3kB</td><td align="right">1.6kB</td></tr><tr><td><a href="https://bundlephobia.com/package/react-redux@7.2.6" target="_blank" rel="noopener noreferrer">react-redux@7.2.6</a></td><td align="right">16.2kB</td><td align="right">5.4kB</td></tr><tr><td></td><td align="right">20.5kB</td><td align="right">7kB</td></tr></tbody></table><p>仅必须的依赖就需要 <strong>7kb</strong> 之多，而我们也知道，redux 不仅是一个状态管理工具，其同时也提倡一种优秀的模式，即我们熟知的：</p><blockquote><p>Store -&gt; Dispatch -&gt; Action -&gt; Reducer -&gt; Store</p></blockquote><p>而这种模式需要我们手写大量的模板代码，于是就有了官方解决方案 <strong>@reduxjs/toolkit</strong> 和社区方案 <strong>@rematch/core</strong>，这进一步加剧了资源大小所带来的影响。</p><table><thead><tr><th align="left"></th><th align="right">MINIFIED</th><th align="right">MINIFIED + GZIPPED</th></tr></thead><tbody><tr><td align="left"><a href="https://bundlephobia.com/package/@reduxjs/toolkit@1.6.2" target="_blank" rel="noopener noreferrer">@reduxjs/toolkit@1.6.2</a></td><td align="right">32.1kB</td><td align="right">10.5kB</td></tr><tr><td align="left"><a href="https://bundlephobia.com/package/@rematch/core@2.2.0" target="_blank" rel="noopener noreferrer">@rematch/core@2.2.0</a></td><td align="right">4.7kB</td><td align="right">1.7kB</td></tr></tbody></table><p>经过分析，事实上我们可以看到 redux 的核心代码库仅有 <strong>1.6kb</strong> 的大小，但为了适配 React.js 和解决模板代码的问题，至少也要增加 <strong>7.1kb</strong> 的资源大小。换句话说，状态管理工具的核心实现其实是比较简单的，这也是核心库较小的原因，而在移动端场景下，项目一般较为简单、规模较小，对于工具的核心需求其实也仅仅是满足应用状态管理即可。于是，<strong>zustand</strong> 社区方案成为了我的一个选择。</p><table><thead><tr><th align="left"></th><th align="right">MINIFIED</th><th align="right">MINIFIED + GZIPPED</th></tr></thead><tbody><tr><td align="left"><a href="https://bundlephobia.com/package/zustand@3.6.5" target="_blank" rel="noopener noreferrer">zustand@3.6.5</a></td><td align="right">2kB</td><td align="right">954B</td></tr><tr><td align="left"><a href="https://bundlephobia.com/package/jotai@1.4.3" target="_blank" rel="noopener noreferrer">jotai@1.4.3</a></td><td align="right">6.1kB</td><td align="right">2.5kB</td></tr></tbody></table><p>上表中，还列出了 jotai，它与 zustand 出自同一个开发者群体之手，前者仅适用于 React.js 组件内的状态管理，而后者还适用于组件之外的状态操作。<strong>zustand</strong> 足够简单，且无需太多模板代码，仅 <strong>954B</strong> 大小即可满足应用状态管理的核心需求。</p><p>至此，移动端场景下，要替代 react-redux 这种主流方案，考虑以下几点：</p><ul><li>满足应用状态管理的核心需求</li><li>具备资源大小优势</li><li>用法足够简单</li><li>方案成熟（较多人采用、有配套的调试工具等）</li><li>可在组件外操作状态</li></ul><p>其中，可在组件外操作状态这一点其实是为了满足方案的灵活性，有时候业务需求的实现可能会涉及到在组件之外进行状态操作的场景，这个时候就很方便了。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="redux-vs-zustand">redux vs zustand<a class="hash-link" href="#redux-vs-zustand" title="标题的直接链接">​</a></h2><p>接下来，分析一下两者的源码实现，即可了解是否 zustand 可作为一个较好的替代方案。分两步进行，第一步首先来看看两者的核心实现，即状态管理的机制。</p><p>首先，我们要明白状态管理做的是什么事情。状态即数据，对于一个原生的 Web 应用来说，某一时刻页面展示的结构和样式取决于此时的状态，状态可能会由于用户交互动作发生变化。Web 应用有很多状态，比如表单的勾选按钮状态，我们可以将这种状态视为局部状态，该状态的变化不会导致页面其它部分发生变化；当然，如果我们将用户体验设计更进一步，勾选按钮的状态会同步影响表单提交按钮是否处于可点击的状态，此时一个状态在页面两个部分都有影响，对于更复杂的 Web 应用来说，一个状态可能影响到页面数十个部分，我们就需要对状态的维护更新机制进行设计，将状态的维护从页面进行解耦，独立到全局来进行，则将这种状态称之为全局状态。显然，对于局部状态来说，页面局部可以完成自治，而对于全局状态来说，则需要一个全局中心化的“数据库”来进行管理。</p><p>现在，我们可以知道，状态管理需要提供一个类似中心化的“数据库”，同时对于状态要提供更新机制，而状态可以被多个部分依赖，状态更新的同时依赖方可以及时获取到最新状态。这不就是软件架构中典型的发布/订阅模式吗？所以，先来看看 redux 和 zustand 两者提供的 API，大致就能理解其核心实现的模型。</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Redux (https://redux.js.org/api/api-reference)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">createStore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">reducer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">preloadedState</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">enhancer</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Store</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">getState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">subscribe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">listener</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">dispatch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">action</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// zustand (https://github.com/pmndrs/zustand)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">createStore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Store</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">getState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">subscribe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">setState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>由此可见，两者提供的核心 API 是非常相近的，从 API 命名的角度来看，其核心实现无疑是基于发布/订阅模式。</p><p>两者都有一个 <code>createStore()</code> API 来创建一个中心化的数据存储区，同时创建的 store 实例均会暴露出主动获取状态的 API <code>getState()</code>，订阅状态更新的 API <code>subscribe()</code>，以及更新状态的 API <code>dispatch()</code> 和 <code>setState()</code>，当然 redux 还引入了一个 <code>reducer</code> 的概念和 API。</p><p>两者的核心库均只有 1kb 大小，而 zustand 更小，这是因为 zustand 实现更为简单一些，其差异主要集中在状态更新机制上，其次是状态订阅机制。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe"><code>subscribe()</code><a class="hash-link" href="#subscribe" title="标题的直接链接">​</a></h3><p>在状态订阅的 <code>subscribe()</code> API 实现中，zustand 仅是简单的直接将订阅函数添加到订阅列表中，同时提供了一个 <code>selector</code> 机制来过滤状态：</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// see https://github.com/pmndrs/zustand/blob/v3.6.5/src/vanilla.ts#L126</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> subscribe</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Subscribe</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">TState</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">StateSlice</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  listener</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> StateListener</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">TState</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> StateSliceListener</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">StateSlice</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  selector</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> StateSelector</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">TState</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> StateSlice</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  equalityFn</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> EqualityChecker</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">StateSlice</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">selector </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> equalityFn</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">subscribeWithSelector</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      listener </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> StateSliceListener</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">StateSlice</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      selector</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      equalityFn</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  listeners</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">listener </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> StateListener</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">TState</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Unsubscribe</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> listeners</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">delete</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">listener </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> StateListener</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">TState</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// see https://github.com/pmndrs/zustand/blob/v3.6.5/src/vanilla.ts#L107</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> subscribeWithSelector </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">StateSlice</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  listener</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> StateSliceListener</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">StateSlice</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  selector</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> StateSelector</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">TState</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> StateSlice</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> getState </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token builtin">any</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  equalityFn</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> EqualityChecker</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">StateSlice</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Object</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">is</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token builtin">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">warn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'[DEPRECATED] Please use `subscribeWithSelector` middleware'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> currentSlice</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> StateSlice </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">selector</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">listenerToAdd</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> nextSlice </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">selector</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token function" style="color:#d73a49">equalityFn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentSlice</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> nextSlice</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> previousSlice </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> currentSlice</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">listener</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentSlice </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nextSlice</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> previousSlice</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  listeners</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">listenerToAdd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Unsubscribe</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> listeners</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">delete</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">listenerToAdd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>通过上面 <code>listenerToAdd()</code> 函数可以看到，在订阅状态时提供了 <code>selector</code> 的话，状态更新时会首先将状态过滤一遍再通知给订阅者。</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// see https://github.com/pmndrs/zustand/blob/v3.6.5/src/vanilla.ts#L89</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> setState</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> SetState</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">TState</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">partial</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> replace</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  listeners</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">forEach</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">listener</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">listener</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> previousState</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>通过 <code>setState()</code> 更新状态时，所有订阅函数将会调用，同时会将新的状态和旧的状态传递给订阅函数。</p><p>接下来，看看 redux 的实现，redux 在添加订阅函数时做了一些特殊的判断，以及特殊处理：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// see https://github.com/reduxjs/redux/blob/v4.1.2/src/createStore.js#L128</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">subscribe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">listener</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">isDispatching</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">throw</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'...'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> isSubscribed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">ensureCanMutateNextListeners</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  nextListeners</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">listener</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">unsubscribe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">isSubscribed</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">isDispatching</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">throw</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'...'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    isSubscribed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">ensureCanMutateNextListeners</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nextListeners</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">indexOf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">listener</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nextListeners</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">splice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    currentListeners </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// see https://github.com/reduxjs/redux/blob/v4.1.2/src/createStore.js#L82</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ensureCanMutateNextListeners</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nextListeners </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> currentListeners</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nextListeners </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> currentListeners</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">slice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>根据实现，redux 通过 <code>isDispatching</code> 标志位避免在状态更新期间添加订阅函数，以及通过 <code>ensureCanMutateNextListeners()</code> 函数将订阅函数列表做了浅拷贝再进行添加和删除操作，这都是对潜在的问题的规避。</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// see https://github.com/reduxjs/redux/blob/v4.1.2/src/createStore.js#L197</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">dispatch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">action</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> listeners </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentListeners </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nextListeners</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> listeners</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> listener </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> listeners</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">listener</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> action</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>redux 通过 <code>dispatch()</code> 更新状态时，由于在订阅时没有默认提供 <code>selector</code> 机制，所以会无差别的通知所有订阅者，同时也不会将新旧状态传递给订阅函数，当然在官方示例代码中可以看到，官方推荐在订阅函数中主动通过 <code>getState()</code> 获取新的状态以及完成 selector 操作。可以说，由于 redux 和 zustand 设计理念不同，订阅的实现方式也略有差别，前者控制的更细致，而灵活性很高，而后者在保持简单性的同时也没有牺牲灵活性。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="setstate--dispatch"><code>setState()</code> &amp;&amp; <code>dispatch()</code><a class="hash-link" href="#setstate--dispatch" title="标题的直接链接">​</a></h3><p>状态更新机制是两者实现最大的不同，zustand 提供一个 <code>setState()</code> 函数来更新状态：</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// see https://github.com/pmndrs/zustand/blob/v3.6.5/src/vanilla.ts#L89</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> setState</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> SetState</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">TState</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">partial</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> replace</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// TODO: Remove type assertion once https://github.com/microsoft/TypeScript/issues/37663 is resolved</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// https://github.com/microsoft/TypeScript/issues/37663#issuecomment-759728342</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> nextState </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> partial </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'function'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">partial </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">state</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> TState</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> TState</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> partial</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nextState </span><span class="token operator" style="color:#393A34">!==</span><span class="token plain"> state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> previousState </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> state</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    state </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> replace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nextState </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> TState</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Object</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">assign</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> state</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> nextState</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    listeners</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">forEach</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">listener</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">listener</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> previousState</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>根据源码实现来看，zustand 通过 <code>Object.assign</code> 函数合并更新状态，同时提供 <code>replace</code> 标志位直接将旧状态完全替换。</p><p>而 redux 的状态更新则要复杂一些，主要是官方推荐的编程模式将状态更新拆分为多个步骤，<code>dispatch()</code> 函数触发一个 <code>Action</code>，而具体处理 Action 以及状态合并的操作均由 <code>Reducer</code> 函数完成，该函数是一个纯函数。至于为什么要这么设计，官方有说明，纯函数对于状态变化来说是可预测的，而且利于测试，更是实现时间旅行类似功能的基础。</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// see https://github.com/reduxjs/redux/blob/v4.1.2/src/createStore.js#L197</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">dispatch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">action</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token function" style="color:#d73a49">isPlainObject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">action</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">throw</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">Actions must be plain objects. Instead, the actual type was: '</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation function" style="color:#d73a49">kindOf</span><span class="token template-string interpolation punctuation" style="color:#393A34">(</span><span class="token template-string interpolation"></span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string interpolation">        action</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string interpolation">      </span><span class="token template-string interpolation punctuation" style="color:#393A34">)</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c">'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> action</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">type</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'undefined'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">throw</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token string" style="color:#e3116c">'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">isDispatching</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">throw</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Reducers may not dispatch actions.'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    isDispatching </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    currentState </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">currentReducer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentState</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> action</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">finally</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    isDispatching </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> listeners </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentListeners </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nextListeners</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> listeners</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> listener </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> listeners</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">listener</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> action</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>根据源码实现来看，这里出现了 <code>isDispatching</code> 标志位，主要是用来限制状态更新过程中不能再次发起状态更新操作，避免出现错误。</p><p>不过，有一点值得提一下，redux 默认不支持异步更新状态，需要借助 redux-thunk 库来支持；而 zustand 本身则是支持异步更新状态的。</p><p>根据以上分析来看，实际上核心实现是相似的，而且 zustand 作为后来者，对 redux 有借鉴也有简化的地方，满足状态管理的核心简单需求是没有多大问题的，可作为 redux 的一个替代方案。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="reactjs-适配">React.js 适配<a class="hash-link" href="#reactjs-适配" title="标题的直接链接">​</a></h3><p>如果说，核心库差异较小，而且包尺寸相近的话，那么最大的差异则出现在对 React.js 库的适配上面。</p><p>zustand 出现的较晚，目前 Hook API 已经成为 React.js 社区的主流，所以 zustand 在对其适配的时候也是以 Hook API 的方式实现，没有提供类组件的适配。</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// see https://github.com/pmndrs/zustand/blob/v3.6.5/src/index.ts#L64</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">create</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token generic-function generic class-name">  TState </span><span class="token generic-function generic class-name keyword" style="color:#00009f">extends</span><span class="token generic-function generic class-name"> State</span><span class="token generic-function generic class-name punctuation" style="color:#393A34">,</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token generic-function generic class-name">  CustomSetState</span><span class="token generic-function generic class-name punctuation" style="color:#393A34">,</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token generic-function generic class-name">  CustomGetState</span><span class="token generic-function generic class-name punctuation" style="color:#393A34">,</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token generic-function generic class-name">  CustomStoreApi </span><span class="token generic-function generic class-name keyword" style="color:#00009f">extends</span><span class="token generic-function generic class-name"> StoreApi</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">TState</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token generic-function generic class-name"></span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  createState</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> StateCreator</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">TState</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> CustomSetState</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> CustomGetState</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> CustomStoreApi</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> CustomStoreApi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> UseBoundStore</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">TState</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> CustomStoreApi</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> useStore</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">any</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">StateSlice</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    selector</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> StateSelector</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">TState</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> StateSlice</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> api</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">getState </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token builtin">any</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    equalityFn</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> EqualityChecker</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">StateSlice</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Object</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">is</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> forceUpdate</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useReducer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> c </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">never</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> stateBeforeSubscriptionRef </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useRef</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">useIsomorphicLayoutEffect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">listener</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> nextState </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> api</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> nextStateSlice </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> selectorRef</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">current</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nextState</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">equalityFnRef</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">current</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              currentSliceRef</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">current </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> StateSlice</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              nextStateSlice</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            stateRef</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nextState</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            currentSliceRef</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nextStateSlice</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">forceUpdate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          erroredRef</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token function" style="color:#d73a49">forceUpdate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> unsubscribe </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> api</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">subscribe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">listener</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">api</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!==</span><span class="token plain"> stateBeforeSubscriptionRef</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">listener</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// state has changed before subscription</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> unsubscribe</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> sliceToReturn </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hasNewStateSlice</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">newStateSlice </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> StateSlice</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> currentSliceRef</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">useDebugValue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sliceToReturn</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> sliceToReturn</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> useStore</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>zustand 将 <code>createStore</code> 函数的返回值作为一个自定义 hook 来实现，其中为了让 React.js 组件能感知到状态更新，是利用 <code>useEffect</code> 来完成订阅操作，而状态更新发布后，则通过 <code>forceUpdate()</code> 来强制组件进行 rerender 以获取最新的状态。</p><p>这里，看看如何在函数组件中使用 zustand：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports">create</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'zustand'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Store</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> useStore </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter keyword" style="color:#00009f">set</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">bears</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function-variable function" style="color:#d73a49">increasePopulation</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">bears</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> state</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">bears</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function-variable function" style="color:#d73a49">removeAllBears</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">bears</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Component</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">BearCounter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> bears </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useStore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> state</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">bears</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">h1</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">bears</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> around here </span><span class="token spread operator" style="color:#393A34">...</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">h1</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">Controls</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> increasePopulation </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useStore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> state</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">increasePopulation</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">button onClick</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">increasePopulation</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">one up</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">button</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>实际上，用法和 react-redux 非常相似，但获取状态与更新状态均只需要使用 <code>useStore</code> 一个 API 即可完成业务。</p><p>然而，react-redux 的实现则要复杂的多。由于其出现的较早，所以同时适配了类组件和函数组件。这里不再细究 react-redux 的具体实现，但其与 zustand 最大的差异则在于把状态放在了 <code>Context</code> 中存储，所以需要使用 <code>Provider</code> 将页面的根组件包裹起来才能使用。redux 的 <code>useSelector()</code> Hook API 与 zustand 上面提到的 <code>useStore()</code> 的实现逻辑也非常相似。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="调式工具">调式工具<a class="hash-link" href="#调式工具" title="标题的直接链接">​</a></h3><p>一个核心工具库好不好用，不仅要能解决业务问题，同时也要能提供良好的开发体验，redux 之所以能成为 React.js 社区普遍采用的状态管理方案，不仅在于其实现的优雅，倡导的优秀的模式，更在于其配套的调试工具、中间件也非常好用。所以，zustand 作为后来者并没有重复造轮子，而是尽最大的可能重用 redux 社区的开源方案，这一点也是比较好的，至少从 redux 迁移到 zustand 不会有太大的困难，开发体验上来说还是不错的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>至此，完成了对 zustand 这个轻量级的状态管理方案的探索，至少在满足状态管理简单的核心需求、使用简单、具备良好的调式工具等几方面来说还是不错的，作为 redux 的轻量级替代方案，完全值得一试。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li><a href="https://redux.js.org/" target="_blank" rel="noopener noreferrer">redux</a></li><li><a href="https://react-redux.js.org/" target="_blank" rel="noopener noreferrer">react-redux</a></li><li><a href="https://zustand.surge.sh/" target="_blank" rel="noopener noreferrer">zustand</a></li><li><a href="https://javascript.plainenglish.io/lets-build-our-own-redux-9384b283529c" target="_blank" rel="noopener noreferrer">Let’s build our own Redux</a></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>应用状态管理</category>
            <category>React.js</category>
        </item>
        <item>
            <title><![CDATA[又读村上春树]]></title>
            <link>https://wang1212.github.io/2021/11/15/Life/reading/reading-</link>
            <guid>/2021/11/15/Life/reading/reading-</guid>
            <pubDate>Mon, 15 Nov 2021 00:59:00 GMT</pubDate>
            <description><![CDATA[时间过得飞快，春节的日子也不远了，偶然间又读到村上春树先生的小说，觉得该记录一些什么东西。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2021-11-15 00:59:00 </em></p></blockquote><p>最近，在新工作逐渐稳定进入正轨时，业务上也稍忙一些，也经历了一些人和事，年初订的计划其实有被打乱的。另一方面，也导致近期比较焦虑，而且业余时间很难集中精力研究和学习新的东西，非常容易被娱乐的东西所吸引。当然，每到此时，我首先想到的便是看书，以此让自己静下心来，而小说一般来说是最好的。</p><p>周末了，打开京东读书，恰好看到送的一本小说，是村上春树先生的《黑夜以后》。其实，之前看过先生很著名的作品《挪威的森林》，确实觉得不错，之后又看了《海边的卡夫卡》，感觉更甚。这不，直接毫不犹豫的就看了起来，却不曾料到，3 个小时就看完了。</p><p>这算是一篇短篇小说吧，且分为多个章节，进行交替叙事。村上春树的小说常给一种孤独的感觉，这次也不例外。冬天，短短持续几个小时的黑夜，几个人不同的故事线，偶有交集，直到看完整本书也似乎没有所谓的高潮部分，一切都很稀松平常。当然，能把普通的故事写的让人不感觉到厌烦，还能一口气读完，也是作者的厉害之处。虽说是三个小时看完的，但中途停留了半天的时间，而且途中我也去看了看豆瓣书评，然而虽然已经剧透了，但我还是把书看完了。</p><p>小说有时候之所以吸引人，其实是给读者以共鸣的，也就是说作者借讲故事来描述这个真实的社会。事实上，在我看完书之后其实是没有想太多的，直到我看了知乎某位作者的书评之后，却对之无不赞同。我记得，这位作者写到自己其实是看了两次这本书的，一次是在上学期间，年纪还小，第二次看这本书时已经是身处日本过着读研究生的生活了，第一次似懂非懂，第二次却感同身受，不一样的年纪对生活有不一样的感受和理解。恰巧，前段时候看到有人说，小时候背古诗怎么也背不来，现在长大了不用注释都能看得懂了。而我现在读这本书时，也大概已经能读懂了吧。现在也算是到了成家的年龄了，工作也在上升期，到了人生最苦最难的时期，也就很能感受得到书中这种冬夜孤寂的感觉，故事中的人物所面临的孤独、苦闷、无奈亦有些许感同身受。当然，不像《人间失格》一样彻底营造出一种消极的气氛和人生，这本书中还有一个暂且认为是男主人公的人物，而他恰恰善良、积极乐观，给无边的黑夜带来了一丝光亮。作者用多个人物抛出了类似的问题，却又用这样一位男主角给出了自己的态度，而结尾也充满了想象，但总归事情算是往好的方向去发展了。</p><p>这本书可能算不上村上春树先生的名作，也是我偶然间读到的，还算不错，至少让我达到了目的，让自己的心静了下来。现代社会的压力带给所有人的浮躁，让人不免产生焦虑感，无法静下心来好好的思考。至少，我觉得读书是个很好的方式。</p><blockquote><p>我们的人生是不能以明快或抑郁来简单划分的，也有阴影这个中间地带。能够认识和理解这个阴影阶段，才算得上是健全的知性，而获得健全的知性是需要相应的时间和辛劳的。——村上春树《天黑以后》</p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="书">书<a class="hash-link" href="#书" title="标题的直接链接">​</a></h2><ul><li>《天黑以后》- <!-- -->[日]<!-- -->村上春树 著，施小炜 译</li></ul>]]></content:encoded>
            <category>生活</category>
            <category>阅读</category>
        </item>
        <item>
            <title><![CDATA[随笔]]></title>
            <link>https://wang1212.github.io/Life/2021-life-work-review-11-07</link>
            <guid>/Life/2021-life-work-review-11-07</guid>
            <pubDate>Sun, 07 Nov 2021 14:16:00 GMT</pubDate>
            <description><![CDATA[最近的工作很忙，但偶尔感觉到焦虑，或者说喜欢思考，以及认知有了变化。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2021-11-07 14:16:00 </em></p></blockquote><p>新工作将满半年，作为一个工作四年左右的人来说，很快的适应新工作并投入其中，算不上什么新鲜事，也不值一提。为什么这么说呢，大抵是因为虽然技术有进步，但职级却没有太大进步，当然现阶段来看这也是没有办法的事情。</p><p>这半年来，基本的业务任务在做，完成的也还不错，当然更重要的是也在做技术方面的努力，刚开始会关注自己较为熟悉的方面，团队技术基础建设，算是一个比较好的切入点，熟悉之后也发现了一些问题，积极的进行了技术贡献，后期也会主导维护，作为自己的一个长期目标。当然，这方面其实可做的不多，而且所做的事情带来的价值取决于团队成员，团队成员技术习惯和遵守文档规定的态度直接决定了团队内部技术基建所带来的价值多少，而就我目前观察来看，只能说不容乐观，这也让我产生了积极的思考！</p><p>另一方面，也在积极的探索 Node.js 方向的技术，期间根据 Leader 推荐的一个方向，利用谷歌的 Puppeteer 工具进行线上页面监测，这个我在本地和自己的云服务器上做了初步技术验证和实现，但遇到了一个麻烦的问题，由于公司从事行业的问题，内部技术较为保守和传统，且无经验可参考，导致要在公司内部上 Node 容器环境，并发布在正式环境还需要摸索和验证。这就又回到了最初的问题，探索 Node.js 方向的技术，基建还需要一步一步来完成。然而，Node 基建方面的工作由内部小团队来协作完成，当然我也是其中一员，但团队成员似乎对 Node 技术没有太大兴趣，导致自己完成所负责的那部分工作后，其它部分工作难以推进。这方面，也让我有了进一步的思考！</p><p>曾经看到过说小团队比大团队效率高，这点目前来说是有一定的体会的，但是遇到困难是肯定的，解决的过程也是经验积累的一个过程，是值得且有意义的。</p><p>抛开工作，回过头来看看生活。现在的精神毒药太多了，异常耗费人的闲暇时间，比如刷短视频 App，我在半年前就已经卸载了短视频 App 以及类似微博、知乎这些娱乐性质的应用。给自己订了目标，平时用节省下来的时间多看看书，因为我发现看书容易让人心静下来，现在的社会让人异常浮躁，无法安心的思考，看书倒是一个很好的选择。当然，这期间是坚持了一段时间的，中间又因为一些比较重要的事情耽搁了一段时间，到最近才恢复看书的习惯。以前心想着，在手机上随时都能看，可以更充分的利用琐碎的时间，直到这两天在电脑上看，才发现效率要高很多，而且也不容易受影响。</p><p>又到年底了，感叹时间过得真快，一年一年过去了，自己的生活还是要向更好的方向发展，那么这一年自己都做了哪些事情呢！</p>]]></content:encoded>
            <category>生活</category>
            <category>工作</category>
        </item>
        <item>
            <title><![CDATA[Web 前端性能优化：批量 DOM 操作 - FastDOM]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/web-performance-fastdom</link>
            <guid>/Computer-Technology/Web/web-performance-fastdom</guid>
            <pubDate>Mon, 04 Oct 2021 00:06:00 GMT</pubDate>
            <description><![CDATA[原生应用时代，DOM 操作一般借助类似 jQuery 的工具库手动完成，而在框架/库应用时代 DOM 操作退居幕后自动完成，原生应用与框架应用性能孰高孰低？DOM 批量操作对于性能有何影响？利用 FastDOM 库来解决这些性能问题。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-03-10 00:28:00 </em></p></blockquote><p>利用 JS 开发的原生应用与依赖于 React.js/Vue 开发的框架/库应用，性能孰高孰低？这两者最显著的区别在于原生应用需要手动操作 DOM 完成业务，而框架/库应用是基于数据变化响应式的应用，后者只需要关注数据如何变化，至于体现在 DOM 上的变化皆由框架/库内部自动完成。所以，要搞清楚两者的性能优劣，可能<strong>批量</strong>的 DOM 操作是一个不可忽略的核心因素。从代码执行的角度分析，框架/库也是基于原生 API 进行的封装抽象，因此代码执行时的路径更长、堆栈更深，由此可见原生 API 的操作性能应该是最高的。但是，现实情况是业务通常来说是复杂的，代码实现中 DOM 操作的逻辑分散在各处，那么多个 DOM 操作之间是否会产生影响从而不利于性能？这个时候就要关注宿主浏览器的渲染机制是如何理解批量的 DOM 操作的，这里引入的概念就是<strong>关键渲染路径（Critical rendering path）</strong>。</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path</a>
<a href="https://developers.google.com/web/fundamentals/performance/rendering" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/fundamentals/performance/rendering</a></p></blockquote><p>简单的来说，浏览器逐帧渲染的机制每次都需要经历一个<strong>先计算后布局再渲染</strong>的过程，DOM API 可以分为读和写两类，如果把一些批量的 DOM 操作先按读和写分为两组，统一先执行读操作，然后再执行写操作，这样就能实现最高的性能。这里的问题就在于如果高频率的进行 DOM 读写的交替操作会加重浏览器的负担，浏览器无法在一次渲染路径内完成所有的 DOM 操作，因此产生严重的性能问题。</p><p>那么，现在问题就很明朗了，一个复杂的业务场景中，如何实现批量 DOM 操作合理的调度才是实现高性能的关键，原生应用依赖于开发者自主对于代码的规划，要将分散在各处的 DOM 操作进行合理的调度并不是一件容易的事情，反而可能因此搞乱项目架构；而现在的类似 React.js 的框架/库则基于此，以一种数据驱动的响应式应用的理念，将复杂的 DOM 操作封装在内部，设计一种优化的调度机制实现高性能的应用。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 批量的 DOM 操作</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-&gt; DOM 读 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-&gt; DOM 写 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-&gt; DOM 读 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-&gt; DOM 写 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 优化调度</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-&gt; DOM 读 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-&gt; DOM 读 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-&gt; DOM 写 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-&gt; DOM 写 2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="真实的业务场景">真实的业务场景<a class="hash-link" href="#真实的业务场景" title="标题的直接链接">​</a></h2><p>以上，讨论了原生应用与框架/库应用在性能方面的关键所在，批量 DOM 操作的调度至关重要。虽然说框架/库在底层帮助我们完成了 DOM 操作和调度，但在日常的业务开发过程中难免会遇到需要开发者与 DOM 交互的场景，而我此前就遇到一个真实的业务场景。</p><p>在一个优化过的虚拟列表中，需要针对列表项中一些 DOM 元素进行缩放处理，而实现的具体思路是先要在渲染完成后测量 DOM 尺寸进行计算，再加样式进行 DOM 的缩放。以 DOM 结构说明：</p><div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">virtual-list</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">span</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">width-50 js-scale</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">some text too long.</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">span</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">span</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">width-50 js-scale</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">some text too long.</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">span</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">span</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">width-50 js-scale</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">some text too long.</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">span</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">span</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">width-50 js-scale</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">some text too long.</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">span</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在列表滚动渲染的过程中，需要针对 <strong>js-scale</strong> DOM 元素进行缩放处理，不允许自动换行的文本过长时（超过指定宽度时），利用 <code>transform: scale(n);</code> 样式进行缩放。那么，这里就涉及一次 DOM 的读和写操作，本身虚拟列表对性能要求比较高，虚拟化的实现过程中有性能损耗，缩放的实现对性能的影响要降到最低。</p><p>最简单的实现就是以 <strong>row</strong> 为单位，在每次渲染初始化后就进行缩放处理，由于 <strong>row</strong> 是逐个渲染的，所以缩放的处理过程实际上为：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">-&gt; row1 DOM 读</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-&gt; row1 DOM 写</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-&gt; row2 DOM 读</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-&gt; row2 DOM 写</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>实际上，这就是前面所分析的，DOM 的读和写操作高频的交替发生，性能影响非常明显。以 <strong>row</strong> 为单位进行缩放处理降低了实现的复杂度，但要将所有 <strong>row</strong> 的 DOM 操作统一调度起来会麻烦一些，不过并不是很难。实现的思路就是用两个数组分别收集对 DOM 的读和写操作函数，然后再统一先执行所有的读操作，再执行写操作，为了保证 UI 交互的及时响应，要动态的每隔一段时间就统一把收集到的 DOM 操作执行一遍再重新收集。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="fastdom">FastDOM<a class="hash-link" href="#fastdom" title="标题的直接链接">​</a></h3><p>不过，不必造轮子，在 Google 的 Web 性能文档中提及一个 npm 工具库 <a href="https://github.com/wilsonpage/fastdom" target="_blank" rel="noopener noreferrer">FastDOM</a>，正如其名，该工具库的目的就是加速 DOM 的批量处理以提高性能。</p><blockquote><p><a href="https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing</a></p></blockquote><p>在利用 FastDOM 验证以上真实业务场景中所遇到的性能问题时，效果还是比较理想的。</p><p>那么，我们接下来就看看其实现机制，其工作原理文档中也有所提及：</p><blockquote><p><a href="https://github.com/wilsonpage/fastdom#how-it-works" target="_blank" rel="noopener noreferrer">https://github.com/wilsonpage/fastdom#how-it-works</a></p></blockquote><p>简单的来说，与之前设想的实现思路一致，用 <code>window.requestAnimationFrame()</code> API 来动态控制以提高对 UI 交互的及时响应。事实上，其源码实现也并不难，可以简单的来分析一下。其提供了两个最主要的 API：</p><ul><li><code>fastdom.measure()</code> - 对应 DOM 的读操作</li><li><code>fastdom.mutate()</code> - 对应 DOM 的写操作</li></ul><p>在其内部，用两个数组分别收集 DOM 的读和写函数：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// https://github.com/wilsonpage/fastdom/blob/master/fastdom.js#L39</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">FastDom</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> self </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">reads</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">writes</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// https://github.com/wilsonpage/fastdom/blob/master/fastdom.js#L71</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function-variable function" style="color:#d73a49">measure</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">fn</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> ctx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> task </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">ctx </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> fn </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> fn</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">bind</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">reads</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">task</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">scheduleFlush</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// https://github.com/wilsonpage/fastdom/blob/master/fastdom.js#L88</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function-variable function" style="color:#d73a49">mutate</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">fn</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> ctx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> task </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">ctx </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> fn </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> fn</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">bind</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">writes</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">task</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">scheduleFlush</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>短短几行代码就已经完成了对批量 DOM 操作调度的初步实现，在这里需要重点关注 <code>scheduleFlush()</code> 的实现，其决定了所收集的 DOM 操作何时执行，并且是如何保证 UI 交互响应的及时性的。</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// https://github.com/wilsonpage/fastdom/blob/master/fastdom.js#L28</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> raf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> win</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">requestAnimationFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> win</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">webkitRequestAnimationFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> win</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">mozRequestAnimationFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> win</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">msRequestAnimationFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">cb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">setTimeout</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">cb</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// https://github.com/wilsonpage/fastdom/blob/master/fastdom.js#L168</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">scheduleFlush</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">fastdom</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">fastdom</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">scheduled</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fastdom</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">scheduled</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fastdom</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">raf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">flush</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">bind</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> fastdom</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// https://github.com/wilsonpage/fastdom/blob/master/fastdom.js#L185</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">flush</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">fastdom</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> writes </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> fastdom</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">writes</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> reads </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> fastdom</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">reads</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> error</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fastdom</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">runTasks</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">reads</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fastdom</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">runTasks</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">writes</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> error </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  fastdom</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">scheduled</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// If the batch errored we may still have tasks queued</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">reads</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> writes</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">scheduleFlush</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fastdom</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// https://github.com/wilsonpage/fastdom/blob/master/fastdom.js#L58</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function-variable function" style="color:#d73a49">runTasks</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">tasks</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> task</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">task </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tasks</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">shift</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">task</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>对于调度的实现过程略微复杂，但代码看起来还是很简单的，利用 <code>requestAnimationFrame()</code> API 刷新 DOM 操作队列，尽最大可能保证帧率的稳定性，利用 <code>fastdom.scheduled</code> 标志位控制刷新队列的操作定期执行，防止短时间内出现“长任务”对帧渲染产生不利影响，而 <code>requestAnimationFrame()</code> API 的兼容性也做了特殊处理，回退到 <code>setTimeout(cb, 16)</code> 以保证实现尽可能接近原生 API。</p><p>除此之外，FastDOM 还提供了一些其它的 API 增强开发的便利性和实用性，比如 <code>clear()</code> API 可以在必要时清空 DOM 操作队列，而 <code>catch()</code> 则可以统一处理捕获到的异常。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>本文主要基于原生应用和框架/库应用在性能方面的差异进行分析，针对其核心因素批量 DOM 操作的合理调度，借一个真实的业务场景来说明如何手动调度 DOM 批量操作以实现高性能。本着不造轮子的原则，对 Google 文档中提及的 FastDOM 工具库的源码实现做了简单分析，以验证设想的实现思路。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考资源">参考资源<a class="hash-link" href="#参考资源" title="标题的直接链接">​</a></h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/Performance" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/Performance</a></li><li><a href="https://developers.google.com/web/fundamentals" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/fundamentals</a></li><li><a href="https://github.com/wilsonpage/fastdom" target="_blank" rel="noopener noreferrer">https://github.com/wilsonpage/fastdom</a></li><li><a href="https://web.dev/user-centric-performance-metrics/" target="_blank" rel="noopener noreferrer">https://web.dev/user-centric-performance-metrics/</a></li><li><a href="https://caniuse.com/" target="_blank" rel="noopener noreferrer">https://caniuse.com/</a></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>性能优化</category>
            <category>DOM</category>
            <category>FastDOM</category>
        </item>
        <item>
            <title><![CDATA[Web 前端性能优化：案例分析 1]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/web-performance-case-1</link>
            <guid>/Computer-Technology/Web/web-performance-case-1</guid>
            <pubDate>Fri, 24 Sep 2021 00:51:00 GMT</pubDate>
            <description><![CDATA[Web 性能相关的概念很多，但如何落地在真实业务场景中，其实是一个比较难的事情，或者说机会鲜有，在这里记录一下真实业务案例做性能优化的过程。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-03-06 23:28:00 </em></p></blockquote><p>能在真实业务场景中落地 Web 性能优化方案的机会鲜有，大多数时候业务是较为简单而且要求不高的，前段时间恰好有一个比较核心的业务，对稳定性和性能有一定的要求，在这个过程中也算是做了很多尝试和实践，在此作为案例记录一下分析的过程和最终解决的方案。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="业务情况与技术难点">业务情况与技术难点<a class="hash-link" href="#业务情况与技术难点" title="标题的直接链接">​</a></h2><p>首先，介绍一下业务的具体情况和存在的技术难点。这是一个移动端 WebView 渲染的页面，属于 App 的二级核心页面，用户量数十万，日均 UV 万人，金融资产相关，所以可以看得出来对页面的稳定性要求是比较高的；其次，页面布局分为上中下三部分，中部是一个长列表，<strong>页面整体</strong>可以竖向滚动。以 DOM 结构说明：</p><div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">body</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">vertical-scroll-container</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">header</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">main</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">long-list</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">footer</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">body</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>那么，重点来了，就是页面中部这个长列表是该页面的业务核心展示位置，这个长列表事实上类似于一个表格，在页面整体向上滚动过程中表头要做到吸顶效果，而表格内部是可以横向滚动的，且横向滚动过程中第一列（包括表头）要实现列冻结效果，说到这里如果了解 Excel 的行列冻结效果的话就很清楚了；其次，每一行作为一个列表项，列表项具有非常复杂的内部布局，且可以嵌套子项进行折叠交互，列表项存在 10% 用户会出现 1000+ 项的场景。以更细化的 DOM 结构说明：</p><div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">body</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">vertical-scroll-container</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">header</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">main</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">long-list horizontal-scroll-container</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">header</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row sticky-top</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column sticky-left</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">header</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column sticky-left</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column sticky-left</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">main</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">footer</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">body</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以上，就是该业务的大致需求了，经过分析有以下几个技术难点：</p><ul><li>滚动吸顶效果（兼容、抖动问题）</li><li>长列表性能（虚拟列表）</li><li>列冻结效果（性能、交互流畅性）</li><li>表头的吸顶与列冻结效果结合（性能、抖动问题、交互流畅性）</li><li>列表项布局（嵌套布局、子项折叠交互）</li><li>列表数据动态更新</li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="逐个击破">逐个击破<a class="hash-link" href="#逐个击破" title="标题的直接链接">​</a></h2><p>接下来，就是针对每个技术难点进行分析和攻克，这里主要记录一下当时的分析过程，后续也会看到多个难点的实现方式会互相产生影响，这也是该项目复杂的原因。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="滚动吸顶效果">滚动吸顶效果<a class="hash-link" href="#滚动吸顶效果" title="标题的直接链接">​</a></h3><p>对于吸顶效果，在目前移动设备已足够先进的情况下，其实老旧机型兼容问题倒不是最大的问题，所以 CSS 能解决当然是最好的。首先 CSS 属性 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position" target="_blank" rel="noopener noreferrer"><code>position:sticky</code></a> 则可以很方便的实现滚动吸顶效果，经过尝试在主流设备上确实效果不错。作为一个覆盖了数十万用户的 C 端业务，有必要保证一定的兼容性，结果发现在 IOS 和一些比较老的安卓机型会出现问题，而社区并没有提供一个很好的 Polyfill 方案，所以只能换个思路，用 JS 来实现。</p><blockquote><p><a href="https://caniuse.com/?search=sticky" target="_blank" rel="noopener noreferrer">https://caniuse.com/?search=sticky</a></p></blockquote><p>JS 实现滚动吸顶效果最简单的方式就是监听 <code>scroll</code> 事件，更改 <code>position: fixed; top: 0px;</code> 或者 <code>position: relative; top: npx;</code> 或者 <code>transform: translateY(npx);</code>，经过实践，第一种吸顶后滚动容器高度会塌陷，后两者则不会；但是，后两者这种方式在滚动过程中会很明显的发现有抖动现象，也就是说在滚动过程中不断的计算 <code>Y</code> 值然后更改，在视觉上给人一种很不稳定的感觉，体验并不好，而第一种的话可以给要吸顶的元素增加一个固定高度的父元素，保证吸顶后滚动容器高度不会塌陷。实现方式类似以下 DOM 结构：</p><div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">body</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">vertical-scroll-container</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">sticky-container</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">sticky-content</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">body</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在这里，<strong>sticky-content</strong> 就是要实现吸顶的元素，<strong>sticky-container</strong> 则充当占位符，防止滚动容器高度坍塌。不过，在实际测试过程中发现 IOS 的 <code>scroll</code> 事件有点问题，响应有一定的延迟，所以抖动现象非常明显。于是，引入 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver" target="_blank" rel="noopener noreferrer"><code>IntersectionObserver API</code></a> 来替代监听 <code>scroll</code> 事件倒是一个很不错的想法，而且社区有提供 Polyfill 方案。经过实践，效果很理想。</p><p>简单总结一下实现思路，利用 <code>IntersectionObserver API</code> 监听滚动过程中 <strong>sticky-content</strong> 元素出入视区并触发添加/取消 <code>position: fixed; top: 0px;</code> 样式实现吸顶，而 <strong>sticky-container</strong> 的高度需要根据子元素的高度进行实时测量并固定（可以利用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Resize_Observer_API" target="_blank" rel="noopener noreferrer"><code>Resize Observer API</code></a> 实现）以防止滚动容器 <strong>scroll-container</strong> 元素的高度坍塌。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="长列表性能">长列表性能<a class="hash-link" href="#长列表性能" title="标题的直接链接">​</a></h3><p>一般来说，在做开发方案的时候不应该过度设计，或者说过度优化，一旦决定要做比较复杂的实现方案就要有一定的数据依据。根据需求和产品给出的用户数据来看，页面中部的长列表有 10% 的用户展示列表项会超过 1000 个，也就是说长列表的性能是必须要考虑的事情。</p><p>长列表的性能优化最典型的技术就是“虚拟列表”，而最典型又最简单的场景则是列表容器给一个固定高度，列表项高度固定。根据 UI 稿和交互稿来看，页面上中下的布局，滚动的是整个页面，而不是中部的长列表，而且这样的交互方式确实也更自然一些。所以，固定列表容器高度的“虚拟列表”方案是不合适的。除此之外，前面提到根据需求来看列表项具有比较复杂的逻辑，布局也较为复杂，列表项的高度也是不固定的，这就给实现虚拟列表带来一定的难度。</p><p>分析到这里，社区著名的 <code>react-window</code> 虚拟列表组件及其相关的组件库均不能实现目前的需求，但提供了可变高度列表项的用例。此时，转变思路，既然长列表无法作为一个固定高度的滚动容器，那么将整个页面视为一个虚拟列表是否行得通？以 DOM 结构说明：</p><div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">body</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">vertical-scroll-container virtual-list</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">header</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">main</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">long-list</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">&lt;!-- &lt;main class="long-list virtual-list" /&gt; --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">footer</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">body</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>经过简单的验证后，发现此方案行不通。首先，因为页面要调用客户端协议实现下拉刷新交互，发现页面容器固定高度为 100%，设置 <code>overflow: scroll;</code> 样式后下拉刷新的交互手势事件监听会出问题，客户端还不好解决；其次，整个页面作为虚拟列表，要把页面每个元素都作为列表项进行处理，反而还把问题变得复杂化了。于是，放弃此方案，寻找一种不固定滚动容器高度的虚拟列表方案。恰巧，发现 <code>react-virtualized</code> 有一个示例刚好符合这种场景：</p><blockquote><p><a href="https://bvaughn.github.io/react-virtualized/#/components/WindowScroller" target="_blank" rel="noopener noreferrer">https://bvaughn.github.io/react-virtualized/#/components/WindowScroller</a></p></blockquote><p>基于此，也快速做了验证，效果还不错，但是马上就要面临下一个问题，在这种场景下怎么做到列冻结的效果？似乎又陷入了一个僵局。这个时候，去看了一下该示例的源码，想探究一下实现的机制，发现主要还是依赖于监听 <code>scroll</code> 事件。</p><p>回过头来，重新分析需求和所提供的用户数据，10% 的用户展示列表项会超过 1000 个，而这 10% 的用户又可能所使用的设备偏中高端机型，即便如此，列表项的上限也仅会在千这个数量级，并不会上万。那么，一个页面渲染上千个 DOM 元素对于中高端机型来说倒不会有太大性能问题。根据 UI 稿来分析，一个列表所包含的 DOM 元素数量在 30-50 之间，如果有 1000 项，就会有 3w-5w 个 DOM 元素，性能压力很大；但是，假如让视区外的列表项仅渲染一个 DOM 元素做占位，此时整个列表的 DOM 元素数量会下降到 1000 - n + n(30-50)，而这个 n 则代表可在视区内展示的列表项个数，一般在 3-6 之间，这样 DOM 元素的数量急剧下降，性能压力得到极大的缓解。以 DOM 结构说明：</p><div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">body</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">vertical-scroll-container</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">header</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">main</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">long-list</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">&lt;!-- screen top --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">&lt;!-- screen bottom --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">main</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">footer</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">body</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>总结一下，这里主要解决两个问题：1. 滚动容器不能是固定高度；2. 列表项布局要足够灵活，可以实现列冻结效果。理想的“虚拟列表”实现需要同时处理滚动容器和列表项的逻辑，经过分析在有限的条件下可以实现一个“半虚拟化列表”。半虚拟化是什么意思呢？这里就要借鉴一下实现吸顶的方案了，让逃离视区的列表项并非不渲染任何 DOM 元素，而是渲染 1 个 DOM 元素做占位以自动撑开滚动容器的高度，虚拟掉列表项的子元素，而留下列表项容器元素做占位，自然而然的也就把问题的复杂度降低到只需要处理列表项的逻辑，而滚动容器的逻辑不再需要手动处理，由布局自动完成。具体实现可以借助 <code>IntersectionObserver API</code> 监听列表项出入视区，而利用 <code>Resize Observer API</code> 固定列表项容器元素的高度，这里还有一个小技巧应该给列表项容器元素给一个默认的高度（可以估算一个平均值）以撑开容器高度，这样可以降低滚动过程中布局偏移（LS）现象的影响以提高用户体验。以 DOM 结构说明：</p><div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">body</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">vertical-scroll-container</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">header</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">main</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">long-list</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">&lt;!-- screen top --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">&lt;!-- screen bottom --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">main</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">footer</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">body</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在多次更换和验证实现长列表的方案时，除过用不同配置的真机设备和不同数量级数据的测试真实感受交互过程中卡顿外，最重要且可以量化性能指标的手段则是利用 Chrome 开发工具的 <strong>Performance</strong> 工具分析滚动交互过程中的帧率情况，包括出现的布局偏移（LS）现象频率，以及利用 <strong>Memory</strong> 工具分析内存消耗和稳定情况。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="列冻结效果">列冻结效果<a class="hash-link" href="#列冻结效果" title="标题的直接链接">​</a></h3><p>接下来就是在优化后的长列表中如何实现列冻结效果，上面提到的 <code>react-virtualized</code> 虚拟列表组件恰好也有一个相关的示例：</p><blockquote><p><a href="https://bvaughn.github.io/react-virtualized/#/components/MultiGrid" target="_blank" rel="noopener noreferrer">https://bvaughn.github.io/react-virtualized/#/components/MultiGrid</a></p></blockquote><p>该组件官方示例也没有提供将非固定高度滚动容器和行列冻结效果相结合的用例，可见这并不是一个容易实现的效果。在粗略的看了一下该示例的源码和实现机制后，也略微有了一点思路，然后在网上查找了一下实现行列冻结效果的案例，基本上较为容易实现和处理且效果最好的就是双层叠加方案。以 DOM 结构说明：</p><div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">section</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">horizontal-scroll</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">&lt;!-- screen top --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">&lt;!-- screen bottom --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">section</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">section</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">overlay</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">&lt;!-- screen top --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column sticky-left</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column sticky-left</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">&lt;!-- screen bottom --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">section</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以上，长列表将渲染为两个容器 <strong>horizontal-scroll</strong> 和 <strong>overlay</strong>，前者实现横向滚动交互，后者则实现列冻结效果。具体的来说，两者 DOM 结构为镜像关系，<strong>overlay</strong> 通过绝对定位（<code>position: absolute;</code>）叠加在 <strong>horizontal-scroll</strong> 上层实现列冻结的效果，非冻结的列通过屏蔽交互（<code>pointer-events: none;</code> 和 <code>opacity: 0;</code>）就可以达到让下层处理横向滚动交互的效果。</p><p>这样的实现方式是基于长列表优化之上，经过测试和验证，效果比较理想，也降低了实现过程中逻辑处理的复杂性。而且，相比于其它监听事件动态更新坐标值的实现机制，这种在交互流畅性方便更为稳定一些，用户体验相对更好。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="表头的吸顶与列冻结效果结合">表头的吸顶与列冻结效果结合<a class="hash-link" href="#表头的吸顶与列冻结效果结合" title="标题的直接链接">​</a></h3><p>起初，我们提到这几个技术难点也许单独解决并不难，但相互之间由于实现机制会产生影响，这就体现在长列表的表头既需要在竖向滚动时实现吸顶效果，还要在横向滚动时实现列冻结效果。起初，为了实现的简单性，将表头从长列表中抽离单独处理，以 DOM 结构说明：</p><div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">body</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">vertical-scroll-container</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">main</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">long-list</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">header</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">sticky-container</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">sticky-content sticky-top</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">section</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">horizontal-scroll-header</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">section</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column sticky-left-header</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">header</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">section</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">horizontal-scroll-list</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">section</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">overlay</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">main</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">body</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在之前的基础上，利用 <code>scroll</code> 事件同步 <strong>horizontal-scroll-header</strong> 与 <strong>horizontal-scroll-list</strong> DOM 元素的横向滚动坐标 <code>scrollLeft</code>，而 <strong>sticky-left-header</strong> 则利用绝对定位（<code>position: absolute;</code>）固定叠加在 <strong>horizontal-scroll-header</strong> 上层实现列冻结的效果。当然，这个思路在实现的时候较为简单，但也存在一些问题，比如在 IOS 上利用 <code>scroll</code> 事件同步两个 DOM 元素的滚动坐标体检比较差，能明显感觉到两个滚动容器之间滚动的不同步性。</p><p>后期，经过调整思路，决定将表头也放到列表中和列表项一样来处理，不同的是要做一些特殊处理。为什么这么做呢？具体去分析的话，其实竖向滚动引起的吸顶效果和横向滚动引起的列冻结交互不是同时触发的，也就是说表头可以存在两种不同的状态，第一种是竖向滚动的时候按之前的思路实现吸顶，此时因为 <strong>sticky-content</strong> 用了 <code>position: fixed;top: 0px;</code> 会脱离文档流，但 <strong>sticky-container</strong> 做了占位符（没有脱离文档流）还是可以跟随长列表横向滚动的，于是第二种状态就出现了，在长列表横向滚动的时候将 <strong>sticky-content</strong> 的固定定位样式去掉，转换为 <strong>sticky-container</strong> 的 <code>transform: translateY(npx);</code>，这个时候表头在不脱离文档流的情况下跟随长列表横向滚动就不再依赖 <code>scroll</code> 事件同步了。以 DOM 结构说明：</p><div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">body</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">vertical-scroll-container</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">main</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">long-list</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">section</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">horizontal-scroll</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">header</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">sticky-container</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">sticky-content sticky-top</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">header</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">section</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">section</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">overlay</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">header</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">sticky-container</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">sticky-content sticky-top</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column sticky-left</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">header</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">section</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">main</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">body</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>经过验证，在 IOS 设备上体验比之前要好很多。在实现时，两种状态的切换触发依赖于 <code>scroll</code> 事件和 <code>IntersectionObserver API</code> 的相互配合。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="列表项布局与数据动态更新">列表项布局与数据动态更新<a class="hash-link" href="#列表项布局与数据动态更新" title="标题的直接链接">​</a></h3><p>至此，基本上核心难点已经解决了，为什么不在社区提供的方案上做改造也是因为接下来面临的一个难题，列表项才是业务的核心展示位置，布局较为复杂，而且数据是动态的，各个列表项的布局不一定一致，所以自主实现的目的也是考虑到业务迭代灵活性。</p><p>在之前实现的方案中，列冻结效果实现采用了双层 DOM 叠加的方式，这也在此处暴露出一个隐患，发现逻辑一旦处理不好，上下两层对应的 DOM 布局渲染的不完全一致的话整个列表上下两层就会出现错位的现象，这里的核心问题就是同一个列表项在上下两层渲染的 DOM 结构应该完全一致，这样才能保证高度相同列表不会出现错位情况。起初，解决这个问题的方式采用了利用 <code>innerHTML</code> API 将一层的 DOM 结构直接镜像过去，但也引入了交互逻辑的复杂性问题，而且在滚动过程中配合列表项虚拟化实时同步 DOM 结构严重影响了体验。后来，将这个问题做了简化，上下层列表出现错位的原因就是对应列表项的 DOM 高度（<code>height</code>）不一致，利用 <code>Resize Observer API</code> 则可以非常巧妙的解决这个问题，对一层 DOM 结构变化做监听，及时同步两层 DOM 占位元素的 <code>height</code> 属性，滚动交互的过程中体验是比较理想的。</p><p>其次，数据的动态更新影响到列表项 DOM 结构的变动，也一并利用 <code>Resize Observer API</code> 做了统一处理，这样的话将一个很复杂的问题就以非常简单的方式解决掉了。</p><p>那么，该页面最终整个的实现方案体现在 DOM 结构中的话就是以下：</p><div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">body</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">vertical-scroll-container</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">header</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">main</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">long-list</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">section</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">horizontal-scroll</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">header</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">sticky-container</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row sticky-content sticky-top</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">header</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">&lt;!-- screen top --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">&lt;!-- screen bottom --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">section</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">section</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">overlay</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">header</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">sticky-container</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row sticky-content sticky-top</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column sticky-left</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">header</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">&lt;!-- screen top --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column sticky-left</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">row</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column sticky-left</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">column</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">&lt;!-- screen bottom --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">placeholder</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">section</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">main</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">footer</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">body</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>这里主要是记录一下该业务遇到的一些技术难点，在解决这些技术难点时的分析过程和最终采取的方案，业务已经上线多月，用户体验较为理想。最后，想说的是，这些最终的解决方案是在综合考虑了业务复杂性、开发成本（时长、难度等）、用户最终体验效果等多个因素下产生的，在技术层面来说并没有达到最好的性能要求，在用户体验方面来说并没有照顾到全量的用户，但能满足多方的利益，后续还可以通过迭代来在细节处进行改进。</p><p>还有一点觉得比较重要的是，在这里没有贴太多实现的代码（仅仅以 DOM 结构代码做示例），主要考虑的是技术难点的解决重要的是思路，如何把复杂问题简单化，把问题降维处理，以低成本投入获取高收益才是最重要的，至于代码实现的细节则在不同场景下取决于具体的业务，不具备普适性。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考资源">参考资源<a class="hash-link" href="#参考资源" title="标题的直接链接">​</a></h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/Performance" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/Performance</a></li><li><a href="https://developers.google.com/web/fundamentals" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/fundamentals</a></li><li><a href="https://web.dev/user-centric-performance-metrics/" target="_blank" rel="noopener noreferrer">https://web.dev/user-centric-performance-metrics/</a></li><li><a href="https://developer.mozilla.org/en-US/" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/</a></li><li><a href="https://caniuse.com/" target="_blank" rel="noopener noreferrer">https://caniuse.com/</a></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>性能优化</category>
            <category>案例分析</category>
        </item>
        <item>
            <title><![CDATA[Child process API: spawn vs exec]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Nodejs/nodejs-spawn-vs-exec</link>
            <guid>/Computer-Technology/Nodejs/nodejs-spawn-vs-exec</guid>
            <pubDate>Wed, 25 Aug 2021 00:21:00 GMT</pubDate>
            <description><![CDATA[使用 Node.js 编写一些脚本工具是非常方便的，而常用的 spawn 与 exec API 有什么不同呢？]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-07-09 15:38:00 </em></p></blockquote><p>利用 Node.js 编写一些命令行工具、一次性脚本是很方便的，而在这类场景下 child_process API 的 <code>spawn</code> 和 <code>exec</code> 方法的应用则非常常见。在我使用它们时，却不知道该如何进行选择，遂对此进行了探究。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="child-process-api">Child process API<a class="hash-link" href="#child-process-api" title="标题的直接链接">​</a></h2><p>先来看看 <code>child_process</code> API，根据官方文档描述：</p><blockquote><p>The <code>child_process</code> module provides the ability to spawn subprocesses in a manner that is similar, but not identical, to <a href="http://man7.org/linux/man-pages/man3/popen.3.html" target="_blank" rel="noopener noreferrer"><code>popen(3)</code></a>. <strong>This capability is primarily provided by the <a href="https://nodejs.org/dist/latest/docs/api/child_process.html#child_process_child_process_spawn_command_args_options" target="_blank" rel="noopener noreferrer"><code>child_process.spawn()</code></a> function:</strong></p></blockquote><p>其类似于 Linux 的 <code>popen</code> 命令行为，<code>spawn</code> 是其核心方法，通过创建一个管道（pipe），调用 fork 生成一个子进程，并执行 shell 命令。例如，通过该 API 就可以以编程的方式生成子进程并执行二进制文件，这在编写脚本工具时是一个非常常见的场景。</p><p>在这里，主要讨论的是异步版本，当然 Node.js 为它们提供了相应的同步版本，例如 <code>spawnSync</code> 和 <code>execSync</code>。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="spawn"><code>spawn</code><a class="hash-link" href="#spawn" title="标题的直接链接">​</a></h3><p>前面说到 <code>spawn</code> 是 Child process API 的核心方法，其实从源码可以一窥究竟：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// https://github.com/nodejs/node/blob/v16.8.0/lib/child_process.js</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">exec</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">command</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> options</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> opts </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">normalizeExecArgs</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">command</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> options</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> module</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exports</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">execFile</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">opts</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">file</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> opts</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">options</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> opts</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">execFile</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">file </span><span class="token comment" style="color:#999988;font-style:italic">/* , args, options, callback */</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> child </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">spawn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// ---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">fork</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">modulePath </span><span class="token comment" style="color:#999988;font-style:italic">/* , args, options */</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">spawn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">options</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">execPath</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> args</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> options</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可见，<code>exec</code> 和 <code>fork</code> 最终还是依赖于 <code>spawn</code> 的实现。而对于后者的实现：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> child_process </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'internal/child_process'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token maybe-class-name">ChildProcess</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> child_process</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">spawn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">file</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> args</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> options</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> child </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">ChildProcess</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">spawn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">options</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>依赖于底层的内部模块 <em>internal/child_process</em> 。</p><p><code>spawn</code> 的主要功能是生成一个子进程，并执行给定的命令，父子进程之间通过管道（pipe）传递 <code>stdio</code> 信息，而且默认不生成 shell。根据示例：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> spawn </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'child_process'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> ls </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">spawn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'ls'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'-lh'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'/usr'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ls</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">stdout</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'data'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">stdout: </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">data</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ls</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">stderr</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'data'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">stderr: </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">data</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ls</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'close'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">code</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">child process exited with code </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">code</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>父进程通过监听子进程相应的 <code>stdio</code> 事件进行通信。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="exec"><code>exec</code><a class="hash-link" href="#exec" title="标题的直接链接">​</a></h3><p>前面根据源码可以看到 <code>exec</code> 的实现基于 <code>spawn</code>，但不同的是，前者在生成子进程的同时，会先生成一个 shell，然后在 shell 中执行给定的命令，子进程的输出信息会进行缓冲并最终传递给回调函数。根据示例：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> exec </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'child_process'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">exec</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'cat *.js missing_file | wc -l'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">error</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> stdout</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> stderr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">exec error: </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">error</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">stdout: </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">stdout</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">stderr: </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">stderr</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>父进程并非通过监听子进程的 <code>stdio</code> 事件，而是给子进程传递一个回调函数来获取子进程的输出信息。</p><p>这里有一个显著的区别，<code>exec</code> 会先生成一个 shell 在执行命令，而 <code>spawn</code> 则会直接执行命令，但考虑到前者基于后者实现，事实上后者可以通过传递 <code>options.shell</code> 选项来选择是否生成 shell。</p><p>官方文档有一句话也值得留意：</p><blockquote><p>Unlike the <a href="http://man7.org/linux/man-pages/man3/exec.3.html" target="_blank" rel="noopener noreferrer"><code>exec(3)</code></a> POSIX system call, <code>child_process.exec()</code> does not replace the existing process and uses a shell to execute the command.</p></blockquote><p><code>exec</code> 的 POSIX 系统调用的行为是，在当前进程中用新的进程映像（程序）替换旧的进程映像并执行，本质上并没有生成新的进程，也就不存在父子进程的概念。而在这里，Node.js 的 <code>exec</code> 方法的行为并不是替换进程映射，而是生成 shell 去执行命令。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="spawn-vs-exec"><code>spawn</code> vs <code>exec</code><a class="hash-link" href="#spawn-vs-exec" title="标题的直接链接">​</a></h3><p>现在可以总结一下两者的显著区别：</p><ul><li><code>spawn</code> 默认不生成 shell，而 <code>exec</code> 必然会生成一个 shell</li><li><code>spawn</code> 通过 stdio 事件流和父进程通信，而 <code>exec</code> 会对输出信息进行缓冲并通过回调函数将其传递给父进程，且后者默认有 1024 <!-- -->*<!-- --> 1024 字节的缓冲区限制</li></ul><p>对于第一点，如果要执行的命令依赖于 shell 的一些功能，比如管道、I/O 重定向则选择 <code>exec</code> 会更便捷。对于第二点，对比示例代码，可以很明显的看出来，<code>spawn</code> 适合长时间执行的命令，且有持续的输出信息；而后者更适合执行短时的命令，且在命令执行完后一次性获取输出结果。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="工具库-execa">工具库 <code>execa</code><a class="hash-link" href="#工具库-execa" title="标题的直接链接">​</a></h2><p>分析完它们两者的区别之后，这里推荐一个 npm 工具包 <code>execa</code>，其对 child_process 的方法进行了扩展和抽象，在很多常见的使用场景中大大减少了模板代码，也为调试提供了一定的便利性。看看文档中一段示例代码：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> execa </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'execa'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Catching an error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">execa</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'unknown'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'command'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            message: 'Command failed with ENOENT: unknown command spawn unknown ENOENT',</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            errno: -2,</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            code: 'ENOENT',</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            syscall: 'spawn unknown',</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            path: 'unknown',</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            spawnargs: ['command'],</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            originalMessage: 'spawn unknown ENOENT',</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            shortMessage: 'Command failed with ENOENT: unknown command spawn unknown ENOENT',</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            command: 'unknown command',</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            escapedCommand: 'unknown command',</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            stdout: '',</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            stderr: '',</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            all: '',</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            failed: true,</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            timedOut: false,</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            isCanceled: false,</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            killed: false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的代码中，错误信息对于开发者来说是易读的，调试起来难度要小很多。</p><p>更多的东西，建议直接看该 npm 包的文档进行详细了解。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考资源">参考资源<a class="hash-link" href="#参考资源" title="标题的直接链接">​</a></h2><ul><li><a href="https://nodejs.org/dist/latest/docs/api/child_process.html" target="_blank" rel="noopener noreferrer">https://nodejs.org/dist/latest/docs/api/child_process.html</a></li><li><a href="https://stackoverflow.com/questions/48698234/node-js-spawn-vs-execute" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/48698234/node-js-spawn-vs-execute</a></li><li><a href="https://www.hacksparrow.com/nodejs/difference-between-spawn-and-exec-of-node-js-child-rocess.html" target="_blank" rel="noopener noreferrer">https://www.hacksparrow.com/nodejs/difference-between-spawn-and-exec-of-node-js-child-rocess.html</a></li><li><a href="https://linuxhint.com/linux-exec-system-call/" target="_blank" rel="noopener noreferrer">https://linuxhint.com/linux-exec-system-call/</a></li><li><a href="https://2ality.com/2022/07/nodejs-child-process.html" target="_blank" rel="noopener noreferrer">https://2ality.com/2022/07/nodejs-child-process.html</a></li><li><a href="https://github.com/sindresorhus/execa" target="_blank" rel="noopener noreferrer">https://github.com/sindresorhus/execa</a></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Node.js</category>
            <category>child_process</category>
            <category>spawn</category>
            <category>exec</category>
        </item>
        <item>
            <title><![CDATA[黑客与画家]]></title>
            <link>https://wang1212.github.io/2021/08/22/Life/reading/reading-</link>
            <guid>/2021/08/22/Life/reading/reading-</guid>
            <pubDate>Sun, 22 Aug 2021 18:21:00 GMT</pubDate>
            <description><![CDATA[《黑客与画家》这本书早有所耳闻，终于能抽出时间来看一看，读过之后感觉对于从事 IT 行业工作且有一定经验的人来说是很有价值的。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2021-08-24 01:26:00 </em></p></blockquote><p>这本书在 IT 圈子应该是为人熟知的，这也是我知道存在这本书的原因。不过，从我知道这本书到读完这本书中间还是隔了相当一段时间的，一方面是因为工作后读书的习惯保持的不太好，另一方面也是确实比较忙。幸运的是，最近终于有空来读一读了，当然从开始读这本书到读完也是断断续续好一段时间。</p><p>这本书的名字《黑客与画家》乍一听让很多人摸不着头脑，包括我在内刚开始也猜不到这本书的内容主题是什么。然而，作为 IT 从业者，“黑客”一词对我们绝对有足够的吸引力，至少会让很多人产生了解一下的想法。这本书本身是作者写的一系列较受欢迎的文章的集合，在读完这本书之后我相信对于 IT 从业者，至少是有一定工作经验的人来说是值得读的一本书，也许会对目前的认知有所改变和产生新的认识。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="作者">作者<a class="hash-link" href="#作者" title="标题的直接链接">​</a></h2><p>这本书的作者是保罗·格雷厄姆（Paul Graham），国内知道其人的可能不太多，但提到 YC（Y Combinator）可能很多人有所耳闻，这是硅谷著名的创业孵化器机构，前不久陆奇从百度离职后也成为了 YC 中国的创始人。YC 投资和孵化了许多著名的创业公司，例如著名的 Reddit 论坛，而全球访问量最高的技术论坛 Hacker News 则是 YC 官方运营的站点，本书的作者正是 YC 的创始人。</p><p>本书作者自己本身也是 IT 从业者，学习时期攻读的计算机科学学位，后来也学习过绘画，这也是这本书名称的由来。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="本书的主题">本书的主题<a class="hash-link" href="#本书的主题" title="标题的直接链接">​</a></h2><p>由于这本书是用作者一系列受欢迎的博客文章集合而来，所以章节之间也许没有明显的关联，但从译者序中我们可以对此有一个大致的了解。</p><blockquote><p>作者想让公众了解，黑客并不神秘，更不是技术怪人。《黑客与画家》这个书名就是在提示应该把黑客与画家当作同一种人看待。和画家一样，黑客只是怀有一门特殊手艺、有创造天赋的普通人。这个书名还有另一层含义，即编程是一种艺术创作，黑客就是艺术家，开发软件与画家作画、雕塑家雕刻、建筑师设计房屋并没有本质不同。</p></blockquote><p>由此可见，这本的核心主题在于向读者阐述“黑客”这个群体的特点，以及他们做什么事情，如何通过技术来影响世界，黑客文化是什么样的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="黑客群体">“黑客”群体<a class="hash-link" href="#黑客群体" title="标题的直接链接">​</a></h2><p>作者首先通过第一视角（作者本人也是一名 "hacker"）阐述了“黑客”是一群什么样的人，他们如何看待这个世界。</p><blockquote><p>哪怕你什么也改变不了，但是仅仅是理解自己的处境，也能使得痛苦减轻一些。书呆子并不是失败者。他们只是在玩一个不同的游戏，一个更接近于真实世界状况的游戏。成年人明白这一点。成功的成年人，几乎都声称自己在高中属于书呆子。</p></blockquote><p>有趣的是，开篇探讨的是“为什么书呆子不受欢迎？”这个非常接地气的问题。众多周知，热爱技术的人，大多社交能力偏弱，他们时常沉浸在代码的世界里，而处于复杂的社会环境中，社交能力却是个非常重要的能力，而且从事工作的过程中更多的是需要协作和沟通。“书呆子”这个名词本身是一种歧视性的标签，作者更想让作为“书呆子”的当事人们理解这并不是他们的错，反过来他们更专注于做一些其它事情，作者视这些人为“聪明人”。不局限于 IT 行业，各行各业都存在“书呆子”这类人，这些人不应该因为被贴上标签而自卑，产生心理困扰，他们在做非常出色的事情。但话说回来，为了在复杂的社会环境中更好的生存，适当的培养自己的社交能力也是值得考虑的一方面。</p><blockquote><p>因为黑客更像创作者，而不是科学家，所以要了解黑客，不应该在科学家身上寻找启示，而是应该观察其他类型的创作者。</p></blockquote><p>接下来，更有趣的是，探讨的主题就是本书的名称“黑客与画家”。作者通过自己的学习经历，将“黑客”与“画家”做类比，他们拥有很多共同点，是创作者而不是科学家，也为普通大众了解“黑客”群体提供了一个比较易懂的视角。这部分的核心思想在于理解“黑客”的本质，从而理解如何做一个优秀的黑客，作者探讨了很多点，下面就举两个我比较印象深刻的点来看看。</p><blockquote><p>普通黑客与优秀黑客的所有区别之中，会不会“换位思考”可能是最重要的单个因素。有些黑客很聪明，但是完全以自我为中心，根本不会设身处地为用户考虑。这样的人很难设计出优秀软件，因为他们不从用户的角度看待问题。</p></blockquote><p>很多技术爱好者容易陷入对技术的狂热中，却忽视了技术本质上只是个工具，最终的目的还是用好的工具创作好的作品。</p><blockquote><p>黑客就像画家，工作起来是有心理周期的。有时候，你有了一个令人兴奋的新项目，你会愿意为它一天工作 16 个小时。等过了这一阵，你又会觉得百无聊赖，对所有事情都提不起兴趣。为了做出优秀的工作，你必须把这种心理周期考虑在内。只有这样，你才能根据不同的事情找出不同的应对方法。</p></blockquote><p>这个对于搞技术的很多人也许会感同身受，如何自我调节把握这种心理周期也是一个需要提升的方面。</p><blockquote><p>优秀作品往往来自于其他人忽视的想法，而最被忽视的想法就是那些被禁止的思想观点。</p></blockquote><p>再接下来，作者阐述了一个观点，优秀的人应该有独立思考的能力，保持质疑，敢于打破传统思维，而不是随大流，被禁锢了思想。</p><blockquote><p>只有深入了解当前的技术，黑客才能构想下一代技术。</p></blockquote><p>最后，作者说明“黑客”有叛逆的显著特点，而正是因为叛逆，才更加优秀，叛逆并不总是坏的。这里用黑客比较关心“版权法”的现象举了一个例子，黑客们反抗“版权法”，认为其阻止了技术的进步和变革，作者的观点有没有道理我们不得而知。但经过时间的验证，曾经对开源嗤之以鼻的微软如今全力拥抱开源软件，说明了什么问题呢？如今，开源软件已成为 IT 世界的主流，很多优秀的软件也源于开源社区，开源是全世界优秀黑客们智慧的结晶。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="用技术影响世界">用技术影响世界<a class="hash-link" href="#用技术影响世界" title="标题的直接链接">​</a></h2><p>第二部分，篇幅比较大，话锋一转，作者讲到了互联网软件的开发模式与传统软件的开发模式的不同，从多个方面进行了论述，例如，用户使用便利程度、软件发布流程、软件 bug 修复流程、不同方式的客户支持、关注用户、盈利模式等等。</p><blockquote><p>我家附近，一辆汽车的保险杠贴着一张粘纸，上面写着“太麻烦，不如死”(death before inconvenience)。大多数人，在大多数时候，总是选择最省事的做法。如果互联网软件能够击败桌面软件，一定是赢在更方便这一优势上。无论从用户的角度还是从开发者的角度来看都是如此。</p><p>互联网软件带来的最大变化之一，就是软件发布方式的改变。对于桌面软件来说，发布新版本是一个很痛苦的过程，整个公司不得不使尽全力，满头大汗地挤出一大块巨型代码。互联网软件则完全不同，就像你写给自己用的程序一样，修改起来很方便。软件的发布过程可以分解为一系列的渐进式修改，而不是猛地推出一个大幅变动的版本。</p><p>能够即时发布软件，对开发者是一个巨大的激励。步行上班途中，我经常会想哪些地方还需要变动，然后当天就予以实现。如果软件的新版本要等到一年后才能发布，我就会把大部分新构思束之高阁，至少过上一段时间再来考虑。</p><p>如果公开收取软件的订阅费，而不是让用户购买软件的所有权，操作起来会更自然、更简便。“订报纸模式”正是互联网软件天然的收费模式。</p></blockquote><p>作者在思考互联网软件这方面笔墨较多，其实这部分也是非常值得 IT 从业者学习的一部分。</p><p>开篇算是对互联网时代背景的一个介绍，接下来作者着重论述了在这个时代背景下为何创业是最好的选择、也是比较有意义的事，作者对个人工作方面有很多的讨论，值得思考。比如，作为个人应该努力的工作，才会有超出预期的回报，但在一个大的团队中其实个人很容易被淹没，个人的努力和贡献很难能体现出来，作者这个时候提出了一个很有意义的论点，个人所做的工作应该具备可测量性和可放大性。</p><blockquote><p>你想更努力地工作，但是你的工作与其他许多人的工作混杂在一起，这样就产生了问题。在大公司中，个人的表现无法单独测量，公司里其他人会拖累你。</p><p>你的职位产生的业绩，应该是可测量的，否则你做得再多，也不会得到更多的报酬。此外，你还必须有可放大性，也就是说你做出的决定能够产生巨大的效应。</p></blockquote><p>后续，作者也给出了一个答案，可测量性即小团队，可放大性即高科技，这一点在现在来看也是比较容易理解的。</p><p>作者对贫富差距产生的原因着墨较多，目的就是为了论证掌握技术/能力的人会有更多产出，也是贫富差距产生的核心原因，在我看来，作者的观点有失偏颇，太过片面，有点为了论证论点而刻意去这样说的感觉，我在这里不做太多论述。</p><p>最后，作者提出作为创作者、设计者要有自己的品味，其实通俗一点的说就是要对自己所做的事情，所在的领域的相关事务有自己的思考和看法，这样才能找到改进的地方，才能找到所谓的切入点。</p><blockquote><p>单单是无法容忍丑陋的东西还不够，只有对这个领域非常熟悉，你才可能发现哪些地方可以动手改进。你必须锻炼自己。只有在成为某个领域的专家之后，你才会听到心里有一个细微的声音说：“这样解决太糟糕了！一定有更好的选择。”不要忽视这种声音，要培育它们。优秀作品的秘诀就是：非常严格的品味，再加上实现这种品味的能力。</p></blockquote><p>第二部分的核心主题在我看来是作者呼吁 IT 从业者抓住互联网时代的风口，学会如何创造财富，如何利用自己所掌握的技术改变世界，同时为自己赢得财富。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="黑客文化">黑客文化<a class="hash-link" href="#黑客文化" title="标题的直接链接">​</a></h2><p>最后一部分，作者介绍了黑客文化，他们关注的是什么？作者选择从编程语言的视角试图帮助大家理解黑客文化。黑客与计算机打交道，就像人与人沟通一样，必然会存在一个媒介，编程语言则建立了黑客与计算机机器之间的桥梁。编程语言对于黑客来说是一种工具，而选择趁手、好用的工具则是黑客们最为关注的，这也是编程语言从汇编语言到低级语言再到高级语言不断演进的原因，而最为关键的是，是黑客们这个群体自身推动了这个演变的过程。如今，世界上的编程语言百花齐放，凸显了黑客群体们强大的创造力。</p><blockquote><p>如果你长期使用某种语言，你就会慢慢按照这种语言的思维模式进行思考。所以，后来当你遇到其他任何一种有重大差异的语言，即使那种语言本身并没有任何不对的地方，你也会觉得它极其难用。缺乏经验的程序员对于各种语言优缺点的判断经常被这种心态误导。</p><p>语言设计者之间的最大分歧也许就在于，有些人认为编程语言应该防止程序员干蠢事，另一些人则认为程序员应该可以用编程语言干一切他们想干的事。</p><p>另一方面，许多项目是无所谓选择哪一种编程语言，反正不同的语言都能完成工作。一般来说，条件越苛刻的项目，强大的编程语言就越能发挥作用。但是，无数的项目根本没有苛刻条件的限制。大多数的编程任务可能只要写一些很小“胶水程序”，然后再把这些小程序连起来就行了。</p><p>编程语言不是数学定理，而是一种工具，为了便于使用，它们才被设计出来。所以，设计编程语言的时候必须考虑到人类的长处和短处，就像设计鞋子的时候必须符合人类的脚型。如果鞋子穿上去不舒服，无论它的外形多么优美，多么像一件艺术品，你也只能把它当作一双坏鞋。</p><p>为了写出优秀软件，你必须同时具备两种互相冲突的信念。一方面，你要像初生牛犊一样，对自己的能力信心万丈；另一方面，你又要像历经沧桑的老人一样，对自己的能力抱着怀疑态度。</p></blockquote><p>以上是摘抄的一些觉得比较有意义的论述，总得来说，黑客们不仅使用工具，还会自己改进工具、创造新的工具，自我驱动能力非常的强，也具备很强的设计能力。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>这本书的篇幅还是比较长的，其实可以粗略的读，多读几遍便会有更深刻的理解。为什么说这本书值得有一定经验的 IT 从业者读呢，因为书中有很多知识和概念可能对于一个没有多少经验的人来说是较难理解的，另一方面，经验丰富的人，思考问题的角度应该也会多一些，看待一个事情也不会过于片面和偏激。归根结底，用代码创造财富的群体们是如何理解自己的呢？也许这个更有意义。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="书">书<a class="hash-link" href="#书" title="标题的直接链接">​</a></h2><ul><li>《黑客与画家》- <!-- -->[美]<!-- -->格雷厄姆 著，阮一峰 译</li></ul>]]></content:encoded>
            <category>生活</category>
            <category>阅读</category>
            <category>计算机技术</category>
        </item>
        <item>
            <title><![CDATA[使用 Jest 和 Puppeteer 构建 Web 自动化测试平台]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/tools-web-fee-test-with-jest-puppeteer</link>
            <guid>/Computer-Technology/Web/tools-web-fee-test-with-jest-puppeteer</guid>
            <pubDate>Sun, 15 Aug 2021 14:54:00 GMT</pubDate>
            <description><![CDATA[谷歌发布的 Puppeteer 工具和脸书发布的 Jest 测试工具为 Web 端到端测试提供了极大的便利，这里记录了如何使用它们构建一个 Web 自动化测试平台。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2021-08-15 14:54:00 </em></p></blockquote><p>测试为软件的稳定和完善提供了必要的支持，Web 前端开发领域相比于做单元测试，端到端测试更有意义和价值。谷歌发布的 Puppeteer 工具和脸书发布的 Jest 测试工具为 Web 端到端测试提供了极大的便利，这里记录了如何使用它们构建一个 Web 自动化测试平台。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="技术预研">技术预研<a class="hash-link" href="#技术预研" title="标题的直接链接">​</a></h2><p>在本地跑通测试流程是首要解决的问题，在日常项目的脚手架中已经做了很多这方面的工作，而且从头开始来做也没有太大难度，基本上按官方文档步骤来做即可。直接使用 Jest 和 Puppeteer 做测试也是可以的，不过要繁琐很多，借助 <code>jest-puppeteer</code> 这个 npm 包可以简化很多流程，测试代码也要简略的多。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="需求分析">需求分析<a class="hash-link" href="#需求分析" title="标题的直接链接">​</a></h3><p>Web 端到端自动化测试平台要求用户可以通过 Web UI 上传测试脚本代码到服务器，而服务器可以定时运行上传的测试脚本获取结果日志并存档，通过对整个流程分析可以确定有以下几个技术难点：</p><ul><li>Jest 和 Puppeteer 的服务端测试运行环境构建（版本管理）</li><li>用户测试脚本不可信，需要沙箱机制</li><li>数据传输涉及到 <code>Buffer</code>，用 HTTP 还是 WebSocket</li><li>脚本定时运行的任务调度</li></ul><p>搞清楚需求和相应的技术难点后，可以先看看业内有没有解决方案可以参考。</p><p><img loading="lazy" src="https://github.com/wang1212/static-resources/blob/main/images/web-test-with-jest-puppeteer_2021-08-15_16-42-05.png?raw=true" alt="Web 端到端自动化测试平台功能需求.png" class="img_ev3q">
Web 端到端自动化测试平台功能需求</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="市场调研">市场调研<a class="hash-link" href="#市场调研" title="标题的直接链接">​</a></h3><p>根据调研的情况来看，在好几年前已经有很多人在做类似的方案，但是很少有成熟的方案，仅限于本地测试（玩具项目），分析一方面原因是当时各个技术都不太成熟，另一方面当时端到端测试愿意开源的也不多。但在调研过程中收获还是不少的，有很多方面也印证了我对技术架构的构想。下面来简单的介绍一下业内可供参考的方案，有些是完整的方案，有些则仅涉及某些环节。</p><p>首先，解决如何构建 Jest 和 Puppeteer 的服务端测试运行环境（我称之为 Test Runner Server）。服务器的环境大多都是 Linux 系统，Puppeteer 官方文档也提供了如何在 Linux 中安装和使用，事实是要比在本地的 Windows 环境中麻烦得多，当然这个麻烦也源于另一个事实：<a href="https://github.com/puppeteer/puppeteer/#q-why-doesnt-puppeteer-vxxx-work-with-chromium-vyyy" target="_blank" rel="noopener noreferrer">Puppeteer 版本和 Chromium 的版本严格相关</a>。那么问题又变得复杂了起来，如何构建支持多个 Puppeteer 版本的测试运行环境？隔离多个版本测试运行环境之间的影响可以利用虚拟机，在如今云的时代，Docker 则成了最佳选择，官方文档也有提及，谷歌官方也用 Docker 构建了 Puppeteer 的测试运行环境作为 CI/CD 的流程。在社区也找到了有人维护的 Puppeteer 的 Docker 镜像：</p><blockquote><p><a href="https://github.com/buildkite/docker-puppeteer" target="_blank" rel="noopener noreferrer">https://github.com/buildkite/docker-puppeteer</a></p></blockquote><p>由于我们用的是 <strong>node:lts-alpine</strong> 基础镜像，所以根据 <a href="https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#running-on-alpine" target="_blank" rel="noopener noreferrer">Puppeteer 官方文档</a>安装了相应依赖，但依赖包在国外所以更换了镜像源，这里要注意的是刚开始换的是 HTTP 源，发现安装总是失败，最终换了 HTTPS 源后，安装几秒完成：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># https://mirrors.ustc.edu.cn/help/alpine.html</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN </span><span class="token function" style="color:#d73a49">sed</span><span class="token plain"> -i </span><span class="token string" style="color:#e3116c">'s/http:\/\/dl-cdn.alpinelinux.org/https:\/\/mirrors.ustc.edu.cn/g'</span><span class="token plain"> /etc/apk/repositories</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>安装好环境后，运行测试又出现了问题，参考<a href="https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#running-on-alpine" target="_blank" rel="noopener noreferrer">官方文档</a>在启动参数中添加了 <code>--no-sandbox</code> 参数后在 <strong>root</strong> 用户下测试可以运行成功，但因为安全原因，很少会在 docker 中使用 root 用户运行程序，换成非 root 用户运行测试也是成功的。但是，官方文档提到在 root 用户环境下 必须使用<code>--no-sandbox</code> 禁用沙箱，而且是有安全风险的，想着在非 root 用户环境下去掉该启动参数应该就行了，发现测试会运行失败，根据官方文档的解决方案和调研，发现很多人都遇到该问题，而且最终没有很好的解决方案，暂时就把这个问题搁置了。</p><p>接下来，第二个技术难点在于运行用户提交的测试脚本是有风险的，所以在运行测试脚本代码时必须有沙箱机制保证一定的安全。刚开始发现社区有人使用了 <code>vm2</code> 这个 npm 包来解决运行不可信任代码的安全问题，而且恰好也有人用该模块来尝试结合 Docker 在云端运行 puppeteer 测试：</p><blockquote><p><a href="https://github.com/ebidel/try-puppeteer" target="_blank" rel="noopener noreferrer">https://github.com/ebidel/try-puppeteer</a></p></blockquote><p>但最终发现这并非最佳的解决方案，而且在编码上略显复杂，服务端代码与测试运行环境在同一个系统环境下，有安全风险，也耦合严重。所以，为了实现可以将多个版本的测试运行环境隔离，同时降低安全风险，采取将测试运行环境与后端服务拆分，采用 Node Server + Test Runner Server 的技术架构。这样的好处是，如果测试任务较多，可以很方便的横向扩展 Test Runner Server 节点，不同的节点也可以部署不同版本的 Puppeteer，方便后期维护迭代过程中不断升级测试运行环境又不影响已有的测试任务运行。</p><p>这个过程中也了解了 Jest 运行测试的底层原理，实际上 Jest 运行测试时为了隔离上下文环境也利用了 Node.js 的核心模块 <code>vm</code>。</p><blockquote><p><a href="https://cpojer.net/posts/building-a-javascript-testing-framework" target="_blank" rel="noopener noreferrer">https://cpojer.net/posts/building-a-javascript-testing-framework</a></p></blockquote><p>接下来就是数据传输通信的协议选择，通常我们会用 HTTP(S) 的常规方案，但是经过分析，测试代码用户可能以文件的形式提交，后端服务需要将测试代码保存成文件，后续又需要把测试代码文件发送到 Test Runner Server 运行测试，最终又需要把运行日志发送到后端服务保存成文件，涉及到 <code>Buffer</code> 数据的传输，还有可能需要传输实时的日志到客户端（Web UI），看起来选用 WebSocket 是再合适不过了。</p><p>最后就是定时运行测试脚本的任务调度了，经过调研发现成熟的方案也有很多，包括持久化，最终决定采用类 <code>Cron</code> 的方案。</p><p>在调研过程中，还发现一篇文章介绍了利用 <code>puppeteer-cluster</code> 这个 npm 包来搭建测试集群完成性能任务，对于我来说也很有参考价值。</p><blockquote><p><a href="https://stackchat.com/blog/puppeteer-cluster-performance-testing" target="_blank" rel="noopener noreferrer">https://stackchat.com/blog/puppeteer-cluster-performance-testing</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="技术架构">技术架构<a class="hash-link" href="#技术架构" title="标题的直接链接">​</a></h3><p>在经过详细的市场调研后，最终确定了一个比较理想和完整的系统技术架构。</p><p><img loading="lazy" src="https://github.com/wang1212/static-resources/blob/main/images/web-test-with-jest-puppeteer-architecture_2021-08-15_18-20-03.png?raw=true" alt="Web 端到端自动化测试平台系统技术架构.png" class="img_ev3q">
Web 端到端自动化测试平台系统技术架构</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="系统实现">系统实现<a class="hash-link" href="#系统实现" title="标题的直接链接">​</a></h2><p>完成技术预研后，就需要进行实际的编码实现了，在本地开发过程中为了方便和不污染本地环境，也是直接将 Puppeteer 安装在 Docker 内运行一个 Runner Server 来进行开发。目前，仅仅是完成了一个测试 Demo，具备用户在 Web UI 可以编辑代码进行提交直接运行和查看运行结果日志，以及提交测试代码创建任务，Node Server 服务负责任务调度定时运行测试脚本，并管理测试日志，Web UI 浏览任务列表和历史测试日志的基本功能。Web UI 与 Node Serve 的 WebSocket 通信使用了 <code>socket.io</code> npm 包，因为其继承了 <code>Event</code> 模块，可以很方便的管理不同类型的事件，比起在 <code>message</code> 事件的传输数据中维护额外通信类型要方便的多，而且也提供了开箱即用的鉴权功能；Node Server 与 Test Runner Server 的 WebSocket 通信使用了 <code>ws</code> npm 包，因为其通信较为简单，而该模块也足够简单轻量；任务调度则使用的 <code>node-schedule</code> npm 包，其提供了类似 <code>Cron</code> 的定时任务机制，但是其无法持久化，目前也是仅作为测试 Demo 的方案。</p><p>以下是 Test Runner Server 的 <strong>Dockerfile</strong>：</p><div class="language-dockerfile codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dockerfile codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># see docs: https://docs.docker.com/engine/reference/builder/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM node:lts-alpine</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># https://mirrors.ustc.edu.cn/help/alpine.html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN sed -i 's/http:\/\/dl-cdn.alpinelinux.org/https:\/\/mirrors.ustc.edu.cn/g' /etc/apk/repositories</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># install dependencies</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN apk update \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &amp;&amp; apk add --no-cache --virtual .build-deps curl \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &amp;&amp; curl -sf https://gobinaries.com/tj/node-prune | sh \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &amp;&amp; apk del .build-deps</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># https://github.com/nodejs/docker-node/blob/main/docs/BestPractices.md#handling-kernel-signals</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># https://github.com/krallin/tini#using-tini</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Add Tini</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN apk add --no-cache tini</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ENTRYPOINT ["/sbin/tini", "--"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># puppeteer start --------------------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#running-on-alpine</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># https://github.com/puppeteer/puppeteer#q-which-chromium-version-does-puppeteer-use</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN apk add --no-cache \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      chromium \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      nss \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      freetype \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      harfbuzz \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ca-certificates \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ttf-freefont</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Tell Puppeteer to skip installing Chrome. We'll be using the installed package.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># # Puppeteer v6.0.0 works with Chromium 89.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># RUN yarn add puppeteer@6.0.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># # Add user so we don't need --no-sandbox.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># RUN addgroup -S pptruser &amp;&amp; adduser -S -g pptruser pptruser \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#     &amp;&amp; mkdir -p /home/pptruser/Downloads /app \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#     &amp;&amp; chown -R pptruser:pptruser /home/pptruser \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#     &amp;&amp; chown -R pptruser:pptruser /app</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># # Run everything after as non-privileged user.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># USER pptruser</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># puppeteer end --------------------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ENV NODE_ENV=production</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ENV WS_RUNNER_PORT=8081</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EXPOSE 8081</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WORKDIR /home/node/app</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COPY package.json package-lock.json ./</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN npm ci --production --registry=https://registry.npm.taobao.org/ &amp;&amp; npm cache clean --force</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN node-prune</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COPY . .</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN chown -R node:node /home/node/app/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># https://github.com/nodejs/docker-node/blob/main/docs/BestPractices.md#non-root-user</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">USER node</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># https://github.com/nodejs/docker-node/blob/main/docs/BestPractices.md#cmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CMD [ "node", "index.js" ]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此外，在 Node 项目中我们采用了 <code>ECMAScript modules</code> 编写整个项目代码，而 <code>jest-puppeteer</code> npm 包不支持 ES Module，最终发现可以配置环境变量指定配置文件来解决：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token assign-left variable" style="color:#36acaa">JEST_PUPPETEER_CONFIG</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">jest-puppeteer.config.cjs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>而且，目前 Jest 默认也是以 CommonJS 方式运行的，需要额外指定 Node 参数（flag）才行，这个官方文档也有提及：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">node</span><span class="token plain"> --experimental-vm-modules node_modules/.bin/jest</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其次为了日志管理和处理的方便，生成结构化数据才是比较理想的，可以通过 Jest 的 <code>--json</code> 命令行选项将其输出的日志由纯文本更改为 JSON 格式；加上 <code>--passWithNoTests</code> 选项可以保证没有测试可运行时不报错。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="其它参考资源">其它参考资源<a class="hash-link" href="#其它参考资源" title="标题的直接链接">​</a></h2><ul><li><a href="https://jestjs.io/" target="_blank" rel="noopener noreferrer">https://jestjs.io/</a></li><li><a href="https://developers.google.com/web/tools/puppeteer/" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/tools/puppeteer/</a></li><li><a href="https://github.com/smooth-code/jest-puppeteer" target="_blank" rel="noopener noreferrer">https://github.com/smooth-code/jest-puppeteer</a></li><li><a href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Cron</a></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>工具</category>
            <category>测试</category>
            <category>Web</category>
            <category>Jest</category>
            <category>Puppeteer</category>
        </item>
        <item>
            <title><![CDATA[Web 前端性能优化：核心概念与指标]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/web-performance-core-concepts</link>
            <guid>/Computer-Technology/Web/web-performance-core-concepts</guid>
            <pubDate>Mon, 19 Jul 2021 00:51:00 GMT</pubDate>
            <description><![CDATA[在一些较为复杂的 Web 应用中可能会出现性能瓶颈，导致用户体验急剧下降，做优化之前更应该了解一下相关的核心概念，从而在出问题时确定优化路径。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2021-07-24 21:56:00 </em></p></blockquote><p>说到 Web 的性能优化，可能很多时候我们采取了一些措施，看到了肉眼可见的改进，如果我们可以对其进行测量，确定我们改进的效率（百分比）是不是会更有意义？换句话说，如果我们了解性能瓶颈可能发生的位置，衡量用户体验好坏的指标，做到实时追踪性能变化，我们是不是可以更迅速的采取优化措施？在应用上线前，我们就可以做一些低成本而有高收益的优化工作，进一步提升用户体验。</p><p>所以，这里主要介绍一下 Web 性能相关的核心概念和相关指标。</p><p>谷歌作为力推 Web 技术的科技巨头，不仅提供了出色的 Chrome DevTools，更是贡献了高质量的开发文档，为业界引进了众多先进的理念，先来拜读一下下面这篇文章，搞明白为何我们需要对 Web 网站做极致的优化？</p><blockquote><p><a href="https://web.dev/why-speed-matters/" target="_blank" rel="noopener noreferrer">Why does speed matter?</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="rail-性能模型">RAIL 性能模型<a class="hash-link" href="#rail-性能模型" title="标题的直接链接">​</a></h2><p>RAIL 是一个由谷歌提出的以用户为中心的性能模型，将用户体验分解为关键操作，帮助开发者为每个操作定义性能目标。RAIL 代表</p><p>Web 应用程序生命周期的四个方面：</p><ul><li>Response（50 毫秒内处理事件）</li><li>Animation（10 毫秒内生成一帧）</li><li>Idle（最大化空闲时间）</li><li>Load（交付内容并在 5 秒内可交互）</li></ul><p>括号中表示推荐的性能目标，是我们在开发 Web 应用时务必要满足的，这样才能保证良好的用户体验。<strong>RAIL 性能模型本质上是提出了一个简单而有效的衡量性能的方法，并给出一个推荐的目标，至于可能发生性能瓶颈的关键点和如何去达到优化目标则没有提及太多。</strong></p><blockquote><p><a href="https://web.dev/rail/" target="_blank" rel="noopener noreferrer">https://web.dev/rail/</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="关键渲染路径">关键渲染路径<a class="hash-link" href="#关键渲染路径" title="标题的直接链接">​</a></h2><p>关键渲染路径（Critical rendering path）是一个核心且基础的概念，描述了浏览器将 HTML、CSS 和 JavaScript 转换为屏幕上的像素所经历的一系列步骤。<strong>其影响最大的是页面首次加载的渲染性能，其次是页面复杂交互的渲染性能。</strong></p><p>简单的来说，关键渲染路径主要为以下几个步骤：</p><ul><li>下载完 HTML 文件开始解析，<strong>构建文档对象模型（DOM）和 CSS 对象模型（CSSOM）</strong>；</li><li>将 DOM 和 CSSOM 树<strong>合成渲染树（Render tree）</strong>，DOM 代表内容，CSSOM 代表样式；</li><li>构建好渲染树，开始<strong>布局（Layout ）计算</strong>，确定元素在页面上的位置和尺寸，以及元素之间的位置，输出“盒模型”；</li><li>完成布局计算后，就可以将渲染树中的每个节点转换成屏幕上的实际像素，即<strong>“绘制（Paint）”或者“光栅化（Rasterization）”</strong>。</li></ul><p>理解了有哪几个步骤之后就可以围绕这些来做优化了，各个步骤具体的内容以及可能带来的性能瓶颈看下方文档更能容易理解一些，在这里不再赘述。</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path</a></p><p><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/fundamentals/performance/critical-rendering-path</a></p></blockquote><p>能深刻理解关键渲染路径的概念，就会对 Web 性能优化有了一个比较清晰的认识，因为页面完成初始化后，后续用户交互造成的页面结构布局发生的变化主要就体现在<strong>布局（Layout ）计算</strong>与<strong>重绘（Repaint）</strong>这两个方面，性能瓶颈也由此产生。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="pixel-pipeline">pixel pipeline<a class="hash-link" href="#pixel-pipeline" title="标题的直接链接">​</a></h2><p>现代 Web 网站或者应用具备丰富的动态交互能力，这就意味着页面是随时间和用户交互触发在动态变化，其中某一时刻的状态我们称之为帧（frame），多个连续的帧状态组合在一起就实现了动态效果（动画）。而要保证交互的流畅性，我们就得了解帧率（frame rate）这个概念，它表示连续帧的变化速率，尽可能与显示设备的刷新率（通常为 60 次/秒）保持一致，理想情况下每一帧花费的时间为 16 毫秒左右（1 秒 / 60 = 16.66 毫秒），实际上由于系统有额外的工作要做，时间会更短。<strong>为了优化帧率达到理想状态，我们需要了解浏览器在每一帧都涉及哪些工作，即像素管道（pixel pipeline）</strong>：</p><ul><li>执行 JavaScript</li><li>样式计算（Style）</li><li>布局（Layout）</li><li>绘制（Paint）</li><li>合成（Composite）</li></ul><p>以上步骤就是每一帧所要做的工作，优化的手段就是降低每个步骤的耗时。可以看出，实际上这是关键渲染路径中提到的布局与重绘更细化的表示。不过值得注意的是，<strong>并不是每一帧都要历经以上所有的步骤，在某些情况下可以跳过某些步骤</strong>，这就给了我们优化帧率的一个突破口。详细的内容查看下面谷歌开发者文档，图文介绍直观易懂，还有参考文档也值得收藏。</p><blockquote><p><a href="https://developers.google.com/web/fundamentals/performance/rendering#the_pixel_pipeline" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/fundamentals/performance/rendering#the_pixel_pipeline</a></p><p><a href="https://csstriggers.com/" target="_blank" rel="noopener noreferrer">https://csstriggers.com/</a></p><p><a href="https://gist.github.com/paulirish/5d52fb081b3570c81e3a" target="_blank" rel="noopener noreferrer">https://gist.github.com/paulirish/5d52fb081b3570c81e3a</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="动画性能">动画性能<a class="hash-link" href="#动画性能" title="标题的直接链接">​</a></h3><p>谈到帧率的时候，我们很容易会想到动画，60 FPS（frame per second）是实现动画的一个核心性能目标。实现动画有两种方式：CSS 和 JavaScript。</p><p>CSS 实现动画较为简单，一般来说性能也最佳，有几个值得注意的地方：</p><ul><li>尽量用 <code>transform</code>（3d）和 <code>opacity </code> 实现动画，在大多数渲染引擎中它们<strong>不会触发布局和绘制</strong></li><li>可以利用 <code>will-change</code>（或者 <code>translateZ</code>）CSS 属性来<strong>触发创建新的 GPU 层，优化性能，但不要滥用</strong></li><li><strong>减少绘制区域</strong>和<strong>降低绘制的复杂性</strong></li></ul><p>而利用 JavaScript 实现动画灵活性更大，也能实现更复杂的动画效果，也有几个需要注意的地方：</p><ul><li>用 <code>requestAnimationFrame</code> 实现动画，避免使用 <code>setTimeout</code> 或 <code>setInterval</code></li><li>避免发生<strong>强制同步布局</strong>和<strong>布局抖动</strong></li><li>对 JS 处理函数进行<strong>去抖动</strong>和<strong>节流</strong>优化</li><li>可以把复杂的 JS 计算放入 <code>Web Worker</code> 线程执行</li></ul><p>以上只是对一些核心要点的总结，具体的内容查看下列文章进行了解。</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Animation_performance_and_frame_rate" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/Performance/Animation_performance_and_frame_rate</a></p><p><a href="https://developers.google.com/web/fundamentals/performance/rendering/simplify-paint-complexity-and-reduce-paint-areas" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/fundamentals/performance/rendering/simplify-paint-complexity-and-reduce-paint-areas</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/Performance/CSS_JavaScript_animation_performance" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/Performance/CSS_JavaScript_animation_performance</a></p><p><a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution</a></p><p><a href="https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing</a></p><p><a href="https://developers.google.com/web/fundamentals/performance/rendering/debounce-your-input-handlers" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/fundamentals/performance/rendering/debounce-your-input-handlers</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="web-vitals">Web Vitals<a class="hash-link" href="#web-vitals" title="标题的直接链接">​</a></h2><p>Web Vitals 是谷歌提出的一项计划，用来量化现代网站的用户体验，是对网站性能的一种侧面但又直接有效的反映。换句话说，谷歌对纷繁复杂的性能指标进行了综合分析，最终抽象出了 Web Vitals 所包含的多个简化指标。其中最被重视的有三个指标，称为 <strong>Core Web Vitals</strong>，也就是核心指标：</p><ul><li>Largest Contentful Paint (LCP)：测量加载性能；</li><li>First Input Delay (FID)：测量交互性；</li><li>Cumulative Layout Shift (CLS)：测量视觉稳定性。</li></ul><p><strong>核心指标更多的反映的是网站初始化加载过程的用户体验（性能），</strong>谷歌作为搜索巨头，其提出的 Web Vitals 主要目的是为搜索业务服务。其余指标也主要以测量加载性能为主，算是作为核心指标的一种辅助决策工具。</p><p>当然，谷歌不仅提出了分析指标，还提出了优化方案，以及提供了众多工具，详细内容查看下方官方文档即可。</p><blockquote><p><a href="https://web.dev/vitals/" target="_blank" rel="noopener noreferrer">https://web.dev/vitals/</a></p><p><a href="https://github.com/GoogleChrome/web-vitals" target="_blank" rel="noopener noreferrer">https://github.com/GoogleChrome/web-vitals</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="布局偏移ls">布局偏移（LS）<a class="hash-link" href="#布局偏移ls" title="标题的直接链接">​</a></h2><p>累积布局偏移（Cumulative Layout Shift，CLS）作为核心指标之一，其特殊的是在页面初始化完成后也可以继续<strong>追踪用户交互过程中的布局偏移（Layout Shift，LS）现象</strong>。</p><p>如何理解布局偏移现象？最典型的例子就是，当用户打开一个页面向下滚动过程中遇到一个还未加载完成的图片资源（此时图片没有高度），继续向下滚动时图片加载完成的瞬间页面高度被撑开，用户就会有瞬间的页面下坠感，而这种感觉会随着图片高度的大小成正比增长。有时候我们也称之为“页面抖动”，其对用户体验带来巨大的伤害，必须被重视。</p><p>CLS 相关的详细内容阅读下面的文章了解即可，文末也对如何改进 CLS 问题提供了一些建议。虽然目前提供了一些可以用来测量 LS 的 API，但终究还是调试起来不方便，好消息是 Chrome 88 版本在 DevTools 中加入了对 LS 现象的测量功能，查看下面第二篇文章了解。</p><blockquote><p><a href="https://web.dev/cls/" target="_blank" rel="noopener noreferrer">https://web.dev/cls/</a></p><p><a href="https://developer.chrome.com/blog/new-in-devtools-88/#web-vitals" target="_blank" rel="noopener noreferrer">https://developer.chrome.com/blog/new-in-devtools-88/#web-vitals</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="缓存">缓存<a class="hash-link" href="#缓存" title="标题的直接链接">​</a></h2><p>缓存（Cache）对 Web 应用是至关重要的，因为 Web 应用对网络状况的好坏异常敏感，利用缓存可以降低网络波动带来的用户体验下降的影响。</p><p>Web 应用不像原生应用程序那样，用户安装到本地后，后续使用大部分资源将直接从本地加载，不受网络状况的影响；而 Web 应用在用户每一次使用时所有的资源都必须重新从网络获取，这就导致过于依赖网络状况，不过利用缓存我们可以做大量的优化工作，根据 Web 应用的生命周期来划分，缓存也可以分为以下几类：</p><ul><li>HTTP 缓存：请求缓存，主要依赖于浏览器客户端（<code>Cache-Control</code> 和 <code>Expires</code>）</li><li>版本缓存：利用 webpack 等打包工具对特定版本的静态资源做长期缓存策略</li><li>数据缓存：有一系列 API 提供了在客户端进行临时或者持久化的数据缓存（例如 <code>localStorage</code>、<code>sessionStorage</code>、<code>indexedDB</code> 等）</li></ul><p>当然，以上列举的只是一些典型的缓存手段，针对不同的场景可以灵活运用多种缓存策略做优化。</p><blockquote><p><a href="https://developers.google.com/web/fundamentals/performance/get-started/httpcaching-6" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/fundamentals/performance/get-started/httpcaching-6</a></p><p><a href="https://web.dev/http-cache/" target="_blank" rel="noopener noreferrer">https://web.dev/http-cache/</a></p><p><a href="https://developers.google.com/web/fundamentals/performance/webpack/use-long-term-caching" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/fundamentals/performance/webpack/use-long-term-caching</a></p><p><a href="https://developers.google.com/web/fundamentals/instant-and-offline/web-storage" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/fundamentals/instant-and-offline/web-storage</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="渐进式-web-应用">渐进式 Web 应用<a class="hash-link" href="#渐进式-web-应用" title="标题的直接链接">​</a></h2><p>渐进式 Web 应用（Progressive Web Apps，PWAs） 的目标是为跨平台的 Web 网络应用带来类似原生应用程序的用户体验，是一种应用的设计模式。其主要依赖于 <code>Service Worker</code> API 实现资源缓存，在离线的网络状况下也能正常为用户提供部分功能，且能将 Web 应用以类似原生应用的方式安装到用户桌面。一个复杂的 PWA 的资源缓存并不好处理，鉴于此 Chrome 团队开发了 Workbox 工具来简化这部分工作，以帮助开发者更容易的构建和管理 PWA。具体详细内容查看下方文档。</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps</a></p><p><a href="https://web.dev/progressive-web-apps/" target="_blank" rel="noopener noreferrer">https://web.dev/progressive-web-apps/</a></p><p><a href="https://developers.google.com/web/tools/workbox" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/tools/workbox</a></p></blockquote><p>Workbox 工具的缓存策略值得探究，可以作为实现其它缓存方案的思想借鉴。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="prpl-模型">PRPL 模型<a class="hash-link" href="#prpl-模型" title="标题的直接链接">​</a></h2><p>PRPL 模型是一种交互设计模式，目标是让网页加载的更快，其建议：</p><ul><li>（<strong>Push</strong>）预加载或者推送最重要的资源</li><li>（<strong>Render</strong>）初始的路由页面渲染应该尽可能快</li><li>（<strong>Pre-cache</strong>）预缓存后续将要加载的资源</li><li>（<strong>Lazy load</strong>）延迟加载其它路由页面和非关键性资源</li></ul><p>可以说，PRPL 模型是对整个 Web 站点生命周期中核心路径上所做优化的总结，对设计优化的 Web 站点具有指导意义。</p><blockquote><p><a href="https://web.dev/apply-instant-loading-with-prpl/" target="_blank" rel="noopener noreferrer">https://web.dev/apply-instant-loading-with-prpl/</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考资源">参考资源<a class="hash-link" href="#参考资源" title="标题的直接链接">​</a></h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/Performance" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/Performance</a></li><li><a href="https://developers.google.com/web/fundamentals" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/fundamentals</a></li><li><a href="https://web.dev/user-centric-performance-metrics/" target="_blank" rel="noopener noreferrer">https://web.dev/user-centric-performance-metrics/</a></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>性能优化</category>
            <category>核心概念</category>
        </item>
        <item>
            <title><![CDATA[对第一份工作生活的回顾]]></title>
            <link>https://wang1212.github.io/Life/2021-life-work-review</link>
            <guid>/Life/2021-life-work-review</guid>
            <pubDate>Tue, 29 Jun 2021 00:57:00 GMT</pubDate>
            <description><![CDATA[最近换了份工作，进入了新的团队，趁此时回顾一下过去几年的事情。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2021-07-04 15:29:00 </em></p></blockquote><p>最近结束了长达四年的第一份工作，选择了跳槽，进入新的团队适应的还不错。在经历了在线面试，办理离职，再到入职这个过程大概花了将近两个月的时间，入职后近一个月左右时间也没有预想的那么忙，所以这三四个月时间算是不用太考虑公司的事情了，毕竟换个环境所有的东西都得重新开始。换句话说，这也算是个契机，终于能有闲下来的时间了，不免就会想到从毕业到现在经历的很多事情，有了很多新的想法和认知。回顾一下过去这四年的工作生活记录下来，用现在比较流行的词来说就是“复盘”。</p><p>首先，得说说博客这个事情，因为这个东西是从还没毕业就开始写的，而且当时的目标就是希望可以坚持下来，用来记录生活，尤其是技术方面的学习成果。现在回想起来，写博客这方面在过去几年其实做的不够好，至少没有达到预期的中等水平。大学期间为何要开始写博客呢？当时主要还是因为刚接触到开源圈子，那时候流行自建博客站，出于爱折腾的目的就用模板（比如 Hexo）搞了个。发现大家的博客站都花里胡哨的，模板做的一眼就能看出来，而且没有灵活的可定制性，但当时出于技术水平不够所以没有往下想。博客建好之后得有内容才有意思，而且大家当时建博客都是为了引流，希望写的东西能有更多的人看，满足自己的虚荣心，有很多人往博客里面加统计 PV、评论的功能，自己也做了但发现不太感兴趣就放弃了。后续了解到写博客对毕业找工作面试有帮助，这下动力就比较足了，当时基本上把学习过的技术都写成了博客文章记录下来，这本质上也是个好的习惯。工作第一年（ 2017 - 2018 年），写博客这个习惯保持的还是比较好的，虽然没有学校时候写的多了，但工作后写的基本上都是经过实践总结的经验，还是挺有用的，因为到目前为止工作中遇到类似的问题我还会翻看自己的博客文章找解决方案。后来的两年（2019、2020 年）就写的很少了，尤其是 20 年几乎没有怎么写，这还是我翻看自己写的每年工作总结时候发现的。博客文章要坚持写其实不容易，因为很多时候不知道写什么，所以就给自己约定每年总结一下工作历程。20 年的工作总结写的很早，是在 3 月份的时候，而不是年终，当时因为疫情爆发在家闲了一个月，本来是打算换份工作的，疫情打乱了自己的计划，索性就思考了一下自己前三年前端职业的发展历程做了个总结。其实，换工作的想法不是今年（2021 年）才有的，翻看 19 年的工作总结，当时就发现自己遇到了职业阶段性的发展瓶颈。而后由于 20 年带了个较大的项目，做了部分管理工作比较忙碌，全年几乎每周都得加一天班，所以基本没有写博客文章。但回过头来想想，忙碌是一方面原因，本质上还是因为 20 年做的很多工作其实对个人的成长不足，相当于在吃老本，没有比较好的经验产出。让我真正意识到写博客记录有好处的是在准备换工作的面试过程中，三年多的时间里经手过很多项目，然而回忆不起来，尤其是细节问题，导致面试时说到项目相关的方面总说不出来亮点，这其实是比较要命的。最终，写博客这个事情其实本质上是自己记录的一个好习惯，刚开始大家的目的都是为了让别人能看到，但实际上别人看不看得到意义不大，当然能带给别人帮助也还是有一定意义的。希望自己以后还是能坚持下去，养成记录的好习惯。</p><p>第二方面，说说工作吧。本科学习的专业是微电子方面的，也就是我们常说的半导体相关的，实际上我自己是比较喜欢软件方面，比如计算机，但无奈没有报到该专业。在学校的四年期间，对微电子这个行业也有了个初步的了解，半导体是我们国家的超级短板，也是全球核心技术制高点，国家补贴力度还是很大的；但问题是，这个行业花钱是解决不了问题的，缺的是高端人才，而教育则是重中之重，但就我们学校而言，实验设备也是买不起的，放眼全国，开设该专业的同时拥有整套实验设备的学校也不多，985/211 学校也不例外，可见是多么的烧钱，全国做的最好的应该就是复旦大学的微电子学院了。一方面是教育资源稀缺，另一方面就是社会就业环境了。据我所了解，国内做半导体的公司很多，这个产业链大体可以分为 IC 设计 -&gt; 晶圆制造 -&gt; 芯片封测 三个环节，IC 设计和芯片封测我们国内做的还算不错，可以达到国际一流水平，但这个行业技术最核心的就是晶圆制造了，国内在这方面还是较为落后的，比较遗憾的是近几年在这方面商业环境较差，大多类似著名的“汉芯”骗局，国家的大力补贴也没有看到比较可观的结果。IC 设计这方面要做核心岗位都是研究生学历门槛，而封测行业技术含量最低，相应的待遇也最低，整体看下来这个行业对于本科生来说就业还是不容乐观的。在校期间有和学计算机的朋友一起聊过，了解到 Web 前端开发是个新兴的技术岗位，自己下去也了解了下，觉得还不错，比较有兴趣。其实，刚开始自己了解的是 Java Web 的后端开发，不是很感兴趣，后续了解了 Web 前端开发后，决定选定该方向。这个时候大概是处于大三的阶段，开始多花时间了解 Web 前端开发的东西，时常去图书馆借阅计算机书籍。由于身边计算机专业的朋友太少，交流的不多，主要还是靠自己摸索，一年多下来，也就是大四毕业的时候自己的计算机技能不算很优秀，导致找工作遇到了一定的困难，不过，最终还是入职了一家规模较小的公司，也就是我的第一份工作，一干就是将近四年。工作之后，在实践中学习，感觉明显要比在学校进行纯理论的学习成长要快得多。小公司的待遇是相当低的，唯一的好处可能就是一个人干的事情多，接触的东西多，能提升一定的技术广度能力。好在工作期间自己比较努力，待遇每年的提升还算可以，能接近自己预期的中等水平。最后，跳槽在 IT 这个行业其实不是一个敏感话题，一家公司平均任职期只有短短的两年左右，跳槽一次，薪资待遇就可以大涨一次，所以，跳槽实际上也是一个涨薪的途径。今年跳槽是自己已经干了快四年的情况下，还是比较后悔的，一方面面临当下年轻人共同的经济压力，自己的薪资水平勉强才达到中等左右水平，另一方面毕业前四年一直待在小公司，对于自己的职业发展也是相当不利的。自己本身的打算是在去年满三年工作经验的情况下跳槽的，算是个不错的时机，但因为疫情的原因被耽搁到今年，算是遇到了一次天灾吧。</p><p>第三个方面，我觉得还得说一说工作相关的行业。工作之后，大家考虑更多的可能就是自己的职业规划了吧，如何能让自己在工作中更快速的成长，培养自己的核心竞争力。作为从事 Web 前端岗位的我来说，我已经认识到基本的前端开发技能只能算是完成工作必备的基本技能，真正的核心竞争力在于积累行业领域经验，但这也是个难点。对于普通人来说，选择行业是个比较困难的事情，因为大部分人都没有选择的机会。自己从事的第一份工作做的主要是 GIS 行业（通俗的说就是地图相关）的业务，基于多年的了解，这个行业其实前景是非常广阔的，但受国内监管比较严格，所以普通的公司发展会受限。另一方面，根据 to B 和 to C 分别来看，首先 to B 这块的业务目前主要还是以工具型软件或者地图服务为主，稍微核心一点的东西基本都是国外公司做的，门槛还是比较高的；而 to C 这方面其实就应用比较广了，当下的外卖配送、快递配送、地图导航、无人驾驶等等都会用到 GIS 技术，算是作为很多行业或者业务场景下的基础设施应用，所以前面说 GIS 的前景广阔，但问题就是 GIS 并不能直接带来业务收入，必须依赖于一个典型的业务场景，所以 GIS 就会被弱化，简单的来说 to C 这块技术比较简单，脱离业务的情况下 GIS 本身发展非常有限。现在呢，自己从事的算是互联网金融相关的吧，目前还看不到这个行业的前景如何。最后，在工作第五年的情况下，依然还没有确定自己要做的业务方向，是有一点焦虑的，未来还需要在这方面多下功夫，毕竟事关自己的职业发展。</p><p>第四个方面，我想特别的说一说财富管理。相信很多人都知道“余额宝”这个东西，而且觉得比银行活期存款利息划算，但很多人不知道它本质上就是个货币基金而已。前面说过，这几年下来自己有了很多新的想法，认知也发生了变化，体现比较深刻的一方面就是财富管理。都说穷人靠劳动力赚钱，富人拿钱赚钱，很多人可能不以为然，而且也觉得“通货膨胀”、“资产投资”等这些概念都离自己太远，但当你深入到社会当中去，你才发现自己可能是认知不足。就拿年轻人面临的比较大的经济压力“买房”这件事来说，有的人可以很早就进行投资性买房，风口到来房价大幅上涨之后可以不被割韭菜，可能大部分人还是认为那是因为自己以前没钱，但我觉得很多人即便有钱也做不到，还是因为认知水平有限，这里就不再举例说明了。自己在工作第二年的时候，偶然和朋友一起吃饭聊天才知道，信用卡是个非常有用的金融工具，由于认知水平有限觉得负债不好，好在自己对新鲜的东西总会有很大的兴趣，也敢于尝试。尝试之前，还是做了大量的研究的，在真正尝试之后才发觉信用卡确实是个好东西，平时生活能省一笔小钱，遇到事情还是一个不错的金融工具。身边因为有从事财务工作的朋友，平时也有很多沟通，而且自己也特地学了一些经济学相关的知识，此时对负债也有了全新的认识。随着自己认知水平的不断提高，开始接触了理财的东西，才认识到“余额宝”不过就是货币基金，而很多人“余额宝”买的不亦乐乎，却说理财风险太大，这是不是很可笑呢。这几年一直在做基金投资，对股票市场也有了新的认知，每年的收益还算勉强，但也能抵消掉通货膨胀。在这个过程中，也在慢慢培养自己的理财观念，形成自己的投资观，不断优化投资组合，对风险也有了更深刻的认识。不管提升自己的认知水平，家庭财富管理能力也是个必备的能力。总之，我还是比较认同一句话：赚自己认知范围内的钱。</p><p>最后，回顾了这么多事情，在生活上也有点收获。近年来，看了很多书，不再局限于计算机类这种工具型书籍，小说也看，养成看书的习惯觉得还是比较舒服的。而且在毕业的第一年为自己定下了一个目标，一年至少爬一座大山，这几年也在坚持着，爬山对自己还是非常有益的，一方面锻炼自己不放弃的精神，另一方面由于常年办公室的工作会导致缺乏锻炼，爬山也是个锻炼的好机会。总之，希望以后的生活和工作都能发展顺利，自己也在不断的努力。</p>]]></content:encoded>
            <category>生活</category>
            <category>工作</category>
        </item>
        <item>
            <title><![CDATA[Fastify - 专注于性能和低内存消耗]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Nodejs/nodejs-fastify</link>
            <guid>/Computer-Technology/Nodejs/nodejs-fastify</guid>
            <pubDate>Sun, 27 Jun 2021 16:28:00 GMT</pubDate>
            <description><![CDATA[Fastify 作为一个 Node.js Web 框架，是如何实现高性能和低内存消耗的呢？]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2021-07-04 21:56:00 </em></p></blockquote><p>最近在做 Node.js 技术相关的调研，需要选定一个 Web 框架作为基础来构建业务。一般来说，首选开源方案，对于我来说，比较关注框架背后的开发团队情况、项目活跃度、是否有足够多的商业案例、文档是否完整可读、框架的设计理念、技术架构是否灵活可扩展、技术社区生态是否完整等方面。目前，我比较倾心的是 Fastify 这个新兴框架，根据官网介绍，其专注于高性能和低消耗，并且公开的基准测试表现相当不错，项目足够活跃，更重要的是属于 OpenJS 基金会的孵化项目。本文主要介绍 Fastify 的设计理念和探究其是如何提高性能和降低内存消耗的。</p><blockquote><p>Fastify 官网：<a href="https://www.fastify.io/" target="_blank" rel="noopener noreferrer">https://www.fastify.io/</a></p></blockquote><p>Fastify v1.0.0 发布是在 2018 年的 3 月份，相比于业内广为熟知的 Express / Koa 等框架还很年轻，其项目发起者和核心维护者之一 Matteo Collina 也在开源社区很有声望，是 Node.js TSC 成员，目前 Fastify 项目已经加入 OpenJS 基金会。</p><blockquote><p><a href="https://medium.com/the-node-js-collection/fastify-goes-lts-with-1-0-0-911112c64752" target="_blank" rel="noopener noreferrer">Fastify 到达 1.0.0 LTS！</a></p></blockquote><blockquote><p><a href="https://openjsf.org/blog/2019/11/20/web-framework-fastify-joins-openjs-foundation-as-an-incubating-project/" target="_blank" rel="noopener noreferrer">Fastify 作为孵化项目加入 OpenJS 基金会</a></p></blockquote><blockquote><p><a href="https://openjsf.org/blog/2020/08/27/fastify-graduation-performance-and-the-future/" target="_blank" rel="noopener noreferrer">Fastify：毕业、性能和未来</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="设计理念">设计理念<a class="hash-link" href="#设计理念" title="标题的直接链接">​</a></h2><p>一般来说，一个开源项目会在文档中阐述自己的设计理念和技术架构等理论层面的思考，以帮助开发者更快的了解项目的核心思想和目标人群，或者说解决的关键性问题。官网首页首先给出了标题为 Why 的一段话，然后列举了核心功能点（Core features），文档中没有找到具体阐述设计理念之类的东西。不过，在看了官方博客文章以及相关的资料之后，Fastify 的设计理念大体可以总结：</p><ul><li>高性能</li><li>灵活可扩展</li><li>开发人员友好（例如内置日志系统、TS 支持等等）</li></ul><p>纵观众多 Node.js Web 开源框架，大多都做到了后两点，例如 Express 项目利用中间件提供了足够的灵活性，内置了开箱即用的功能；而 Koa 为了改进开发人员的体验，引入 <code>async/await</code> 替代回调函数，以及所谓的 “洋葱模型” 提供了更高的灵活性，精简了框架核心，只提供必要的功能，从而有了比 Express 更好的性能。而 Fastify 除此之外，对性能有极致的追求，同时也提出了很多不一样的思想，值得学习。</p><p>其实，Web 开发框架还有一个较为严峻的问题就是项目的工程化标准，最著名的就是 MVC 模型，而对应的也有解决此类问题的 Node.js 框架，近年来发展前景比较好的应该就是 nest.js 了。</p><blockquote><p><a href="https://thenewstack.io/introducing-fastify-speedy-node-js-web-framework/" target="_blank" rel="noopener noreferrer">Introducing Fastify, a Speedy Node.js Web Framework</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="fastify-的实现细节">Fastify 的实现细节<a class="hash-link" href="#fastify-的实现细节" title="标题的直接链接">​</a></h2><p>了解了 Fastify 的设计理念之后，接下来要看看开发团队是如何实施的，探索其技术细节。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="json-序列化">JSON 序列化<a class="hash-link" href="#json-序列化" title="标题的直接链接">​</a></h3><p>Fastify 项目的历史故事背后是 <code>fast-json-stringify</code> 模块的诞生，该模块比 <code>JSON.stringify()</code> 这种原生 JavaScript 方法快很多，可以达到 2 到 3 倍的性能优势。其背后的原理主要是 <strong>依赖 JSON Schema 对 JSON 数据进行校验，避免了类型判断的过程，从而提高了性能</strong>。根据其公开的基准测试，其优势主要体现在处理的目标数据为复杂对象时，可以达到 4 倍的性能优势。</p><blockquote><p><a href="https://github.com/fastify/fast-json-stringify" target="_blank" rel="noopener noreferrer">GitHub: <code>fast-json-stringify</code></a></p></blockquote><blockquote><p><a href="https://json-schema.org/" target="_blank" rel="noopener noreferrer">JSON Schema</a></p></blockquote><p>其中有两个细节我们值得注意。第一个便是项目 <em>README.md</em> 文件中提到的安全方面需要注意的问题，是由于 <strong>在初始化时利用 <code>Function</code> 构造函数预编译了函数体，以此达到优化性能的目的</strong>。</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name builtin">Function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'schema'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> code</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>而这个原理其实也是比较好理解的，通过把一个函数体内包含循环迭代的代码预先“编译”成字符串再交给函数来执行，在函数的“运行时”就不需要再做额外的“解释翻译”以及迭代工作，从而提高性能。下面有一篇相关的比较有趣的文章可以看看：</p><blockquote><p><a href="https://github.com/felixge/faster-than-c" target="_blank" rel="noopener noreferrer">Faster than C? Parsing binary data in JavaScript.</a></p></blockquote><p>我们也可以通过以下示例代码来进行简单的测试：</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">a</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> code </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">console.log(</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">i</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c">)</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 函数体预编译后 b 等价于</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// function b() {</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">//   console.log(0);</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">//   console.log(1);</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">//   console.log(2);</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// }</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> b </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name builtin">Function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">code</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">time</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'a'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">a</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">timeEnd</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'a'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// a: 0.136962890625 ms</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">time</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'b'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">b</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">timeEnd</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'b'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// b: 0.05908203125 ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>第二个细节便是 <em>README.md</em> 文件中有提到可以和 <code>flatstr</code> 模块很好的配合使用，因为该模块会触发 V8 的优化机制，把字符串最终转换成了 <code>Buffer</code>。 其项目的 <em>README.md</em> 文件中 <strong>How does it work</strong> 段落详细解释了底层机制，简单的来说，V8 会在某些情况下针对 <code>String</code> 数据做特定优化，而该模块的主要作用就是主动去触发这种 V8 的优化机制以达到提高性能的目的。</p><blockquote><p><a href="https://github.com/davidmarkclements/flatstr" target="_blank" rel="noopener noreferrer">GitHub: <code>flatstr</code></a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="路由routing">路由（Routing）<a class="hash-link" href="#路由routing" title="标题的直接链接">​</a></h3><p>Fastify 的路由是依赖 <code>find-my-way</code> 模块实现的，在公开的基准测试中相比于 <code>express</code> 和 <code>koa-router</code> 有数倍的性能优势。</p><p>根据 <code>find-my-way</code> 模块的 <em>README.md</em> 文件中所介绍，其 <strong>底层采用了基数树（Radix tree，亦称 compact prefix tree）的数据结构，并非通常的路由数组和迭代正则匹配方案</strong>。基数树是一种空间优化的前缀树（即紧凑前缀树），具有前缀树的搜索性能同时尽可能小的占用内存。前缀树的应用场景比较常见，常用于字符串检索，例如字典查找、字符统计、公共前缀匹配等等，要比遍历数组和正则匹配的查找性能好数倍。但前缀树的内存消耗比较大，所以通过将只有一个子节点的与其父节点合并从而减少内存消耗，形成了“基数树”数据结构。</p><blockquote><p><a href="https://github.com/delvedor/find-my-way" target="_blank" rel="noopener noreferrer">GitHub: <code>find-my-way</code></a></p></blockquote><blockquote><p><a href="https://en.wikipedia.org/wiki/Radix_tree" target="_blank" rel="noopener noreferrer">Radix tree</a></p></blockquote><p>Koa 的官方路由 <code>@koa/router</code> 从源码中可以看到，是将每个路由的路径 <code>path</code> 转换成正则表达式存储在数组中，此后遍历该数组通过正则匹配来完成路由映射，这种方案实现起来相对简单，但性能要低得多。不过也有一个同样基于基数树结构实现的 <code>koa-tree-router</code> 模块，性能比前者高数倍，当然它的功能还是相当简单的。Express 的官方路由实现也大致相同，<code>@koa/router</code> 应该是参考了前者的实现。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="闭包closure">闭包（Closure）<a class="hash-link" href="#闭包closure" title="标题的直接链接">​</a></h3><p>闭包是 JavaScript 一个很有用的语言特性，利用它可以实现很多东西，最常见的则是模块封装了，在没有类（Class）概念的情况下，要实现类似类的效果必然会用到闭包，很多第三方库就是这样做的，例如著名的 <code>jQuery</code>。但另一方面需要注意的是，闭包极易引起内存泄漏，同时造成不必要的内存消耗；而且，在闭包中如果嵌套太深，作用域递归解析也会有一定的开销。</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">process</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">bigData</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> cb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">remoteCall</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">bigData</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">err</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> something</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">storeSomething</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">something</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">err</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 该函数是暂时的，但是难以被优化</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// bigData 一直驻留在作用域中，无法被 GC</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">cb</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> res </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// -------</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">process</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">bigData</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> cb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">remoteCall</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">bigData</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">err</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> something</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// bigData 在这里退出了作用域，可以被 GC</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">callStoreSomething</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">something</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> cb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">callStoreSomething</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">something</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> cb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 该函数可以被优化</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">storeSomething</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">something</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">err</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">cb</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> res </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>基于此，<strong>Fastify 团队在框架内部基本上杜绝了利用闭包实现功能，从而保证了低内存消耗</strong>。</p><blockquote><p><a href="https://akaphenom.medium.com/javascript-closures-and-the-call-stack-722ef2c3b5a8" target="_blank" rel="noopener noreferrer">JavaScript: Closures and the Call Stack</a></p></blockquote><blockquote><p><a href="https://en.wikipedia.org/wiki/Scope_(computer_science)" target="_blank" rel="noopener noreferrer">Scope</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="调用栈call-stack">调用栈（Call stack）<a class="hash-link" href="#调用栈call-stack" title="标题的直接链接">​</a></h3><p>Fastify 内部优化之后，调用栈也小很多，作者利用 <code>0x</code> 工具进行了分析，从生成的栈火焰图来看，Express 的图形中有两个高峰，说明调用栈特别大；相对的，Fastify 的图形总体较为平缓。<strong>更小的调用栈也降低了内存消耗</strong>，详细信息可以在下面的视频讲解中查看。</p><blockquote><p><a href="https://www.youtube.com/watch?v=5z46jJZNe8k" target="_blank" rel="noopener noreferrer">Take your http server to ludicrous speed</a></p></blockquote><blockquote><p><a href="https://github.com/davidmarkclements/0x" target="_blank" rel="noopener noreferrer">GitHub: <code>0x</code></a></p></blockquote><blockquote><p><a href="https://en.wikipedia.org/wiki/Call_stack" target="_blank" rel="noopener noreferrer">Call stack</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="服务器的生命周期server-lifecycle">服务器的生命周期（Server Lifecycle）<a class="hash-link" href="#服务器的生命周期server-lifecycle" title="标题的直接链接">​</a></h3><p>大多数 Web 框架的生命周期是相似的：服务器启动，路由处理程序注册，服务器侦听请求并调用适当的函数来处理它们。如下图所示，Fastify 做了特殊处理，在服务器启动之后执行预初始化阶段（preinitialisation ），该阶段做了一些优化工作，使用 <code>fast-json-stringify</code> 模块处理 JSON schemas，以及用 <code>reusify</code> 模块优化处理函数（handler functions）。</p><p><img loading="lazy" src="https://www.nearform.com/wp-content/uploads/jekyllsite/blog/2017/08/diagram_fastify_lifecycle.png" class="img_ev3q"></p><p>这里提及的 <code>reusify</code> 模块是如何来优化处理函数的呢？首先，请求的处理函数属于频繁被执行的代码块，也就是所谓的"热代码路径（hot code paths）"。<code>reusify</code> 的源码非常简单，主要作用是 <strong>将对象或者函数进行缓存，降低高并发场景下热代码路径上的 GC 压力</strong>。</p><blockquote><p><a href="https://www.nearform.com/blog/reaching-ludicrous-speed-with-fastify/" target="_blank" rel="noopener noreferrer">Reaching Ludicrous Speed with Fastify</a></p><p><a href="https://github.com/mcollina/reusify" target="_blank" rel="noopener noreferrer">GitHub: <code>reusify</code></a></p><p><a href="https://stackoverflow.com/questions/22894877/avoid-allocations-in-compiler-hot-paths-roslyn-coding-conventions" target="_blank" rel="noopener noreferrer">Avoid allocations in compiler hot paths” Roslyn Coding Conventions</a></p></blockquote><p>不过，在 <code>reusify</code> 模块给出的示例代码中有一个细节值得注意：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">MyObject</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// you need to define this property</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// so V8 can compile MyObject into an</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// hidden class</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">next</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>作者注释到你要重用的对象内部第一个属性应该定义为 <code>next</code>，因为可以触发 V8 的优化机制 <strong>“隐藏类（hidden class）”</strong>。首先，<strong>隐藏类是 V8 内部为了优化非整数索引属性（命名属性）的访问速度的机制，每一次对对象命名属性的增删操作都会导致新的隐藏类被创建，而具备同样的命名属性定义顺序的对象可以共享隐藏类，减少开销</strong>。接下来，通过查看 <code>reusify</code> 模块的源码便可知道，模块内部为了实现缓存队列给被重用的对象添加了一个 <code>next</code> 属性，由此便可以明白作者的注释是告诉我们如何利用好 V8 的内部优化机制 —— 隐藏类。</p><blockquote><p><a href="https://v8.dev/blog/fast-properties" target="_blank" rel="noopener noreferrer">Fast properties in V8</a></p></blockquote><blockquote><p><a href="https://engineering.linecorp.com/en/blog/v8-hidden-class/" target="_blank" rel="noopener noreferrer">V8 Hidden class</a></p></blockquote><blockquote><p><a href="https://stackoverflow.com/questions/17925726/clearing-up-the-hidden-classes-concept-of-v8" target="_blank" rel="noopener noreferrer">Clearing up the <code>hidden classes</code> concept of V8</a></p></blockquote><blockquote><p><a href="https://codereview.stackexchange.com/questions/28344/should-i-put-default-values-of-attributes-on-the-prototype-to-save-space/28360#28360" target="_blank" rel="noopener noreferrer">Should I put default values of attributes on the prototype to save space?</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="插件模型plugin-model">插件模型（Plugin Model）<a class="hash-link" href="#插件模型plugin-model" title="标题的直接链接">​</a></h3><p>Fastify 的灵活扩展主要依赖于其插件系统，同时也支持 Express 中间件（需要 <code>middie</code> 插件），可以说是 Express 与 Hapi 的组合。在探究 Fastify 的插件模型之前，先来看看 Koa 的中间件模型的源码实现：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// https://github.com/koajs/compose/blob/25568a36509fefc58914bc2a7600f787b16aa0df/index.js#L42</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">compose</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">middleware</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">context</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> next</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">dispatch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">dispatch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历嵌套迭代（类递归）的方式执行</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token known-class-name class-name">Promise</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">resolve</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">fn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dispatch</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">bind</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们可以看到 <code>koa-compose</code> 模块实现了 Koa 的中间件模型，是一种通过遍历嵌套迭代（类递归）的方式来逐个执行中间件函数，而且引入上下游（upstream / downstream）的概念，这种方式会导致调用栈会非常的大，性能很难优化。而查看 Express 的源码，发现其会把中间件函数当作路由函数来对待，存储在数组中，后续也会以类似的方式执行，同样也会有调用栈过大的问题。</p><p>Fastify 依赖于 <code>avvio</code> 模块 <strong>建立了一种基于可重入（reentrant ）和有向无环图（directed acyclic graph）的插件模型</strong>，可以正确处理异步代码，保证插件的加载顺序，避免了前面提到的调用栈过大的问题。建立一个有向无环图的插件系统可以保证不会创建交叉依赖，并且实现了可以在应用程序的不同部分使用相同插件的不同版本。</p><p><img loading="lazy" src="https://survivejs.com/9f7ecd003147aad41c8b8c236c703db4.png" alt="有向无环图.png" class="img_ev3q">
有向无环图</p><p>由于这种架构模式，带来的另外一个好处就是很容易将应用拆分为多个微服务。</p><p><img loading="lazy" src="https://survivejs.com/6758771bb4590b09ac0780ceb3c51da9.png" alt="有向无环图服务.png" class="img_ev3q">
有向无环图服务</p><p>那么，可重入带来了什么？可重入性是代码的一种属性，指其没有共享状态，可以安全的在多个线程中或者递归地调用执行；换句话说，代码因为具备某些状态，在多个线程或者递归调用时因为改变了该状态而导致逻辑出错，表明代码是不可重入的，不具备可重入性。常见的应用场景就是在遍历图形的算法中，可能会多次到达同一个节点，可重入性保证了遍历过程中是安全的。</p><p>具体实现，在 Fastify 官方文档的 <strong><a href="https://www.fastify.io/docs/latest/Encapsulation/" target="_blank" rel="noopener noreferrer">Encapsulation</a></strong> 章节有关于其基本特性 "封装上下文（encapsulation context）" 的介绍，示例代码形象易懂，核心是围绕 <code>register</code> API 构建的自上而下继承的上下文模型，并可以通过 <code>fastify-plugin</code> 模块打破这种限制完成特定场景下的应用。在 Fastify 中一切皆插件，形成的这种插件系统，也正是上面提到的可以将应用方便的拆分为微服务的基础。</p><blockquote><p><a href="https://github.com/fastify/middie" target="_blank" rel="noopener noreferrer">GitHub: <code>middie</code></a></p></blockquote><blockquote><p><a href="https://github.com/fastify/avvio" target="_blank" rel="noopener noreferrer">GitHub: <code>avvio</code></a></p></blockquote><blockquote><p><a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph" target="_blank" rel="noopener noreferrer">Directed acyclic graph</a></p></blockquote><blockquote><p><a href="https://stackoverflow.com/questions/1312259/what-is-the-re-entrant-lock-and-concept-in-general" target="_blank" rel="noopener noreferrer">What is the Re-entrant lock and concept in general?</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="其它方面">其它方面<a class="hash-link" href="#其它方面" title="标题的直接链接">​</a></h3><p>除了上面所介绍的 Fastify 特点外，还有其它一些方面值得关注。</p><p>第一个，<code>Decorators</code> API 提供了一个在整个应用的请求链路中共享数据的机制，此 API 也体现了 Fastify 对性能的关注，其与 V8 内部优化机制“隐藏类”和“内联缓存”相关。</p><blockquote><p><a href="https://mathiasbynens.be/notes/shapes-ics" target="_blank" rel="noopener noreferrer">JavaScript engine fundamentals: Shapes and Inline Caches</a></p></blockquote><p>第二个，<code>Hooks</code> API 允许监听一些应用生命周期事件，提供了更高的灵活性，给特定场景下的应用提供了较好的实现机制。</p><p>第三个，内置了依赖于 <code>Pino</code> 模块实现的日志系统，日志作为后端应用针对错误分析、性能分析等的原始信息是相当重要的，可见 Fastify 团队关注点还是相当准确的。</p><p>最后，Fastify 的插件生态目前可能还不算很丰富，但官方提供的核心插件基本上也覆盖了常见的各种场景，例如消息队列、WebSocket、鉴权、缓存等。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>可以看得出来，Fastify 对性能的追求是极致的，涉及到很多 V8 内部对代码的优化机制，通过了解还是收获颇丰的。回过头来，Node.js Web 框架虽然层出不穷，但根据 NPM Trends 的下载量统计来看，Express 依然高居榜首，说明 Node.js Web 框架在重业务场景下的应用其实不多，更多的应该是作为一些小项目的后端或者类似 BFF 层这种轻量的场景下应用。从 Express 到 Koa 再到 Fastify，这是向更轻量更高性能的方向发展，技术的发展趋势也从侧面反映了该技术在业务场景中的价值体现。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考资源">参考资源<a class="hash-link" href="#参考资源" title="标题的直接链接">​</a></h2><ul><li><a href="https://www.webexpo.net/prague2017/talk/what-if-i-told-you-that-http-can-be-fast/" target="_blank" rel="noopener noreferrer">What if I told you that HTTP can be fast?</a></li><li><a href="https://survivejs.com/blog/fastify-interview/" target="_blank" rel="noopener noreferrer">Fastify - Fast and low overhead web framework for Node.js - Interview with Tomas Della Vedova</a></li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="附对比表">附：对比表<a class="hash-link" href="#附对比表" title="标题的直接链接">​</a></h2><table><thead><tr><th>对比项(2021-06-01)</th><th>express</th><th>koa</th><th>Fastify</th><th>nestjs</th></tr></thead><tbody><tr><td>当前版本</td><td>v4.17.1(2019-05-26)</td><td>v2.13.1(2021-01-04)</td><td>v3.17.0(2021-05-29)</td><td>v7.6.17(2021-05-18)</td></tr><tr><td>设计理念/哲学</td><td>小型、强大的 HTTP 服务器工具</td><td>更轻量、高性能、“洋葱模型”</td><td>高性能、低开销，开发友好</td><td>提供 Node Web 应用的”架构规范“</td></tr><tr><td>技术架构</td><td>核心简单，具备路由等常见功能，其它需依赖中间件扩展</td><td>核心极简，不包含任何额外功能，路由等其它功能需要依赖中间件扩展</td><td>核心简单，提供路由、日志等必要组件，其它依赖插件扩展</td><td>底层核心可替换，上层 MVC 模型</td></tr><tr><td>扩展机制</td><td>中间件</td><td>中间件</td><td>插件</td><td>插件</td></tr><tr><td>项目活跃度（近一年平均每周 GitHub commits）</td><td>0-2</td><td>0-2</td><td>5-10</td><td>20</td></tr><tr><td>维护团队的 roadmap</td><td>4.x -&gt; 5.0（缓慢）</td><td>2.x -&gt; 3.0（缓慢）</td><td>3.x -&gt; 4.0（积极）</td><td>v8.0 计划完成，待发布</td></tr><tr><td>是否支持 ts</td><td>社区维护 @types</td><td>社区维护 @types</td><td>官方维护 @types</td><td>官方内置支持</td></tr><tr><td>公开的基准测试</td><td>QPS 最低</td><td>QPS 高</td><td>QPS 最高</td><td></td></tr><tr><td>技术生态（官方+社区）</td><td>丰富</td><td>丰富</td><td>较丰富</td><td>较丰富</td></tr><tr><td>常见业务场景解决方案</td><td>社区中间件</td><td>社区中间件</td><td>官方插件</td><td>官方文档，内置适配器</td></tr><tr><td>商业案例</td><td>有</td><td>有</td><td>有</td><td>有</td></tr><tr><td>上手难易程度</td><td>容易</td><td>容易</td><td>容易</td><td>中等</td></tr><tr><td>可查阅的资料</td><td>多</td><td>较多</td><td>较多</td><td>较多</td></tr><tr><td>官网文档（中文）</td><td>有</td><td>有</td><td>有</td><td>有</td></tr><tr><td>OpenJS 基金会项目</td><td>是</td><td></td><td>是</td><td></td></tr></tbody></table><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="附基准测试">附：基准测试<a class="hash-link" href="#附基准测试" title="标题的直接链接">​</a></h2><p>这里做了一个简单的基准测试，在 <em>windows 10</em> 平台下采用 <code>autocannon</code> 测试工具，依赖版本如下：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token string-property property" style="color:#36acaa">"dependencies"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string-property property" style="color:#36acaa">"express"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"4.17.1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string-property property" style="color:#36acaa">"fastify"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"3.18.1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string-property property" style="color:#36acaa">"koa"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2.13.1"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token string-property property" style="color:#36acaa">"devDependencies"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string-property property" style="color:#36acaa">"autocannon"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"^7.3.0"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>测试代码如下：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// express</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> app </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">express</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'/'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">req</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">hello</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'world'</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">listen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">3002</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// koa</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> app </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Koa</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">use</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">ctx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ctx</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">body</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">hello</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'world'</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">listen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">3001</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// fastify</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> fastify </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">Fastify</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// logger: true,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fastify</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'/'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">request</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> reply</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  reply</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">type</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'application/json'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">code</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">200</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">hello</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'world'</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fastify</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">listen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">3000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">err</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> address</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">throw</span><span class="token plain"> err</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>测试结果如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># express</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> autocannon http://127.0.0.1:3002/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Running 10s </span><span class="token builtin class-name">test</span><span class="token plain"> @ http://127.0.0.1:3002/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> connections</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌─────────┬──────┬──────┬───────┬──────┬─────────┬─────────┬───────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ Stat    │ </span><span class="token number" style="color:#36acaa">2.5</span><span class="token plain">% │ </span><span class="token number" style="color:#36acaa">50</span><span class="token plain">%  │ </span><span class="token number" style="color:#36acaa">97.5</span><span class="token plain">% │ </span><span class="token number" style="color:#36acaa">99</span><span class="token plain">%  │ Avg     │ Stdev   │ Max   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├─────────┼──────┼──────┼───────┼──────┼─────────┼─────────┼───────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ Latency │ </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> ms │ </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> ms │ </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> ms  │ </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> ms │ </span><span class="token number" style="color:#36acaa">0.84</span><span class="token plain"> ms │ </span><span class="token number" style="color:#36acaa">0.61</span><span class="token plain"> ms │ </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> ms │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└─────────┴──────┴──────┴───────┴──────┴─────────┴─────────┴───────┘</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌───────────┬─────────┬─────────┬─────────┬────────┬─────────┬─────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ Stat      │ </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">%      │ </span><span class="token number" style="color:#36acaa">2.5</span><span class="token plain">%    │ </span><span class="token number" style="color:#36acaa">50</span><span class="token plain">%     │ </span><span class="token number" style="color:#36acaa">97.5</span><span class="token plain">%  │ Avg     │ Stdev   │ Min     │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├───────────┼─────────┼─────────┼─────────┼────────┼─────────┼─────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ Req/Sec   │ </span><span class="token number" style="color:#36acaa">4675</span><span class="token plain">    │ </span><span class="token number" style="color:#36acaa">4675</span><span class="token plain">    │ </span><span class="token number" style="color:#36acaa">8199</span><span class="token plain">    │ </span><span class="token number" style="color:#36acaa">8287</span><span class="token plain">   │ </span><span class="token number" style="color:#36acaa">7838.37</span><span class="token plain"> │ </span><span class="token number" style="color:#36acaa">1017.07</span><span class="token plain"> │ </span><span class="token number" style="color:#36acaa">4672</span><span class="token plain">    │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├───────────┼─────────┼─────────┼─────────┼────────┼─────────┼─────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ Bytes/Sec │ </span><span class="token number" style="color:#36acaa">1.07</span><span class="token plain"> MB │ </span><span class="token number" style="color:#36acaa">1.07</span><span class="token plain"> MB │ </span><span class="token number" style="color:#36acaa">1.88</span><span class="token plain"> MB │ </span><span class="token number" style="color:#36acaa">1.9</span><span class="token plain"> MB │ </span><span class="token number" style="color:#36acaa">1.79</span><span class="token plain"> MB │ </span><span class="token number" style="color:#36acaa">233</span><span class="token plain"> kB  │ </span><span class="token number" style="color:#36acaa">1.07</span><span class="token plain"> MB │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└───────────┴─────────┴─────────┴─────────┴────────┴─────────┴─────────┴─────────┘</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Req/Bytes counts sampled once per second.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">86k requests </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">11</span><span class="token plain">.01s, </span><span class="token number" style="color:#36acaa">19.7</span><span class="token plain"> MB </span><span class="token builtin class-name">read</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># koa</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> autocannon http://127.0.0.1:3001/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Running 10s </span><span class="token builtin class-name">test</span><span class="token plain"> @ http://127.0.0.1:3001/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> connections</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌─────────┬──────┬──────┬───────┬──────┬─────────┬─────────┬──────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ Stat    │ </span><span class="token number" style="color:#36acaa">2.5</span><span class="token plain">% │ </span><span class="token number" style="color:#36acaa">50</span><span class="token plain">%  │ </span><span class="token number" style="color:#36acaa">97.5</span><span class="token plain">% │ </span><span class="token number" style="color:#36acaa">99</span><span class="token plain">%  │ Avg     │ Stdev   │ Max  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├─────────┼──────┼──────┼───────┼──────┼─────────┼─────────┼──────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ Latency │ </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> ms │ </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> ms │ </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> ms  │ </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> ms │ </span><span class="token number" style="color:#36acaa">0.01</span><span class="token plain"> ms │ </span><span class="token number" style="color:#36acaa">0.12</span><span class="token plain"> ms │ </span><span class="token number" style="color:#36acaa">9</span><span class="token plain"> ms │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└─────────┴──────┴──────┴───────┴──────┴─────────┴─────────┴──────┘</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌───────────┬─────────┬─────────┬────────┬─────────┬────────┬────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ Stat      │ </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">%      │ </span><span class="token number" style="color:#36acaa">2.5</span><span class="token plain">%    │ </span><span class="token number" style="color:#36acaa">50</span><span class="token plain">%    │ </span><span class="token number" style="color:#36acaa">97.5</span><span class="token plain">%   │ Avg    │ Stdev  │ Min     │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├───────────┼─────────┼─────────┼────────┼─────────┼────────┼────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ Req/Sec   │ </span><span class="token number" style="color:#36acaa">17743</span><span class="token plain">   │ </span><span class="token number" style="color:#36acaa">17743</span><span class="token plain">   │ </span><span class="token number" style="color:#36acaa">20111</span><span class="token plain">  │ </span><span class="token number" style="color:#36acaa">20335</span><span class="token plain">   │ </span><span class="token number" style="color:#36acaa">19496</span><span class="token plain">  │ </span><span class="token number" style="color:#36acaa">964.55</span><span class="token plain"> │ </span><span class="token number" style="color:#36acaa">17731</span><span class="token plain">   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├───────────┼─────────┼─────────┼────────┼─────────┼────────┼────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ Bytes/Sec │ </span><span class="token number" style="color:#36acaa">2.91</span><span class="token plain"> MB │ </span><span class="token number" style="color:#36acaa">2.91</span><span class="token plain"> MB │ </span><span class="token number" style="color:#36acaa">3.3</span><span class="token plain"> MB │ </span><span class="token number" style="color:#36acaa">3.33</span><span class="token plain"> MB │ </span><span class="token number" style="color:#36acaa">3.2</span><span class="token plain"> MB │ </span><span class="token number" style="color:#36acaa">159</span><span class="token plain"> kB │ </span><span class="token number" style="color:#36acaa">2.91</span><span class="token plain"> MB │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└───────────┴─────────┴─────────┴────────┴─────────┴────────┴────────┴─────────┘</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Req/Bytes counts sampled once per second.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">214k requests </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">11</span><span class="token plain">.01s, </span><span class="token number" style="color:#36acaa">35.2</span><span class="token plain"> MB </span><span class="token builtin class-name">read</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># fastify</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> autocannon http://127.0.0.1:3000/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Running 10s </span><span class="token builtin class-name">test</span><span class="token plain"> @ http://127.0.0.1:3000/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> connections</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌─────────┬──────┬──────┬───────┬──────┬─────────┬─────────┬───────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ Stat    │ </span><span class="token number" style="color:#36acaa">2.5</span><span class="token plain">% │ </span><span class="token number" style="color:#36acaa">50</span><span class="token plain">%  │ </span><span class="token number" style="color:#36acaa">97.5</span><span class="token plain">% │ </span><span class="token number" style="color:#36acaa">99</span><span class="token plain">%  │ Avg     │ Stdev   │ Max   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├─────────┼──────┼──────┼───────┼──────┼─────────┼─────────┼───────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ Latency │ </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> ms │ </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> ms │ </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> ms  │ </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> ms │ </span><span class="token number" style="color:#36acaa">0.01</span><span class="token plain"> ms │ </span><span class="token number" style="color:#36acaa">0.13</span><span class="token plain"> ms │ </span><span class="token number" style="color:#36acaa">13</span><span class="token plain"> ms │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└─────────┴──────┴──────┴───────┴──────┴─────────┴─────────┴───────┘</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌───────────┬─────────┬─────────┬─────────┬─────────┬──────────┬─────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ Stat      │ </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">%      │ </span><span class="token number" style="color:#36acaa">2.5</span><span class="token plain">%    │ </span><span class="token number" style="color:#36acaa">50</span><span class="token plain">%     │ </span><span class="token number" style="color:#36acaa">97.5</span><span class="token plain">%   │ Avg      │ Stdev   │ Min     │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├───────────┼─────────┼─────────┼─────────┼─────────┼──────────┼─────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ Req/Sec   │ </span><span class="token number" style="color:#36acaa">19759</span><span class="token plain">   │ </span><span class="token number" style="color:#36acaa">19759</span><span class="token plain">   │ </span><span class="token number" style="color:#36acaa">27631</span><span class="token plain">   │ </span><span class="token number" style="color:#36acaa">27903</span><span class="token plain">   │ </span><span class="token number" style="color:#36acaa">26960.73</span><span class="token plain"> │ </span><span class="token number" style="color:#36acaa">2284.47</span><span class="token plain"> │ </span><span class="token number" style="color:#36acaa">19752</span><span class="token plain">   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├───────────┼─────────┼─────────┼─────────┼─────────┼──────────┼─────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ Bytes/Sec │ </span><span class="token number" style="color:#36acaa">3.24</span><span class="token plain"> MB │ </span><span class="token number" style="color:#36acaa">3.24</span><span class="token plain"> MB │ </span><span class="token number" style="color:#36acaa">4.53</span><span class="token plain"> MB │ </span><span class="token number" style="color:#36acaa">4.58</span><span class="token plain"> MB │ </span><span class="token number" style="color:#36acaa">4.42</span><span class="token plain"> MB  │ </span><span class="token number" style="color:#36acaa">375</span><span class="token plain"> kB  │ </span><span class="token number" style="color:#36acaa">3.24</span><span class="token plain"> MB │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└───────────┴─────────┴─────────┴─────────┴─────────┴──────────┴─────────┴─────────┘</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Req/Bytes counts sampled once per second.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">297k requests </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">11</span><span class="token plain">.01s, </span><span class="token number" style="color:#36acaa">48.6</span><span class="token plain"> MB </span><span class="token builtin class-name">read</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>根据测试结果来看，仅 <strong>Req/Sec</strong> 这一项的平均值（Avg），Express 只有 <strong>7838.37</strong>，Koa 有 <strong>19496</strong>，约为前者的 2.4 倍，而 Fastify 达到了 <strong>26960.73</strong>，是 Express 的约 3.4 倍，Koa 的约 1.4 倍。除此之外，<strong>Bytes/Sec</strong> 指标也有差距，综合起来 Koa 和 Fastify 的表现要好的多，而 Fastify 要比 Koa 表现更好一些。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 后端</category>
            <category>Node.js</category>
            <category>JavaScript</category>
            <category>Fastify</category>
        </item>
        <item>
            <title><![CDATA[理解编程语言的设计与实现]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Tools/tools-programming-language</link>
            <guid>/Computer-Technology/Tools/tools-programming-language</guid>
            <pubDate>Sun, 02 May 2021 17:03:00 GMT</pubDate>
            <description><![CDATA[编程语言为开发者提供了诸多便利，那么它是如何被发明的，不同的语言设计理念有什么不同呢？]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2021-06-18 01:48:00 </em></p></blockquote><p>编程语言本质上是给开发者使用的工具，不同的业务领域使用不同的编程语言去实现具体的业务，是基于语言本身的设计理念与实现方式来做选择，那么作为开发者应该了解一下编程语言是如何被发明的，且其设计理念是什么。</p><p>Ruby 是我大学期间课余接触且实际使用过的一门语言，目前我甚是喜爱，其作者松本行弘设计 Ruby 的初心是：为开发者服务，注重简洁和效率。这篇文章主要也是为了记录在拜读了松本行弘先生新书《编程语言的设计与实现》之后掌握的一些相关的关键知识点和其它收获。由于该书主要是围绕作者在设计 Ruby 和新语言 Streem 过程中的一些思考和经验，有些东西可能不太具备普适性，而我在这里主要还是关注一些通用性的知识点和概念。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="为什么要创造编程语言">为什么要创造编程语言<a class="hash-link" href="#为什么要创造编程语言" title="标题的直接链接">​</a></h2><p>在过去，计算机信息技术行业还不够发达，在没有成为主流的时候，编程语言一般是作为商业化附属品出现的，普通人很难能免费且容易的获取到编程语言作为工具使用。所以，基于需求创造自己的编程语言就显得很合理了。然而，当今由于开源技术的盛行，很多编程语言都以开源的形式存在，作为开发者现在很容易就能获取到不同的编程语言作为自己的工具进行业务开发，那为什么还要创造新的编程语言？或者说，为什么现如今新的语言仍然层出不穷？</p><p>软件编程本质上是“人机交互”，开发者使用编程语言设计业务逻辑，然后交由机器具体来执行，编程语言作为开发者与机器之间交流的媒介存在。随着时代的发展，业务需求和场景日益复杂，开发者与机器之间的交流也日趋复杂，为了让开发者“更轻松”地与机器交流，抽象度更高且更简洁的新编程语言作为新的交流媒介被发明。回忆一下计算机发展史，软件编程正是遵循从“汇编语言”（指令、0 和 1）到“低级语言”（例如 C/C++，语句、函数、数据类型）再到“高级语言”（例如 Java/Go，面向对象、并发、自动 GC）的发展路径。</p><p>对于个人来说，创造编程语言，或者说深入了解如何创造编程语言，可以提升自己的技术能力和设计能力，也能在一定程度上打造自己的个人品牌（提高个人声望）。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="编程语言的设计与实现">编程语言的设计与实现<a class="hash-link" href="#编程语言的设计与实现" title="标题的直接链接">​</a></h2><p>对于现今的大多数编程语言来说，都属于“低级语言”和“高级语言”的范畴，而机器只能直接理解汇编语言。那么，设计编程语言是在设计什么？</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="语言和语言处理器">语言和语言处理器<a class="hash-link" href="#语言和语言处理器" title="标题的直接链接">​</a></h3><p>编程语言在使用过程中可大致分为两个阶段：编写代码和运行代码。前者注重的是语言本身，而后者具体要解决的就是语言代码如何让机器能理解进而执行。</p><blockquote><p><strong>语言是由语法和词汇构成的。语法是一种规则，规定了在该语言中如何表述才能使程序有效；而词汇是能从使用该语言编写的程序中调用的功能的集合，之后会以库的形式逐渐增加。</strong> 在设计语言的场景中说起词汇，就是指该语言一开始就具备的内置功能。</p></blockquote><p>我们可以用不同的编程语言实现同样的功能，但有的语言实现起来复杂繁琐，但有的语言实现起来简单容易，这就是语言层面的直观体现。可以想象的是，很多新出现的编程语言首要解决的就是该问题，如何设计让语法规则更简单易用，内置功能更加强大。</p><p>另一方面，用语言编写的代码如何在机器上实际运行？</p><blockquote><p><strong>语言处理器是能够使语法和词汇在计算机上实际运行的软件。</strong> 要想使编程语言成为真正的语言，而非仅仅停留在一个想法上，是离不开语言处理器的。无法运行的编程语言在严格意义上不能称为编程语言。</p></blockquote><p>我们通常所说的“编译器”、“解释器”、“虚拟机”、"JIT（即时编译）"等概念，均属于语言处理器相关的内容。</p><p><strong>所以，编程语言的设计是在设计：语言本身和语言处理器。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="语言处理器的构成">语言处理器的构成<a class="hash-link" href="#语言处理器的构成" title="标题的直接链接">​</a></h3><p>先来看看语言处理器相关的内容。</p><blockquote><p><strong>语言处理器大体上可分为解释语法的“编译器”、相当于词汇的“库”，以及实际运行软件所需的“运行时（系统）”。</strong> 这三大构成要素的比重会因语言和处理器性质的不同而发生变化。</p></blockquote><p>如何理解后一句，来看看具体的实例即可。</p><p>早期的 TinyBASIC 语言很简单，编译器做的工作很少，主要的处理集中在运行时完成，对于这样的语言处理器可称之为”解释器“（interpreter）。现在这些复杂的语言的处理器都是先将程序编译为内部代码，再在运行时执行内部代码，这种“编译器＋运行时”的组合形式，看起来像源代码未经转换就被直接执行了，因此有时也被称为“解释型”，例如 Ruby。然而，像 C 语言这种在与机器非常接近的层面上追求效率的语言，几乎不存在运行时，只有解释语法的编译器部分非常突出，这样的语言处理器被称为“编译型”。</p><blockquote><p>在 C 语言这类语言中，作为转换结果的程序（可执行文件）是可以直接运行的软件，所以不需要负责运行的运行时。部分运行时的工作，比如内存管理等，由库和操作系统的系统调用负责。</p></blockquote><p>对于如今市场上主流的 Java 语言，其语言处理器设计较为复杂，首先通过编译器将源代码转换为虚拟机的机器码（JVM 字节码），并由虚拟机（JVM）来执行。而且，为了提高效率，运行时采用了将字节码转换为机器码的即时编译（Just In Time Compiler）等技术。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="编译器compiler">编译器（Compiler）<a class="hash-link" href="#编译器compiler" title="标题的直接链接">​</a></h4><p><strong>编译器的工作是将编程语言的源代码（原始语言）转换为可执行的形式（目标语言）。</strong>其大致按顺序会执行多个或所有以下流程：预处理、词法分析、语法分析（解析）、语义分析（语法导向翻译）、将输入程序转换为中间表示（IR）、代码优化和代码生成。</p><p>编译器设计一般分为三个阶段，前端、中端和后端。编译前端包括生成中间表示（IR）之前的流程，这个 IR 通常是程序相对于源代码的较低级别的表示，在该阶段主要做一些静态分析工作，例如类型检查。编译中端则是对前端生成的 IR 做进一步处理，该阶段主要做与 CPU 架构无关的优化，例如去除无用（消除死代码）或无法访问（可达性分析）的代码。编译后端对中端生成的优化 IR 基于特定的 CPU 架构做进一步的分析、转换和优化处理，最终生成依赖于特定平台的汇编代码。</p><p>编译器这种前/中/后的设计方式使得不同语言的前端与不同 CPU 架构的后端相结合成为可能，同时共享中端的优化。例如，GNU 编译器集（GCC）、Clang（LLVM）等。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="提前编译aot与即时编译jit">提前编译（AOT）与即时编译（JIT）<a class="hash-link" href="#提前编译aot与即时编译jit" title="标题的直接链接">​</a></h5><p>目前根据编译的时机可将其分为静态编译和动态编译。其中静态编译通常称为提前编译（Ahead-of-time compilation），是指在程序执行之前将高级编程语言编译成低级语言的行为，减少需要在运行时执行的工作量，通常性能最优。而动态编译技术目前最具代表性的则为即时编译（Just-in-time compilation），是指在程序执行期间（在运行时）而不是在执行之前进行编译，是对两种传统的机器代码翻译方法（提前编译和解释）的结合，具有编译代码的速度和解释的灵活性，当然也引入了解释器的开销和编译及链接的额外开销。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="词法分析">词法分析<a class="hash-link" href="#词法分析" title="标题的直接链接">​</a></h5><p>词法分析器构成了现代处理中编译器前端的第一阶段。词法分析（Lexical analysis）简单来说就是“将源代码由字符序列转换为有意义的单词（token）序列”的工序。将只是字符串的源代码整理为有些许意义的单词序列，后续阶段的处理就会变得简单。</p><p>以 C 语言为例说明：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">x </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> b </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的表达式经过词法分析后生成如下内容：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[(identifier, x), (operator, =), (identifier, a), (operator, +), (identifier, b), (operator, *), (literal, 2), (separator, ;)]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们可以借助 <a href="https://en.wikipedia.org/wiki/Lex_(software)" target="_blank" rel="noopener noreferrer">lex</a> 工具根据编写单词的规则自动生成词法分析函数。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="语法分析">语法分析<a class="hash-link" href="#语法分析" title="标题的直接链接">​</a></h5><p>语法分析（Syntax analysis）是检查在词法分析阶段准备好的单词是否符合语法，并进行符合语法的处理的工序，最终结果是生成一个解析树（parse tree）数据结构。语法分析的方法有好几种，其中最有名、最简单的方法是使用别名为“生成编译器的编译器”的语法分析函数生成工具，比如 <a href="https://en.wikipedia.org/wiki/Yacc" target="_blank" rel="noopener noreferrer">yacc</a>（yet another compiler compiler）。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="抽象语法树">抽象语法树<a class="hash-link" href="#抽象语法树" title="标题的直接链接">​</a></h5><p>抽象语法树（Abstract syntax tree）是用编程语言编写的源代码的抽象语法结构的树表示，树的每个节点表示源代码中出现的一个构造。语法是“抽象的”，因为它不代表真实语法中出现的每个细节，而只是结构或与内容相关的细节。例如，分组括号在树结构中是隐含的，因此不必将它们表示为单独的节点。</p><p>抽象语法树在语义分析期间被大量使用，其中编译器检查程序和语言元素的正确使用。编译器还在语义分析期间根据 AST 生成符号表。树的完整遍历允许验证程序的正确性。验证正确性后，AST 作为代码生成的基础。AST 通常用于为代码生成生成中间表示 (IR)，有时也称为中间语言。</p><p>抽象语法树多用于程序分析和程序转换系统。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="标准库standard-library">标准库（Standard Library）<a class="hash-link" href="#标准库standard-library" title="标题的直接链接">​</a></h4><p><strong>语言的标准库通常被其用户视为语言的一部分，包括常用算法、数据结构和输入输出机制的定义。</strong>标准库为程序员利用该语言实现更复杂的功能提供了必要的依赖。</p><p>那么，标准库中应该包含什么？对于标准库的设计哲学，可以参考 C/C++ 和 Java/Python，前者只提供在实现程序功能时必要且合理的数据结构和算法，规模相对较小，而后者旨在提供更多的便利、易于编码，封装了较为复杂和强大的功能，规模相对来说更为庞大。因此，Python 成为了目前主流的用来科学研究的语言，它可以很方便的完成复杂的数学计算和科学分析工作。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="运行时runtime">运行时（Runtime）<a class="hash-link" href="#运行时runtime" title="标题的直接链接">​</a></h4><p>每种编程语言都指定了一个执行模型，并且许多语言在运行时系统中至少实现了该模型的一部分。<strong>运行时系统为程序提供了运行的环境</strong>，这种环境可以解决许多问题，包括应用程序内存的管理、程序如何访问变量、在子程序之间传递参数的机制、与操作系统的接口等。换句话说，编译器根据具体平台的运行时系统产生正确的代码，运行时系统将负责设置和管理堆栈和堆，并且可能包括诸如垃圾收集、线程或其他内置于语言中的动态特性。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="执行模型execution-model">执行模型（Execution model）<a class="hash-link" href="#执行模型execution-model" title="标题的直接链接">​</a></h5><p>编程语言由文法/句法加上执行模型组成。执行模型指定语言元素的行为。通过应用执行模型，可以推导出用该编程语言编写的程序的行为。</p><p>例如，当程序员“阅读”代码时，在他们的脑海中，他们会浏览每一行代码的作用。实际上，他们模拟了他们头脑中的行为。程序员正在做的是将执行模型应用于代码，这会导致代码的行为。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="虚拟机virtual-machine">虚拟机（Virtual Machine）<a class="hash-link" href="#虚拟机virtual-machine" title="标题的直接链接">​</a></h3><p>虚拟机是运行时的一种技术实现，是用软件实现的（无实际硬件的）计算机，区别于系统虚拟机，将其称之为“进程虚拟机”。进程虚拟机最初是作为中间语言的抽象平台出现的，中间语言被编译器用作程序的中间表示（IR）。它的目的是提供一个独立于平台的编程环境，抽象出底层硬件或操作系统的细节，并允许程序在任何平台上以相同的方式执行。因此，<strong>虚拟机最大的优点就是拥有可移植性。</strong></p><p>配合各种各样的 CPU 生成机器语言的代码生成处理是编译器中最复杂的部分，适配新出现的 CPU 架构重新开发代码生成处理，对语言处理器的开发者来说是很大的负担，虚拟机在减少这类负担上起到了很大作用。另一方面，与在硬件上直接执行相比，模拟虚拟的 CPU 运行的虚拟机在性能上有很大损失，但可以通过引入即时编译（JIT）技术来弥补。</p><p>虚拟机性能相关的实现技术可以了解一下：</p><ul><li>RISC 与 CISC</li><li>栈与寄存器</li><li>指令格式</li></ul><p>RISC 是 Reduced Instruction Set Computer（精简指令集计算机）的缩写，是通过减少指令的种类、简化电路来提高 CPU 性能的架构。具有代表性的 CPU 有 MIPS 和 SPARC 等。在移动设备上广泛使用的 ARM 处理器就属于 RISC。</p><p>CISC 是与 RISC 相对的一个词汇，是 Complex Instruction Set Computer（复杂指令集计算机）的缩写，简单来说就是“不是 RISC 的 CPU”。CISC 的每个指令执行的处理都非常大，而且指令的种类繁多，因此实现起来也比较复杂。</p><p>对用软件实现的虚拟机来说，我们就不能忽视取指令（Instruction Fetch，IF）处理所需要的成本。也就是说，做同样的处理时所需的指令数越少越好。好的虚拟机指令集是类 CISC 架构的指令集，它的全部指令都是高粒度的。</p><p>虚拟机架构的两大流派是栈式虚拟机和寄存器式虚拟机。栈式虚拟机原则上通过栈对数据进行操作，而寄存器式虚拟机的指令中包含寄存器编号，原则上对寄存器进行操作。</p><p>与寄存器式虚拟机相比，栈式虚拟机更为简单，程序也相对较小。然而，由于所有的指令都通过栈来交换数据，所以对指令之间的先后顺序有很大的依赖，很难实施交换指令顺序这样的优化。而寄存器式虚拟机由于指令中包含寄存器信息，所以程序相对较大。</p><p>用哪种架构取决于具体场景，著名的 Java 虚拟机（JVM）采用的是栈式虚拟机架构，而谷歌为优化移动设备性能，为 Android 提供的 Dalvik 虚拟机则采用的是寄存器式虚拟机架构。</p><p>虚拟机解释的中间语言（指令序列）被称为“字节码”，源于 Smalltalk 的指令是以字节为单位的。当然，不是所有虚拟机都拥有字节单位的指令集，例如 mruby 的指令集就是用 32 位整数表示的，可以称之为“字码”，但因为 JVM 比较出名且其采用的是字节码，所以一般将虚拟机解释的中间语言称之为“字节码”。字码与字节码的优缺点不在这里赘述。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《松本行弘：编程语言的设计与实现》，<!-- -->[日]<!-- --> 松本行弘，郑明智 译</li><li><a href="https://en.wikipedia.org/wiki/Compiler" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Compiler</a></li><li><a href="https://en.wikipedia.org/wiki/Ahead-of-time_compilation" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Ahead-of-time_compilation</a></li><li><a href="https://en.wikipedia.org/wiki/Just-in-time_compilation" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Just-in-time_compilation</a></li><li><a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Abstract_syntax_tree</a></li><li><a href="https://en.wikipedia.org/wiki/Library_(computing)" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Library_(computing)</a></li><li><a href="https://en.wikipedia.org/wiki/Runtime_system" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Runtime_system</a></li><li><a href="https://en.wikipedia.org/wiki/Virtual_machine" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Virtual_machine</a></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>工具</category>
            <category>编程语言</category>
        </item>
        <item>
            <title><![CDATA[Web 前端性能优化：解析函数节流与防抖的实现]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/JavaScript/debouncing-and-throttling</link>
            <guid>/Computer-Technology/Web/JavaScript/debouncing-and-throttling</guid>
            <pubDate>Sun, 25 Apr 2021 22:56:00 GMT</pubDate>
            <description><![CDATA[前端开发中广泛采用的优化技巧，函数节流与防抖。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2021-04-26 22:48:00 </em></p></blockquote><p>前端开发中，有一个使用较为普遍的性能优化技巧，即函数节流（Throttle）和防抖（Debounce），其主要作用是根据时间对函数调用做以限制。最常见的业务场景是监听页面的 <code>scroll</code> 事件，浏览器可以在 1s 内触发该事件数次（甚至达数十次），如果事件处理程序在这 1s 内多次执行，必然会造成一定的性能问题，影响用户体验。</p><p>本质上，函数节流和防抖并不是控制事件源的触发次数，而是在事件短时间内连续多次触发之后控制相应事件处理程序的调用频率。</p><ul><li>节流：在一段连续时间内，限制函数在一定时间间隔内仅能调用一次。（例如，时间间隔为 1s，那么 10s 内至多被调用 10 次。）</li><li>防抖：在连续的函数调用中，限制两次函数调用的时间间隔应大于一定时间。（例如，时间间隔为 1s，连续调用函数多次且每次间隔小于 1s，那么 10s 内至多被调用 1 次。）</li></ul><blockquote><p><a href="https://css-tricks.com/debouncing-throttling-explained-examples/" target="_blank" rel="noopener noreferrer">推荐阅读：通过示例解释防抖和节流</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="解析代码实现">解析代码实现<a class="hash-link" href="#解析代码实现" title="标题的直接链接">​</a></h2><p>在这里，主要是分析一下如何用代码实现函数的节流和防抖功能。当然，并不打算自己手写实现，以目前比较成熟的工具库（<a href="https://lodash.com/" target="_blank" rel="noopener noreferrer">Lodash</a>）所提供的实现为基础来进行分析。</p><p>大致的实现思路基本上一样，都是利用闭包，维护内部状态，根据内部状态来对函数调用做具体控制。如下所示：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">debounce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">func</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> time_interval</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    func</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">apply</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">thisArg</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> arguments</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 对函数进行防抖处理包装</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> debounced </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">debounce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">debounced</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 调用 n 次</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="防抖debounce">防抖（Debounce）<a class="hash-link" href="#防抖debounce" title="标题的直接链接">​</a></h3><blockquote><p><a href="https://github.com/lodash/lodash/blob/master/debounce.js" target="_blank" rel="noopener noreferrer">_<!-- -->.debounce 源码</a></p></blockquote><p>我们首先看一下其源码主体结构：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">debounce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">func</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> wait</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> options</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 内部状态</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> lastArgs</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lastThis</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 保存最后一次函数调用传入的参数列表和 this 指向</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    maxWait</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    result</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 函数执行结果</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    timerId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lastCallTime</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：主要用来限制函数调用</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// wait 没有指定时，默认利用 requestAnimationFrame API 做了性能优化</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> useRAF </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">wait </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> wait </span><span class="token operator" style="color:#393A34">!==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> root</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">requestAnimationFrame</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'function'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 闭包结构</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">debounced</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter spread operator" style="color:#393A34">...</span><span class="token parameter">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 工具方法</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  debounced</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">cancel</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> cancel</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  debounced</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">flush</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> flush</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  debounced</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">pending</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> pending</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> debounced</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这是符合利用闭包实现的思路的，其中还接受第三个参数 <code>options</code>，lodash 库对该防抖功能做了增强，同时也添加了三个工具方法 <code>cancel</code>、<code>flush</code>、<code>pending</code>。很有意思的是，lodash 默认利用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener noreferrer"><code>requestAnimationFrame</code> API</a> 做了性能优化。</p><p>防抖的核心思想是：<strong>限制两次函数调用的时间间隔应大于一定时间</strong>。来看看具体的实现：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">debounce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">func</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> wait</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> options</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 实际调用函数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">invokeFunc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> args </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lastArgs</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> thisArg </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lastThis</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lastArgs </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lastThis </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lastInvokeTime </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> time</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> func</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">apply</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">thisArg</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：利用 apply 调用，保证 this 指向和参数列表正确</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：创建超时器，异步调用函数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 异步调用的目的是在两次调用之间时间间隔过短（不符合限制条件）时，延后调用直至满足条件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">startTimer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">pendingFunc</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> wait</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">useRAF</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      root</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">cancelAnimationFrame</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timerId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> root</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">requestAnimationFrame</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pendingFunc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">setTimeout</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pendingFunc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> wait</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 判断是否可以调用函数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">shouldInvoke</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> timeSinceLastCall </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> time </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lastCallTime</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> timeSinceLastInvoke </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> time </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lastInvokeTime</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：这一行的判断条件，限制两次函数调用的时间间隔应大于一定时间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      lastCallTime </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      timeSinceLastCall </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> wait </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      timeSinceLastCall </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">maxing </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> timeSinceLastInvoke </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> maxWait</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">timerExpired</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> time </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token known-class-name class-name">Date</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">now</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：超时器到期后，需要再次检查是否满足条件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">shouldInvoke</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">trailingEdge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    timerId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">startTimer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timerExpired</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">remainingWait</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">debounced</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter spread operator" style="color:#393A34">...</span><span class="token parameter">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> time </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token known-class-name class-name">Date</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">now</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> isInvoking </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">shouldInvoke</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lastArgs </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> args</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 每次调用都更新保存的参数列表和 this 指向</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lastThis </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lastCallTime </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> time</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：记录每次函数调用的时间，在下一次调用时对时间间隔进行判断</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：进行两次调用时间间隔判断，并创建超时器异步执行函数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">isInvoking</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timerId </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">leadingEdge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lastCallTime</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">maxing</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        timerId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">startTimer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timerExpired</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> wait</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">invokeFunc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lastCallTime</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timerId </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      timerId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">startTimer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timerExpired</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> wait</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>源码中像 <code>trailingEdge()</code>、<code>leadingEdge()</code> 、<code>remainingWait()</code> 等可以暂时忽略掉，这些函数主要是 lodash 为结合 <code>options</code> 对防抖功能做的一些增强功能。</p><p>依据源码，防抖的实现思路是：利用闭包返回一个待调用函数 <code>debounced</code>，实际要调用的函数 <code>func()</code> 采用异步调用的方式，在我们每次调用函数时，利用 <code>shouldInvoke()</code> 函数（主要是利用 <code>Date.now()</code> 与 <code>lastCallTime</code>）判断是否满足时间间隔条件，在满足条件时利用 <code>startTimer()</code> 函数创建一个超时器去异步调用 <code>func()</code> 函数，而在每次超时器到期后要调用 <code>func()</code> 函数时都要通过 <code>shouldInvoke()</code> 函数再次检查是否满足条件，不满足则继续延迟调用，直至满足条件后执行 <code>func()</code> 函数（主要为 <code>invokeFunc()</code> 函数）。</p><p>这里要注意的是实际要调用的 <code>func()</code> 函数是被异步调用的，并且为了保证 <code>this</code> 指向和参数一致，使用 <code>apply()</code> 方法去调用。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="防抖增强">防抖增强<a class="hash-link" href="#防抖增强" title="标题的直接链接">​</a></h4><p>lodash 对防抖功能做了增强，先来看看之前提到的三个工具方法。</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">cancelTimer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">useRAF</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    returnroot</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">cancelAnimationFrame</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">clearTimeout</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">cancel</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timerId </span><span class="token operator" style="color:#393A34">!==</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">cancelTimer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timerId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 清除超时器，即取消异步的 func() 函数调用</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 将状态初始化</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  lastInvokeTime </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  lastArgs </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lastCallTime </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lastThis </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> timerId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>cancel()</code> 这个工具方法提供了<strong>将要执行的 <code>func()</code> 调用取消掉</strong>的功能，实现该功能也得益于其异步调用的实现方式。</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">trailingEdge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  timerId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：虽然丢弃了引用，但没有清除超时器</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">trailing </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> lastArgs</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：利用 lastArgs 在调用 func() 函数前做了判断</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">invokeFunc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：该函数内部也清除了 lastArgs</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  lastArgs </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lastThis </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：将参数列表清除，意味着将不会再次调用 func() 函数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">flush</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> timerId </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">trailingEdge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token known-class-name class-name">Date</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">now</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>flush()</code> 这个工具方法提供了<strong>立即调用 <code>func()</code> 函数</strong>的功能，但要注意的是其内部实现中只是丢掉了 <code>timerId</code> 对已经发起的超时器任务的引用，并没有清除超时器，那么会不会造成对 <code>func()</code> 函数的重复调用呢？根据源码来看，在超时器到期之后的 <code>func()</code> 函数调用之前用 <code>lastArgs</code> 做了判断，而在调用 <code>flush()</code> 过程中清除了 <code>lastArgs</code> 的值，也就避免了重复调用 <code>func()</code> 的问题。</p><p>至于为何不直接清除掉超时器，而只是丢弃引用？不得而知。但我猜测应该是基于模块设计上的考虑，因为 <code>trailingEdge()</code> 函数被调用的时机就是超时器到期之后，所以它只负责清除掉 <code>timerId</code> 的值即可。</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pending</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> timerId </span><span class="token operator" style="color:#393A34">!==</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>pending()</code> 这个工具方法就比较简单了，仅提供了<strong>获取目前是否处于等待调用 <code>func()</code> 函数的状态</strong>的功能。</p><p>接下来看看 <code>options</code> 这个参数带来了哪些功能上的增强。</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> maxWait</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> leading </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 默认 false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> maxing </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> trailing </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 默认是 true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">isObject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">options</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  leading </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">options</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">leading</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  maxing </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'maxWait'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> options</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  maxWait </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> maxing </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token known-class-name class-name">Math</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">+</span><span class="token plain">options</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">maxWait</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> wait</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> maxWait</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：取 maxWait 和 wait 最大值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  trailing </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'trailing'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> options </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">options</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">trailing</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> trailing</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>{ leading, maxWait, trailing }</code> 有三个选项字段。先来看看 <code>maxWait</code> 选项：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">remainingWait</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> timeSinceLastCall </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> time </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lastCallTime</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> timeSinceLastInvoke </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> time </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lastInvokeTime</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> timeWaiting </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> wait </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> timeSinceLastCall</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：maxWait 决定了超时器的超时时间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> maxing</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token known-class-name class-name">Math</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">min</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timeWaiting</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> maxWait </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> timeSinceLastInvoke</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> timeWaiting</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">shouldInvoke</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> timeSinceLastCall </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> time </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lastCallTime</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> timeSinceLastInvoke </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> time </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lastInvokeTime</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lastCallTime </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    timeSinceLastCall </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> wait </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：maxWait 决定了该不该调用 func() 函数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    timeSinceLastCall </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">maxing </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> timeSinceLastInvoke </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> maxWait</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">timerExpired</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  timerId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">startTimer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timerExpired</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">remainingWait</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">debounced</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter spread operator" style="color:#393A34">...</span><span class="token parameter">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> isInvoking </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">shouldInvoke</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">isInvoking</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">maxing</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      timerId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">startTimer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timerExpired</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> wait</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">invokeFunc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lastCallTime</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>虽然代码看起来很多，但实际 <code>maxWait</code> 只提供了一个很简单的功能：<strong>在对函数进行防抖处理中，两次 <code>func()</code> 函数实际调用间隔至多为 <code>maxWait</code>，也就是说只要两次调用时间间隔达到该时间，无论 <code>wait</code> 限制如何，均会执行 <code>func()</code> 函数调用。</strong></p><p>这个其实解决了因为函数调用频率过高，<code>func()</code> 长时间得不到实际调用的业务问题。</p><p>接下来，需要把 <code>leading</code> 和 <code>trailing</code> 两个选项放在一起看，因为它们刚好是对立的一组值，本质上解决的是同一个问题：<code>func()</code> 函数实际调用的时机。</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">leadingEdge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  lastInvokeTime </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> time</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  timerId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">startTimer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timerExpired</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> wait</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：利用 leading 判断</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> leading </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">invokeFunc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">timerExpired</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> time </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token known-class-name class-name">Date</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">now</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">shouldInvoke</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">trailingEdge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：超时器到期后总是调用 trailingEdge() 函数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  timerId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">startTimer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timerExpired</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">remainingWait</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">trailingEdge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  timerId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 关键：利用 trailing 进行判断</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">trailing </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> lastArgs</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">invokeFunc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  lastArgs </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lastThis </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">debounced</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter spread operator" style="color:#393A34">...</span><span class="token parameter">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">isInvoking</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timerId </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">leadingEdge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lastCallTime</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>首先说结论：<strong>当 <code>leading=true</code> 时决定对 <code>func()</code> 函数的实际调用在创建超时器时（提前调用），而 <code>trailing=true</code> 时决定对 <code>func()</code> 函数的实际调用在创建的超时器到期后（延后调用）。</strong></p><p>其实要搞懂其中的思路，只要理解了以上几个函数在实际调用中的执行顺序即可：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">debounced</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">leadingEdge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">timerExpired</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">trailingEdge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">debounced</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里其实是一个调用循环，无论 <code>leading</code> 和 <code>trailing</code> 值如何，其相应的函数 <code>leadingEdge()</code> 和 <code>trailingEdge()</code> 都参与其中，只不过在不同值的情况下，这两个函数所扮演的角色不同而已。这里举一个简单的例子即可说明问题：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 当 leading=true，且 trailing=false 时：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// leadingEdge() 函数主要作用是调用 invokeFunc() 函数来实际调用 func() 函数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// trailingEdge() 函数主要作用则是超时器到期后清除掉内部状态，主要是 timerId 的值</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>那么这里有个值得考虑的点，按照常规的实现思路不应将 <code>leadingEdge()</code> 和 <code>trailingEdge()</code> 函数放在一起同时处理逻辑，而应该按照条件判断独立成两条线去处理逻辑。根据源码分析来看，我猜测是因为 lodash 所提供的 <code>leading</code> 和 <code>trailing</code> 两个选项并非完全对立的一组值，可能存在它们同时为 <code>true</code> 的情况（在函数的顶部注释中有所说明）。当然这里不能同时为 <code>false</code>，因为分析下源码的实现，你会发现 <code>func()</code> 函数将永远得不到实际调用。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="节流throttle">节流（Throttle）<a class="hash-link" href="#节流throttle" title="标题的直接链接">​</a></h3><blockquote><p><a href="https://github.com/lodash/lodash/blob/master/throttle.js" target="_blank" rel="noopener noreferrer">_<!-- -->.throttle 源码</a></p></blockquote><p>之所以先解析防抖的实现，是因为节流的源码实现中引用到了防抖的源码实现，这样反而让节流的源码实现看起来相当简洁。源码如下：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">throttle</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">func</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter">&nbsp;wait</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter">&nbsp;options</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">&nbsp;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> leading&nbsp;</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">&nbsp;</span><span class="token boolean" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> trailing&nbsp;</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">&nbsp;</span><span class="token boolean" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain">&nbsp;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> func&nbsp;</span><span class="token operator" style="color:#393A34">!==</span><span class="token plain">&nbsp;</span><span class="token string" style="color:#e3116c">'function'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">&nbsp;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">throw</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">TypeError</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Expected&nbsp;a&nbsp;function'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain">&nbsp;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter function" style="color:#d73a49">isObject</span><span class="token parameter punctuation" style="color:#393A34">(</span><span class="token parameter">options</span><span class="token parameter punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">&nbsp;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        leading&nbsp;</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">&nbsp;</span><span class="token string" style="color:#e3116c">'leading'</span><span class="token plain">inoptions&nbsp;</span><span class="token operator" style="color:#393A34">?</span><span class="token plain">&nbsp;</span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">options</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">leading</span><span class="token plain">&nbsp;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">&nbsp;leading</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        trailing&nbsp;</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">&nbsp;</span><span class="token string" style="color:#e3116c">'trailing'</span><span class="token plain">inoptions&nbsp;</span><span class="token operator" style="color:#393A34">?</span><span class="token plain">&nbsp;</span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">options</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">trailing</span><span class="token plain">&nbsp;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">&nbsp;trailing</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">debounce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">func</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">&nbsp;wait</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">&nbsp;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        leading</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        trailing</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string-property property" style="color:#36acaa">'maxWait'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> wait</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>options: { leading, trailing, maxWait }</code> 选项中的 <code>leading</code> 和 <code>trailing</code> 不再细说，参考防抖的理解即可。而 <code>maxWait</code> 选项则是关键，它没有对外暴露，而是直接默认使用了 <code>wait</code> 的值（实际上这也是让节流可以利用防抖来实现的主要原因）。</p><p>接下来，我们主要分析下 <code>maxWait</code> 选项是如何让节流可以利用防抖来实现的核心思路。回过头来，我们看看函数的节流和防抖的概念，就可以发现它们本质上都是对函数调用频率做了限制，<strong>唯一不同的是函数防抖会在函数调用过快时（不满足限制条件时）无限期的延迟函数的实际调用，而函数节流必须要保证函数的实际调用要在限制时间内至少发生一次。</strong></p><p>而在前面我们分析防抖的功能增强实现时，<code>maxWait</code> 选项为函数防抖提供的正是在达到 <code>maxWait</code> 时间时实际的函数调用必须发生一次的功能。那么，当 <code>wait === maxWait</code> 时恰好满足了节流的要求。所以，lodash 在增强防抖的时候，同时利用防抖也实现了节流的功能。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>函数的节流和防抖是个很常用的性能优化技巧，实现思路也比较简单，但 lodash 对基本的逻辑进行了增强，以适应更多的业务场景。另一方面，在源码实现层面来看，lodash 对防抖的增强逻辑反而降低了节流实现的复杂性，这在开发过程中可能是更值得借鉴的一种思路。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>JavaScript</category>
            <category>性能优化</category>
            <category>节流与防抖</category>
        </item>
        <item>
            <title><![CDATA[南五台见云海]]></title>
            <link>https://wang1212.github.io/Life/tourism/tourism-nanwutai</link>
            <guid>/Life/tourism/tourism-nanwutai</guid>
            <pubDate>Thu, 08 Apr 2021 00:09:00 GMT</pubDate>
            <description><![CDATA[爬过那么多座山，那么多次想要见的云海，就在这次不经意间实现了。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2021-06-17 01:32:00 </em></p></blockquote><u>2021-04-04</u><br><br><p>爬过那么多座山，那么多次想要见的云海，就在这次不经意间实现了。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="清明时节雨纷纷">清明时节雨纷纷<a class="hash-link" href="#清明时节雨纷纷" title="标题的直接链接">​</a></h2><p>不出意外，今年的清明又要下雨了，不得不感叹古人的智慧，能如此精准的预测天气并总结出规律。这次清明节假期刚好和周末在一块，一共三天假期，对于打工人来说，三天的假期可以计划个旅游了。</p><p>说到旅游，每年要爬一座大山的目标倒是可以放在清明节来完成，不过细细打算之后，发现下雨天爬山和出行略微不便，便放弃了这个想法。但是，难得有三天的假期，宅在房间可不是什么好主意，看天气预报的样子倒也没什么倾盆暴雨的意思，微风细雨而已。所以呢，不爬大山，爬个小山也是挺不错的，打工人最缺的就是锻炼了，借此机会锻炼一番未尝不可。</p><p>听说西安周边的小山也挺多，翠华山也许是大学生最爱去的一个景点，遗憾自己大学时候没有去过。而另外一个秦岭终南山南五台景区倒是听起来不错，可能比翠华山更适合爬山。眼看清明将近，也没有太多时间去仔细考虑了，就决定去南五台山了。周五开始休假，周六是清明节，把这次爬山计划则放在了清明节这天，因为做出最终这个决定是在周五的白天，恰好也有几个朋友要一块去。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="启程">启程<a class="hash-link" href="#启程" title="标题的直接链接">​</a></h2><p>南五台山海拔 1800 多米高，结合景区介绍，按以往经验，爬上去应该也就 2 小时左右，为了早点下来，早上出发的就比较早了，得赶在 9:30 左右到达山脚下。去景区的交通也比较便利，早上 7 点钟出发，先坐地铁再坐公交，基本上路途也就 2 个小时不到，9 点多一点我已经到景区门口了，其它朋友也即将赶到。都说了清明节必然会下雨，但出发的时候并没有下雨，只是天气有点阴沉。当然，不出所料，等到了目的地下了公交车，便感觉有些许雨滴落到身上。</p><p>等了大概十来分钟的样子，朋友们到齐了，买了门票就准备出发，因为大家都已经吃过早饭了。说到这里，那不得不吐槽一下票价，45 元/人，但实际上景区看起来相当的一般，这也是陕西这边旅游被吐槽的重点了，景区门票偏贵，且景区修缮的一般。听待在南方那边的朋友说，这个情况还好。</p><p>不得不说，现在的景区不管山有多高，旅游观光车倒是常备，一个人单程 20 元。话说回来，来的目的就是为了锻炼身体，坐公交车岂不是枉虚此行。不过，爬完此山，待我写下这篇文章的时候，对于爬山的过程我只做两个字的评价：坑爹。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="上山">上山<a class="hash-link" href="#上山" title="标题的直接链接">​</a></h2><p>上山其实分两段，第一段可以坐旅游观光车上去，第二段则在停车场的位置开始爬，最终就可以到达山顶。其实，大多数山区旅游景点也是类似的安排。不过这里面有一个让人感觉很坑的就是，这个景区的第一段竟然只有车道，没有上山的步道。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="沿车道而上">沿车道而上<a class="hash-link" href="#沿车道而上" title="标题的直接链接">​</a></h3><p>众所周知，汽车上山都是盘旋而上，要是行人也按这种上法，那岂不是得累死，多走多少冤枉路。但是，来过这里，真的就有这种奇葩的操作，也就只有车道，按景区的说法，车道大概 11 公里，到了停车场之后会开始从上山步道攀爬，不过看了看地图上山步道也是太短了，完全体会不到爬山的乐趣。于是，我们预期的 2 小时上山，要是坐旅游观光车上去然后开始爬，估计半个小时就完事了，我们做了一个决定：全程步行而上。事后，我觉得这真是一个大胆的决定。</p><p>一路沿着公路而上，明显能感觉到我们走的路大概有三分之二都是冤枉路。期间，有个朋友抄了一次近路，而我们其它人沿着公路走了大概有 5- 10 分钟的样子才遇到他，而他大概就用了不到一分钟，可见我说的三分之二都是冤枉路那可不是说着玩的，千真万确。中途有遇到过断断续续的上山步道，不过看样子那可是年久失修，为了安全起见，我们还是老老实实沿着公路而上。不过值得高兴的是，中途有遇到上到上面之后发现有的上山步道应该还是可以走得，而且能省不少时间，于是我们计划下山时走这段下山步道。</p><p>预计爬到山顶得 2 个小时左右，我们大概 10 点开始出发的，到中午十二点这会距离停车场的地方还有三四公里的样子，也就是说我们两个小时的时间才走了全程一半，这可真的有点打击人。路途中，还见过几个人在半路上等车，想来也是与我们情形差不多了。不过，朋友们还好，都愿意坚持继续往上走，想到原来爬峨眉山从清晨爬到傍晚，现在才两个小时也不算什么。</p><p>全程 11 公里，走到最后的时候，为了给自己打气，我们开始关注路边的路标，每遇到一个石碑路标，我们就知道已经又走了一公里了。直至下午一点钟左右，我们到了停车场，也就是说我们第一段的路程已经结束了，这个时候大家还是很开心的，拿出各自带的食物，便休息了一会，补充一下体力。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="爬山">爬山<a class="hash-link" href="#爬山" title="标题的直接链接">​</a></h3><p>直至此时，我觉得才到了真正爬山的时候，有专门的上山步道，一路上也偶有小景点。回想起前一段的路程，那真的是什么景色也没有，就是单纯的沿着公路而上，全靠我们路上聊天来打发无聊。</p><p>其实第二段路程没有多远，看地图也能看出来，大概半个小时左右就能到山顶。不过有趣的是，快到山顶的时候，路上出现了两条岔路，我们大概讨论了一下，就走右边这条岔路了，想着回头也可以从左边岔路下来，也算把所有的景点走到了。右边这条步行道，其实还是比较陡峭的，而且路途也稍长，对于我们已经走了 11 公里平路的人来说，有点体力不支的感觉，一路上也得断断续续的休息一下。</p><p>很快，我们便到了山顶，想来还是比较失望的，山顶的空间比较小，而且也没啥好的景色和寺庙这些，感觉人工修缮的痕迹严重，而且也有点年久失修的感觉，可见景区维护工作做的还是很差的。当然，最有意思的是，山顶没有信号，商铺的老板专门拉了条宽带，以便各位游客扫码付款。我们没有逗留太久便准备下山了，一路上山的时候雾气还是比较重的，这会山顶的雾气更重了，而且雨似乎也有越下越大的感觉。</p><p>其实到目前为止，今天对这个景区的印象还是比较差的。下山过程中，大家都已经有点疲惫了，在遇到岔路时，讨论是否按之前想的那样去左边岔路看一看然后下山，有人提议既然来都来了，还是去看看吧，况且门票还那么贵，大家一致同意。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="云海">云海<a class="hash-link" href="#云海" title="标题的直接链接">​</a></h3><p>说的没错，要是直接下山，没来左边这条岔路，那今天可能就真的趁兴而来，失望而归了。不过，我们的运气还是不错的，都说爬山要是遇到云海那可真的很漂亮的风景，今天我们真的遇见了。之前就听说过，云海必然是刚下过雨后，天气放晴才会看到，爬了那么多次山，一直希望能见到云海，可是每次出去旅游为了方便出行，都是选择天气好的时候去，见不到云海也是必然的了。这次刚好遇到清明节，微风细雨过后，便见到了云海。</p><p>刚开始看到云海的景象之后，大家感觉到了一番惊喜，瞬间对这个景区的好感度飙升。为了记录下来，我们沿路拍照，拍视频。本来我们是打算下山的，匆匆路过这边而已，结果看到云海之后，因为路边树木太多，拍照容易被挡住，我们就打算上到眼前最高的那座山顶去记录下这片云海的美丽景色。到了山顶之后，周围豁然开朗，云海漂亮极了，这个时候感觉今天真的是不虚此行。</p><p>欣赏过这片云海的美丽景象之后，我们便很快下山了，因为时间已经到下午快三点钟了，根据上山的时候推算来看，下山估计也得快五点了，而我们预计的是下午两三点就已经到山脚下了。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="下山">下山<a class="hash-link" href="#下山" title="标题的直接链接">​</a></h2><p>下山其实比较快，因为路途的景色都已经看完了，只是单纯了为了回家，早点下山，我们很快便到了停车场的位置，没有休息继续剩下 11 公里的车路。而这个就比较痛苦了，因为今天已经走了这么多路，腿和脚已经有点酸疼了，尤其是走这种平路对脚来说是比较痛苦的，这就相当于我们一天走了 30 公里的平路。到山脚下的时候已经五点半了，天色已晚，我们本来打算可以去市区一块吃顿饭的，奈何因为不太顺路，就各自回家了。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>整个过程中，我没有提到太多的景点名称，原因一方面与我自己有关，我其实不太喜欢拍照，而且不是印象深刻的则记不住名称，我更喜欢去亲身感受自然风光，来一次就好好感受一下即可，而不是拍个好照片回去欣赏；另一方面呢，这个景区确实也维护的不太好，宣传大于实际，最后还是靠云海挽回了一点颜面。</p>]]></content:encoded>
            <category>生活</category>
            <category>旅游</category>
            <category>南五台</category>
        </item>
        <item>
            <title><![CDATA[洛阳]]></title>
            <link>https://wang1212.github.io/Life/tourism/tourism-luoyang</link>
            <guid>/Life/tourism/tourism-luoyang</guid>
            <pubDate>Fri, 01 Jan 2021 10:06:00 GMT</pubDate>
            <description><![CDATA[一年一度的目标还是得继续坚持，今年因为疫情只能去近一点的地方，目标洛阳老君山。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2021-01-01 10:06:00 </em></p></blockquote><u>2020-09-05</u><br><br><p>一年一度的目标还是得继续坚持，今年因为疫情只能去近一点的地方，目标洛阳老君山。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2020">2020<a class="hash-link" href="#2020" title="标题的直接链接">​</a></h2><p>相信 2020 年给很多人留下了深刻的印象，这一年不像往年大家过完春节后匆匆回到岗位继续工作，由于疫情的缘故导致很多人春节期间休了很长时间的假才回到工作岗位，同时也催生了远程办公的热潮......不过，说快也快，2020 年已然成为过去，又迎来了新的一年。</p><p>过去的一年里，即便疫情给大家带来了诸多不便，但国内控制的比较好，下半年大家的生活基本上也已恢复正常，因此也坚持了给自己定下的每一年的计划，比如每年爬一座大山。由于春节期间休假时间太长，导致复工后也一直工作比较忙，本以为自己今年没有时间完成这个目标了，但还是完成了，挺高兴的。遗憾的是，过了这么长时间才记录，记忆没有当时那么清晰了…</p><p>今年选择的是洛阳的老君山，偶然在抖音上看到的，感觉风景还不错，也听身边去过的朋友说还行，就打算去看看。事实上，更重要的原因是因为离得近吧，因为工作实在太忙，只有周末两天的时间可以安排，就选了近一点的地方。计划中爬完山再在洛阳其它景区玩一玩，实际上后来发现由于交通问题影响了整个计划，只能爬了山，就急急忙忙赶了回来。不过，两天时间下来，感觉还是挺不错的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="洛阳">洛阳<a class="hash-link" href="#洛阳" title="标题的直接链接">​</a></h2><p>洛阳还是挺著名的，很多人知道它应该就是因为“龙门石窟”了吧，其实我也差不多。身边有朋友去过洛阳好多次，也有朋友在那边上过学，但我依然对那个地方还是挺陌生的，或许是平时和伙伴们交流的太少了，我想主要也是因为平时大家也都比较忙吧。</p><p>工作第三年了，大家进入社会时间长了，都疲于应对工作以及一些自己的事情，不像以前那样经常抽空吹吹牛，说说自己的烦心事了，大家都在慢慢成长，我也一样。自己从小就比较喜欢安静，内向一些，也没有给自己培养太多的爱好，长大了之后发现没有爱好，在生活之余似乎也没有泄压的方式，不过自己还好，会经常听听歌、看看书、打打游戏什么的，总能找点打发时间和放松的事情来干。除此之外，每年爬一座大山就算是一种爱好了吧。</p><p>洛阳的交通还是挺便利的，坐高铁过去也就一个多小时时间，计划周五晚上过去，但发现周五实在太赶，因为高铁晚上 8 点左右就没了，周五下班根本来不及，所以只能周六早上过去，这样的话在洛阳那边的时间安排就比较紧了。早上到洛阳已经是十点左右了，下了高铁还得去汽车站，去老君山所在的栾川县只有汽车比较方便。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="栾川县">栾川县<a class="hash-link" href="#栾川县" title="标题的直接链接">​</a></h3><p>从洛阳市坐汽车到栾川县城，几乎要 3 个小时左右，这是比较出乎意料的，没想到来的时候坐高铁没花太多时间，反而坐汽车得耽搁这么长时间，完全没有 19 年去峨眉山坐高铁来的舒服和省事。到栾川县下车的时候已经是下午两点钟左右了，还没干啥呢，这都半天时间过去了，可见这次时间还是相当的紧张呢。</p><p>这次如果是周五晚上过来到洛阳的话，还能去洛阳市晚上转一转，那么第二天早上一清早就坐车，到栾川县也许就 10 点钟左右吧。无可奈何的是，周五的高铁实在是赶不上。</p><p>其实栾川县的著名景点不止老君山，还有鸡冠洞等等，本想着来了就多去几个地方玩一玩，反正来一趟也不容易，不过看这时间也紧张的是没办法。所以一下车吃了饭，就直奔老君山去了。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="老君山">老君山<a class="hash-link" href="#老君山" title="标题的直接链接">​</a></h3><p>前两次去华山和峨眉山一次是晚上夜爬的华山，另一次则是大白天爬的峨眉山。华山因为是夜晚爬的，所以到山顶已经 4 点多了，等了一会看了日出就紧接着下山了；而峨眉山是因为早上九点多开始爬，一直到傍晚 7 点多才爬到山顶，所以在山顶住了一晚上，第二天清晨去金顶看了日出就匆忙坐着缆车下山去重庆了。而这一次来老君山则不一样，因为下午三点多到的，不可能在傍晚前爬完就下山，或者直接爬到山顶，而且老君山也不适合夜爬，所以在来之前就已经在山脚定好了一间民宿。</p><p>这家民宿店挺不错，服务挺周到，我们下午到店后，老板刚好有事出去要经过追梦谷，所以就捎带着我们过去了，追梦谷说起来离民俗店还是挺远的，应该至少有两三个公里吧。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="追梦谷">追梦谷<a class="hash-link" href="#追梦谷" title="标题的直接链接">​</a></h4><p>追梦谷也是老君山的一个挺有名的景区，入口处游玩的设施有很多，而且本来是平时的周末感觉人少才对，来了才发现人还挺多的。其实追梦谷也是一条上山路，不过看地图目前在半山腰以上的地方还有待开发，处于自由探险的区域。天气还不错，夏天的傍晚天黑的应该也没有那么早，既然来了就先爬个半山腰热热身。因为现在才记录，三四个月已经过去了，都忘记在追梦谷爬的海拔有多高，路途有几个公里了，只记得应该还是爬了至少有一个半小时的样子，一路上人挺多，而且路也比较好走。</p><p>在我看来，从追梦谷往上爬的人，应该和我们的想法差不多，也就热热身再下来，明天正式上山。当然，至于从这里爬到什么地方，我相信大部分人的目标应该是一致的，那就是“老君瀑布”。话说地图上看起来并不远，原以为一个小时左右就能到达，结果到一个小时的时候发现连个影都没有，只能听到微弱的水流声，莫非还很远？如果还很远的话，赶在天黑前下山的时间就不够了，不过想了想，既然都上到这了，哪有没看见瀑布就回去的道理呢。很久没有活动了，爬起山来还是挺不容易的，也确确实实起到了热身的作用。</p><p>也许是每个景点的忽悠人套路太深，等到了“老君瀑布”，抬头一看，发现这不是条水沟吗？唉，可能是因为现在水流太小的原因，远不如宣传的那般震撼人，反而有些许失望。没有太长时间逗留，就下山了。到山脚的时候才五点多的样子，天还亮着，完全没有黑夜要降临的样子，就到处转了转。结果发现，可能来的真不是时候，广场上那个硕大的老君雕塑被围起来了，好像在翻修吧，总之景区感觉最近没有完全开放的样子。这边有观光车，不过是收费的，虽然之前一路上碰见过，但现在要用的时候发现找不到车站在哪，索性就等等吧，总会有来往的观光车经过。路标、游客服务这些方面感觉老君山还是差点的，比起其它之前去过的景点来说的话。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="民宿">民宿<a class="hash-link" href="#民宿" title="标题的直接链接">​</a></h4><p>从追梦谷坐观光车回到民宿这边，时间已经到 6 点多了，天还亮着，回到房间休息了一会，准备吃晚饭。</p><p>不一会的时间，天色已经暗下来，并迅速进入了黑夜。民宿比酒店好一点的就是饭菜基本都是家常的，总会有点地方的特色，或者说让人会感到熟悉。饭菜还算不错，两个菜一个汤，米饭、稀饭都还算合胃口，毕竟晚上吃的也不是很多。吃了晚饭去山脚附近溜达溜达。</p><p>这块是民宿的集中区，到处都是民宿，当初在平台上订房间的时候看了这家还不错，来了之后确实还行，至少不让人失望。这里山脚附近繁华的地方并不大，十来分钟就能溜达完，可能是晚上气温太低的关系，外面的人也挺少的。虽然是夏天，但山上的温度可比不了城市，昼夜温差大，穿个短袖晚上在外面溜达还是挺扛不住的。</p><p>回到房间，洗了个热水澡，民宿的房间配置还算可以，能看得出来这家民宿可能才开业不到三年的样子，房间内的东西还都是比较新的。但是，话说回来，出门在外，卫生还是要注意的，再干净的也是用眼睛看到的，眼睛看不到的地方到底有多脏还说不来呢。洗完澡，玩会手机，好好睡一觉，准备第二天清晨爬山。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="爬山">爬山<a class="hash-link" href="#爬山" title="标题的直接链接">​</a></h4><p>老君山比较特殊，垂直方向上海拔和其它山一样挺高，但它水平方向上的距离也是相当的远，如果要徒步爬上去，可能花的时间比比它高的华山和峨眉山都要多，所以，先坐个缆车到半山腰再开始徒步爬山。</p><p>我之前两次爬山基本上很少坐缆车，来了就是为了爬山，想挑战一下自己，但这次也是根据实际情况必须得坐缆车，从上缆车到下缆车也足足花了 12 分钟之多。坐在缆车上，居高临下的感觉还是挺不错的，就是翻过了一座山头又是一座山头，也没有记住到底翻了几座山头，但时间确实花了 12 分钟。可见，如果是徒步爬山，这水平距离可得耗死多少人呢。</p><p>下了缆车，是一个广场，早上 8 点多钟的样子，广场上的人已经聚集了很多了，今天的天气也是相当的不错。在广场上逗留了一会，拍了几张照片，就开始找爬山的路。网上看的攻略还是挺玄乎的，有的人说是爬上去用了 3 个多小时，有的人则说是爬上去用了 5、6 个小时，不过根据地图上的推测，速度稍微快点，3 个小时应该还是挺靠谱的。于是乎，开始徒步上山了。</p><p>回想起前两次爬山的经历，华山因为是晚上爬的，虽然感觉路都很险峻，但什么也看不到，倒也觉得没有什么，就是看完日出下山的时候确实难以想象晚上是怎么爬上去。峨眉山呢，一路上则是没啥险峻的，总结起来就两个特点，一个是路途太过遥远，从早上九点多爬到傍晚 7 点多才到山顶，第二个就是因为有野生的猴子调皮，一路上让人也挺胆战心惊的。</p><p>老君山则不一样，刚开始爬就是单纯的爬台阶，虽然累，但也没啥害怕的。而且，当时看攻略说是有几个景区是选择性的，很险峻，在悬崖峭壁上走，想着来爬山安全第一，就没有打算走那些地方。不过爬着爬着，就感觉不太妙了，发现好像爬山的路基本上就一条，没有分支，而且越爬越险峻，不免让人心里有点慌。不过，上都上来了，还有下去的道理么？</p><p>爬了一个多小时后，开始进入悬崖峭壁的阶段，原以为悬崖峭壁只是爬山路途中的很小一部分，没想到三个多小时的路程里面，竟然有两个小时在悬崖峭壁上走过，而且攻略中所说的那几个险峻的景区，并不是可选的，都是必经之路，这下可真是被坑惨了。好在经过三个多小时的努力，最终在中午 12 点左右到了山顶，山顶的地方并不想其它山那样大，很小很小，而且人满为患，很拥挤，走起路来都不方便，所以逗留了一会就准备赶紧下山了，不然今天可能错过最后一班车都回不了洛阳了。</p><p>第一次爬山的时候准备了一大堆的食物，背了一背包，发现爬山过程中其实饿得不快，主要是出汗多，缺水，而且停留下来吃会东西，一方面身上的汗干了会很冷，另一方面停留的时间太长，就会发现走不太动了，所以背的太多反而成了负担，负重前行。这一次来，索性就带了几瓶水，一部分吃的，中途也没有过多的停留，主要还是时间太过紧迫，害怕回不去。</p><p>计算着时间安排，可以继续从山顶徒步下到半山腰，也就是早上下缆车的地方，时间应该也还够。下山确实要比上山快得多，而且不知为什么，下山过程中确实发现了一条和上山时不同的路，一路上都在山中间的树林里穿梭，比起上山时那么险峻的情况要好得多。一点多钟的样子就已经到了广场，随即就抓紧排队，继续坐缆车下了山。退了民宿的房子，回到栾川县城还不到两点钟，本来想着去鸡冠洞玩一玩的，就怕去了要排队耽搁时间，反而赶不回去，索性就算了，饭也没有吃，直接返程洛阳市，在车上吃了剩下的食物填一填肚子。在车上，回想起早上的经历，最难忘的可能就是两个多小时都在悬崖峭壁上那段了吧，从来没有想象过自己会挑战这么刺激的东西，也算没有白来。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="返程">返程<a class="hash-link" href="#返程" title="标题的直接链接">​</a></h3><p>回到洛阳市，大概不到五点钟的样子，回去也就一个多小时坐高铁的时间，打算在洛阳转一转，顺便吃点有地方特色的饭，无奈发现龙门高铁站离市区中心还是比较远的，这样一个来回，恐怕回家都得大半夜了。算了，唉，又是算了，车上吃了零食，这会也不是很饿，就直接坐高铁回家了。下高铁，天还亮着，回来的还算早，吃个晚饭，回家早点休息吧。</p><p>这一次的旅程有点匆忙，一路上都在计算着时间，爬赶不上，爬回不来，两天的时间，大部分都是在路上，仅仅游玩了一个老君山，有很好好玩的地方错过了，下一次再来吧？算了，交通不便利，路上实在是耽搁时间，祖国这么大，下次去另一个地方吧。虽然仅仅去了老君山，但也来的值得，并非趁兴而来，失望而归，我还是比较满意的，就是赶了点。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="感想">感想<a class="hash-link" href="#感想" title="标题的直接链接">​</a></h2><p>前两年，刚毕业的时候在坚持着写笔记，今年算是有些懈怠了，本应该回来之后就很快写这篇文章的，一直拖到了元旦假期，很多时间点也记得不太清了，为什么隔了这么长时间还要写呢？因为看到前两年写的东西，觉得每一年的经历还是写下来的好，算是培养一个好习惯，未来也算是一笔宝贵的财富吧，毕竟记忆会随着时间变得模糊，但文字性的东西却是永垂不朽的。</p>]]></content:encoded>
            <category>生活</category>
            <category>旅游</category>
            <category>洛阳</category>
            <category>老君山</category>
        </item>
        <item>
            <title><![CDATA[Web 前端开发的心路历程]]></title>
            <link>https://wang1212.github.io/Life/2020-work-record-web</link>
            <guid>/Life/2020-work-record-web</guid>
            <pubDate>Sun, 15 Mar 2020 22:43:00 GMT</pubDate>
            <description><![CDATA[眼看着从事 Web 前端开发已然快三年了，是该想想自己在这块已经获得的东西，和以后的选择了。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2021-07-19 01:26:00 </em></p></blockquote><p>眼看着从事 Web 前端开发已然快三年了，是该想想自己在这块已经获得的东西，和以后的选择了。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="web-前端开发">Web 前端开发<a class="hash-link" href="#web-前端开发" title="标题的直接链接">​</a></h2><p>2019 年末一场“新冠病毒战役”打乱了每个人的生活，至今两月有余整个社会依然还没有完全恢复正常秩序。这场突如其来的“黑天鹅”事件相信打乱了很多人的生活计划，尤其是工作计划。作为自己从毕业到现在已从事 Web 前端工作将近三年的人来说，是时候该思考下当下的自己工作和技术栈积累情况，以及未来该如何继续下去。</p><p>我的专业并非计算机软件编程相关，而是“微电子”半导体产业相关的，至于为什么会在毕业的时候从事软件开发，我相信自己到现在可能也说不清楚。可能在潜意识里，我比较喜欢软件相关的东西，而对硬件相关的不是很感兴趣。</p><p>至于为何会选择“Web 前端”这个领域呢？我觉得算是一种巧合吧，也许与毕业前一次和在计算机专业学习的朋友交谈有关。总之，我自己目前还是非常喜欢这个领域的东西的，尤其是这个领域的发展相当快，技术栈更新几乎以天（周）计算。我比较喜欢折腾，也喜欢新鲜的东西，很遗憾的是，到现在也没折腾出来个啥好东西。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="市场趋势">市场趋势<a class="hash-link" href="#市场趋势" title="标题的直接链接">​</a></h2><p>Web 前端开发这个岗位的市场情况目前来说应该还算不错，缺人的高峰期在我毕业（2017）前一两年达到鼎盛，于是出现了相当多的培训机构，这个岗位却又出现了“低端人才”过饱和的现象，当然现在市场还是缺乏“高端人才”的。</p><p>而且，据说目前一线公司所谓的前端都被称为“大前端”，不仅要会基本的前端开发技术三大件 HTML/CSS/JS，更要懂一些 Node.js 相关的东西，离全栈更近一些。根据自己的经验，其实一点都不过分，因为前端开发的方式在以前是相当随意和零散的，以至于连一套开箱即用的开发工具和工作流都没有，这几年大家忙活不过是建立起 Web 前端的工作流，用简单的话来说就是“工程化实践”。</p><p>虽然自己不是科班出身，但我自己还是一直了解计算机基础相关的东西，比如网络通信、操作系统等等。软件工程是个相当重要的概念，之所以会出现“码农”这样的名词，我想是因为大部分程序员都没有科班背景或者扎实的计算机基础知识，写的代码和软件产品不具有工程美学，架构烂的一塌糊涂。据说，软件架构中相当多的东西都借鉴自建筑学，不管是不是真的，架构师通常是个比较重要的存在（大部分中小型公司没有），软件项目拥有好的设计架构、好的工程化模型可以让项目本身具备高的可维护性、可迭代性等等。了解这些东西我相信对自己的技术实力也有很多的提升。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="工程化实践">工程化实践<a class="hash-link" href="#工程化实践" title="标题的直接链接">​</a></h2><p>说到“工程化实践”，我也一直在积极探索，当然我并没有选择开箱即用的脚手架工具（例如 <code>create-react-app</code>），而是选择自己一步一步搭建。Web 前端的代码构建工具发展了好几代，主要存在 <code>grunt</code>、<code>gulp</code>、<code>webpack</code>这三种工具，当然目前（2020）是 <code>webpack</code>的天下，而且 5.0 版本即将到来。说到这些工具，使用的目的就是解放双手，能自动化的就自动化（比如文件合并、打包、压缩、图片优化、代码编译等等），所以我一开始就放弃了 <code>grunt</code>，转而使用配置更为简单的 <code>gulp</code>，基于任务模型配置的工具用起来确实简单方便，用了一个季度左右，开始使用 <code>gulp+webpack</code>的模式。至于原因，我觉得还是因为 <code>gulp</code>适合处理独立的单个文件，合并打包大量文件并不是它的强项，而且 <code>webpack</code> 的流行已出现了趋势，也算是顺应趋势吧。又过了半年的样子，我彻底放弃了 <code>gulp</code>，出于两个方面的原因：一是 <code>gulp</code> 的功能都可以被 <code>webpack</code> 替代，二是两个工具结合起来使用很不方便而且越搞越复杂。全面转向 <code>webpack</code> 之后确实相当方便，用起来也很顺手，而这之后不久 <code>webpack</code>几乎成了前端构建工具的第一选择，而且份额也在持续扩大，说起来自己还是押对了宝，而且也算半个尝鲜玩家（因为我是直接从 V4 版本开始用的，当时 V3 版本的还是主流，而且网络上 V4 版本的教程还很少）。当然，为了日后开发方便我还建立了一个 npm 项目，每次开发新的项目直接用该包就能构建开箱即用的工具套件，也算是完成了前端“工程化实践”。</p><blockquote><p><a href="https://www.npmjs.com/package/@wang1212/create-web-app" target="_blank" rel="noopener noreferrer">@wang1212/create-web-app</a></p></blockquote><p>说了这么多，前端的工程化实践其实只进行了大约三分之二，另外的三分之一则在服务器端。“大前端”概念的出现我想是业务驱动技术的结果，在移动互联网爆发的时间节点上，3G、4G 网络与业务日渐复杂的网站和 Web App 显得格格不入，所以 Web 优化则成了一件非常重要的事情，这也是“用户体验至上”的理念驱使的结果。</p><p>优化不仅在客户端要做，也要在服务器端做，因为用户在访问你的应用和网站时的速度体验相当重要，影响了用户的去留抉择。于是 HTTP2、服务器端渲染、WebP 等等的技术不断出现，而前端工程师要做很大部分工作集中在“服务器端渲染”。说起来也是相当的有趣，在很多年以前 JSP、PHP、NET 等等 Web 开发技术栈中页面就是通过每次用户请求时后端应用实时渲染后生成的，其中区别就不在这里细说了。</p><p>其实，Web 前端工程师之所以会触及到服务器端，主要还是因为“前后端完全分离”的开发模式和应用部署模式驱使的。后端工程师不再接触前端页面上的业务逻辑，专注于核心业务的开发，与前端相关的所有业务全部交由前端工程师去做，这样效率高，也更具可操作性，毕竟前端离客户更近，需求频繁的变动触及的都是前端的工作量。说到前后端完全分离，业界采用的主流方案应该就是 Nginx 反向代理了，而我也将这一模式引入公司的开发流程中，解决了前后端跨域调试和同步开发的问题。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="框架与库">“框架”与“库”<a class="hash-link" href="#框架与库" title="标题的直接链接">​</a></h2><p>目前前端开发有三大“库”（或者说“框架”）：<code>React.js</code>、<code>Vue.js</code>、<code>Angular.js</code>。本质上，前两者只能说是一个视图库，也就是 MVVM 中的 View 层；而 <code>Angular.js</code> 出自 Google 之手，是很多年前主流的 Web 开发利器，是一个非常重的框架，涵盖了很多概念，比如路由、组件、数据模型等等。从现在（2020 年）来看，<code>React.js</code> 占据了大部分市场份额，<code>Vue.js</code> 紧随其后，而 <code>Angular.js</code> 可能在逐步淡出开发者的视野。</p><p>为何前端开发需要借助这些“库”？我想有三方面原因：1. 客户端（浏览器、运行时）的兼容性问题这些库可以替开发者解决；2. 大部分性能问题也可以替开发者解决；3. “组件式开发” 是解决前端页面式开发存在诸多问题的利器。基于这些原因，开发者可以将更多的时间花费在解决业务问题上，而不是兼容性、性能问题上，“组件式开发”不仅解决了问题，还提高了代码的重用性。</p><p>至于如何选择，我觉得应该基于以下这些方面来考虑：1. 市场份额（社区活跃度、技术生态完整性）；2. 大型商业项目案例（我觉得很重要）；3. 上手难度；4. 技术方面的因素。其中，前三项我相信就把 <code>Angular.js</code> 淘汰了，虽然出自 Google 之手，但市场趋势不容乐观，而且上手难度异常高（了解下应该还是很有好处的）。剩下的两者中，<code>React.js</code> 也更具有优势，出自 Facebook 之手，有自家社交应用这种大型商业案例作为实践，而且社区异常活跃，技术生态完整性更占优势；而 <code>Vue.js</code> 也并非差劲，反而口碑也不错，国内外有不少人在用，而且开发者是一名中国人（居住美国），有提供中文文档，所以国内很多人因此（个人推测）选择了 <code>Vue.js</code>。作为我来说，我觉得中文文档是一个因素，但不是一个必要因素，我比较在意刚开始提到第四个方面因素，在技术上我有更多的考量，<code>React.js</code> 在我看来更符合软件工程化，虽然很多人觉得 <code>Vue.js</code> 保留了前端开发中倡导的“表现（CSS）-结构（HTML）相分离” 的模式，但我不是很同意，尤其是目前出现的 CSS-IN-JS 这种方案更加证明 <code>React.js</code> 这种模式更符合“组件化开发”，很优雅的解决了开发中存在的诸多问题。当然，我确实也选择了 <code>React.js</code> 技术栈，而且已经有将近两年的实践时间，尤其是去年底推出的 React-Hook 也用的相当满意。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="自己的现状">自己的现状<a class="hash-link" href="#自己的现状" title="标题的直接链接">​</a></h2><p>如果要说前端开发相关的东西，我觉得还有很多，不过在这里捡几个自己觉得重要的思考一下，更多的还是在意自己目前的现状。用了两年的时间去一步一步搭建前端工作流，完成前端“工程化实践”，熟悉 <code>React.js</code> 技术栈这大概就能概括我两年的前端开发历程了。最近这半年时间里，我一直都比较在意自己在 <code>Node.js</code> 这方面的所熟悉的程度，而且也在积极接触学习。除过纯技术方面的，业务方面，我一直在做的都是 PC 端后台管理型应用，在移动互联网爆发的时间节点，没有更多的参与到移动端 Web App 的开发中也是一大遗憾和不足。</p>]]></content:encoded>
            <category>生活</category>
            <category>工作</category>
            <category>记录</category>
            <category>Web</category>
            <category>Web 前端</category>
        </item>
        <item>
            <title><![CDATA[ODM 本地部署]]></title>
            <link>https://wang1212.github.io/Computer-Technology/GIS/gis-odm-deploy</link>
            <guid>/Computer-Technology/GIS/gis-odm-deploy</guid>
            <pubDate>Mon, 11 Nov 2019 11:26:21 GMT</pubDate>
            <description><![CDATA[GIS，ODM（OpenDroneMap）是开源的无人机航片处理工具套件，基本上已成为该领域开源的事实标准，这篇文章主要记录如何在本地进行 ODM 工具套件的部署。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2019-11-11 11:26:21 </em></p></blockquote><p>GIS，ODM（OpenDroneMap）是开源的无人机航片处理工具套件，基本上已成为该领域开源的事实标准，这篇文章主要记录如何在本地进行 ODM 工具套件的部署。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="odm">ODM<a class="hash-link" href="#odm" title="标题的直接链接">​</a></h2><p><a href="https://www.opendronemap.org/" target="_blank" rel="noopener noreferrer">OpenDroneMap</a> 是开源的无人机航片处理工具套件，其构建维护了丰富的解决方案生态系统，基本上已成为该领域内开源的事实标准。</p><p>ODM 团队提供了丰富的工具，包括命令行工具包，具有可视化、存储和数据分析的 Web 应用程序，轻量级 REST API，Python SDK，集群支持等，而这些资源全部开源，支持本地部署和构建。其中，WebODM 是一个提供可视化、存储、数据分析的无人机影像处理平台，采用了 Docker 容器化部署方案。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="webodm-本地部署">WebODM 本地部署<a class="hash-link" href="#webodm-本地部署" title="标题的直接链接">​</a></h2><p>ODM 团队一直在致力于维护庞大的 ODM 技术生态，同时也在不断的完善官方文档，下面为官方的本地化部署指南：</p><blockquote><p><a href="https://docs.opendronemap.org/installation.html#installation" target="_blank" rel="noopener noreferrer">WebODM 本地化部署指南（官方文档）</a></p></blockquote><p>官方文档目前相比较之前已改善很多，步骤也相当清晰，在这里只是梳理一下部署过程，并记录了一些要注意的细节。</p><p>WebODM 的整体架构设计很清晰，分解成了不同的模块：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ODM（算法处理，底层 API） -&gt; NodeODM（轻量级 REST API） -&gt; ClusterODM（集群支持，负载均衡） -&gt; WebODM（Web 应用）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>各个模块已由 ODM 团队制作成了 Docker 镜像发布到了 Docker Hub 上面，最简单的方案就是直接利用镜像进行部署，当然也支持自己构建，此处采用镜像部署。</p><p>官方推荐的环境是 Ubuntu 16.04 操作系统，64 位多核 CPU，至少 4GB 内存，20GB 磁盘空间。在这里，我们采用 Ubuntu 18.04 Server 宿主操作系统环境，不建议在 Windows 上部署，耗时且容易出错。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="安装-ubuntu">安装 Ubuntu<a class="hash-link" href="#安装-ubuntu" title="标题的直接链接">​</a></h3><p>可以直接在物理机安装 <a href="https://ubuntu.com/download/server" target="_blank" rel="noopener noreferrer">Ubuntu 18.04 Server</a> 操作系统，也可以利用虚拟机安装。</p><p>安装完成后进入系统，首先创建 <code>root</code> 用户，Ubuntu 默认没有 <code>root</code> 用户。执行：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo passwd root  # 该命令会要求先输入当前登录用户命令，再输入两遍要设置的 root 用户命令</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其次，换源。<code>apt</code> 是 Ubuntu 官方的软件包管理器，其仓库地址在国外，安装软件容易出错且速度缓慢，换为国内仓库地址（中科大、阿里云、网易云等等），网上搜索即可。主要改动的文件是 <code>/etc/apt/sources.list</code>，改动前注意备份。换掉仓库地址之后更新源，执行：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo apt-get update</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo apt-get upgrade</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>推荐使用 <a href="https://winscp.net/" target="_blank" rel="noopener noreferrer">WinSCP</a> 和 <a href="https://www.putty.org/" target="_blank" rel="noopener noreferrer">PuTTY</a> 利用 SSH 协议远程管理 Linux 操作系统。Ubuntu 默认不支持 <code>root</code> 用户远程登录，需修改 SSH 配置。先检查 ssh 服务是否已安装并在运行，执行：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo ps -e | grep ssh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>大部分情况下应该是已存在的，如果不存在则安装，执行：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo apt-get install openssh-server</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后，修改 <code>/etc/ssh/sshd_config</code> 配置文件，将其中的 <code>PermitRootLogin prohibit-password</code> 修改为 <code>PermitRootLogin yes</code> 即可，保存后需重启服务，执行：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">service ssh restart</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这样就可以利用 WinSCP 和 PuTTY 使用 <code>root</code> 用户远程管理多个 Linux 操作系统了。查看系统的 IP 地址，执行：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ifconfig -a  # eth 开头的为以太网卡地址</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="安装-git">安装 Git<a class="hash-link" href="#安装-git" title="标题的直接链接">​</a></h3><p>安装前先看看是不是已经安装了 Git，执行：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git --version</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>大部分情况下，Ubuntu 系统都会在安装时自动安装 Git，如未安装，执行：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo apt-get install git</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="安装-python3">安装 Python3<a class="hash-link" href="#安装-python3" title="标题的直接链接">​</a></h3><p>这里其实安装 Python2 或者 Python3 都可以，建议安装 Python3。检查是否已安装：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">python3 -V</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pip3 -V</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如未安装，则执行：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo apt-get install python3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo apt-get install python3-pip  # 注意，pip 不要安装错，必须为 python3-pip</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>安装完成后，上网搜索将 pip 的源换为国内源（中科大、阿里云、网易云等等）。默认情况下配置文件不存在，新建一个即可：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mkdir ~/.pip</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">touch ~/.pip/pip.conf</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="安装-docker">安装 Docker<a class="hash-link" href="#安装-docker" title="标题的直接链接">​</a></h3><p>这里必需要注意的是，不要使用 <code>apt</code> 安装 Docker，因为更新不及时，也不要查看网络上的教程，容易出错，直接根据官方文档进行安装：</p><blockquote><p><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener noreferrer">Docker 安装指南（官方文档）</a></p></blockquote><p>安装过程中遇到以下步骤时，进行换源：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo add-apt-repository \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$(lsb_release -cs) \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">stable"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其中，<code>deb [arch=amd64] https://download.docker.com/linux/ubuntu</code> 为 Docker 官方地址，在国外，基本很难安装成功，上网搜索换为国内地址（中科大、阿里云、网易云等等）再安装。顺利安装完成后，根据官方文档，测试 <code>hello-world</code> 镜像是否能运行成功。</p><p>Docker Hub 是 Docker 官方提供的镜像文件托管仓库，在国内访问速度较慢，上网搜索换为国内源（中科大、阿里云、网易云等等）。默认情况下配置文件应该是不存在的，创建一个即可：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">touch /etc/docker/daemon.json</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>换掉源之后，重启 Docker 服务，执行：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">service docker restart</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>WebODM 所要用到的 Docker 镜像文件国内仓库均没有，所以稍后安装时将会耗费较长时间。不过，第一次安装之后，镜像会下载到本地，执行：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker images</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>列出在本地已存在的所有镜像文件，可以利用 <code>docker save</code> 命令将要用的镜像文件导出，稍后便可利用 <code>docker load</code> 命令在其它系统中导入镜像文件，这样就不需要多次下载了，节省时间。</p><blockquote><p><a href="https://docs.docker.com/engine/reference/commandline/save/" target="_blank" rel="noopener noreferrer">docker save（官方文档）</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="安装-docker-compose">安装 docker-compose<a class="hash-link" href="#安装-docker-compose" title="标题的直接链接">​</a></h3><p><code>docker-compose</code> 是 Docker 的一个命令行工具，提供管理由多个 docker 容器组成的一个应用程序的能力，前面说过 WebODM 由几个模块组成，每个模块运行在不同的 Docker 容器中，所以要借助该工具。先检查是否已安装：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker-compose --version</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如未安装，执行：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo pip3 install docker-compose</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="安装-webodm">安装 WebODM<a class="hash-link" href="#安装-webodm" title="标题的直接链接">​</a></h3><p>其实，前面所有的步骤都只是为这一步自动化完成 WebODM 安装提供所必要的运行环境。ODM 团队编写了 Bash 脚本，提供了很多命令，可以通过几条命令完成 WebODM 的安装、后期更新、重启，方便很多。</p><p>首先，利用 Git 下载仓库代码：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone https://github.com/OpenDroneMap/WebODM</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>下载比较耗时，约有上百兆甚至 1GB 多文件，运气好的话，10 多分钟就可以完成。如果实在缓慢，可以申请一个 <a href="https://gitee.com/" target="_blank" rel="noopener noreferrer">Gitee</a> 帐号，将 GitHub 上的该仓库导入你的 Gitee 仓库，然后从 Gitee 下载会非常快，几分钟即可完成。</p><p>下载完成后，进入目录，开始安装 WebODM，执行 Bash 脚本：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd WebODM</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./webodm.sh start</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个过程中，因为要从 Docker Hub 拉取几个镜像文件（约 7GB），会异常缓慢，运气好的话半个小时到一小时就能完成，否则只能等。</p><p>安装完成后，命令行会提示你该应用程序已经运行在 <code>localhost:8000</code> 上了，打开另一个命令行窗口，利用 <code>curl</code> 命令测试一下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">curl localhost:8000 -L # 看到页面代码输出后，说明已成功安装</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>成功后，可以在（内网中）其它拥有 GUI 的操作系统中用浏览器打开 <code>ip:8000</code> 来访问 WebODM 管理页面了，用 <code>ifconfig -a</code> 命令可查看 ip 地址（<code>eth</code> 开头的，<code>inet</code> 信息即为 ipv4 地址）。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="设置系统静态-ip">设置系统静态 IP<a class="hash-link" href="#设置系统静态-ip" title="标题的直接链接">​</a></h3><p>为了方便管理多个 Linux 系统，将其设置为静态 IP 会更方便，如果是在虚拟机中安装的，将虚拟机和宿主机的网络配置为桥接模式，物理机直接安装的则不需要。</p><p>然后，配置静态 IP，Ubuntu 18.04 Server 使用 <a href="https://netplan.io/" target="_blank" rel="noopener noreferrer">netplan</a> 来管理配置网络。编辑 <code>/etc/netplan/50-cloud-init.yaml</code> 文件：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">network:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ethernets:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        eth0:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            addresses: [192.168.1.120/24]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            dhcp4: false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            dhcp6: false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            gateway4: 192.168.1.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nameservers:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                addresses: [114.114.114.114, 8.8.8.8]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                search: []</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    version: 2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>静态 IP 的配置大致如上，其中 <code>addresses</code> 为要配置的 IP 地址，务必设置 <code>dhcp4</code> 和 <code>dhcp6</code> 为 <code>false</code>，否则会出错。编辑保存之后，执行：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo netplan apply</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>更新了网络配置之后，测试网络是否正常：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ping www.baidu.com # 测试是否能访问外网</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ping &lt;local_net_ip&gt; # 测试是否能访问局域网中其它主机</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="部署更多处理节点">部署更多处理节点<a class="hash-link" href="#部署更多处理节点" title="标题的直接链接">​</a></h2><p>这样安装的 WebODM 只有一个 NodeODM 处理节点，但具备所有的功能。其架构大致为：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ODM（算法处理，底层 API） -&gt; NodeODM（处理节点，轻量级 REST API） -&gt; WebODM（Web 应用）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>而我们可以在其它服务器上部署多个 NodeODM 节点添加到 WebODM 中，即可实现多节点并行处理多个任务，现在也支持利用<a href="https://docs.opendronemap.org/large.html#" target="_blank" rel="noopener noreferrer">拆分合并</a>实现多节点处理同一个任务。其架构大致为：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ODM（算法处理，底层 API） -&gt; NodeODM（多个处理节点，轻量级 REST API） -&gt; ClusterODM（集群支持，负载均衡） -&gt; WebODM（Web 应用）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="部署-nodeodm">部署 NodeODM<a class="hash-link" href="#部署-nodeodm" title="标题的直接链接">​</a></h3><p>安装多个 <a href="https://github.com/OpenDroneMap/NodeODM" target="_blank" rel="noopener noreferrer">NodeODM</a> 处理节点非常简单，在其它多个内网服务器上配置好必要的运行环境（Ubuntu、Git、Python3、Docker），利用 <code>docker save</code> 和 <code>docker load</code> 命令，将安装 WebODM 时下载的 <code>opendronemap/nodeodm</code> 复制到其它服务器上，这样就不用再从 Docker Hub 下载，节省大量时间。</p><p>执行：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker images</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>查看是否本地已成功导入 <code>opendronemap/nodeodm</code> 镜像文件，已成功则直接执行：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker run --rm -it -p 3000:3000 opendronemap/nodeodm -q 1 --token &lt;secret&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其中 <code>&lt;secret&gt;</code> 为要连接该处理节点时的密钥，可省略 <code>--token</code> 选项。运行成功后，可访问 <code>localhost:3000/?token=&lt;secret&gt;</code> 查看，页面成功显示则部署成功，设置好该服务器的静态 IP 后，即可在 WebODM 管理页面将该节点加入队列中，提供并行处理多个任务的能力。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="部署-clusterodm">部署 ClusterODM<a class="hash-link" href="#部署-clusterodm" title="标题的直接链接">​</a></h3><p>NodeODM 只能支持一个节点处理一个任务，要缩短时间，提高效率，必然有多个 NodeODM 节点处理同一个任务的需求，而 ODM 团队近期（2019 年 6 月）宣布了<a href="https://docs.opendronemap.org/large.html#" target="_blank" rel="noopener noreferrer">拆分合并</a>的新特性，并在不断优化，而其设计也非常简洁，只需使用 <a href="https://github.com/OpenDroneMap/ClusterODM" target="_blank" rel="noopener noreferrer">ClusterODM</a> 来自动管理多个 NodeODM 节点即可。</p><p>同样的，任意找一台内网中的服务器配置好必要的运行环境（Ubuntu、Git、Python3、Docker），执行：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker run -ti -p 3001:3000 -p 8080:8080 -p 10000:10000 opendronemap/clusterodm</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此时会从 Docker Hub 下载 <code>opendronemap/clusterodm</code> 镜像文件（约 1GB），如果宿主机 <code>3001</code> 端口已被占用换成其它端口即可。运行成功后，可访问 <code>localhost:10000</code> 查看已加入的 NodeODM 节点信息。ClusterODM 对 NodeODM 的管理操作（添加、删除、查看），都是通过 telnet 协议完成：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">telnet localhost 8080</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>连接成功后，即可管理 NodeODM 节点，输入 <code>HELP</code> 可查看所有命令。</p><p>此时将需要作为集群部署的 NodeODM 节点从 WebODM 管理页面中删除，而是直接添加 ClusterODM，这样在 WebODM 中创建的任务如果选择了 ClusterODM 作为处理节点，其会自动协调连接到 ClusterODM 的所有空闲 NodeODM 节点并行处理该任务。</p><p>这里还需要注意的是，如果要让集群生效，需要在创建任务的时候将 <code>sm-cluster</code> 选项设置为 <code>true</code>，同时调整 <code>split</code> 和 <code>split-overlap</code> 选项，如果失败，说明 <code>split</code> 和 <code>split-overlap</code> 选项参数有问题，调整后再试。具体设置项参考以下文档：</p><blockquote><p><a href="https://docs.opendronemap.org/arguments.html" target="_blank" rel="noopener noreferrer">ODM 配置项（官方文档）</a></p></blockquote>]]></content:encoded>
            <category>计算机技术</category>
            <category>GIS</category>
        </item>
        <item>
            <title><![CDATA[2019 年工作记录]]></title>
            <link>https://wang1212.github.io/Life/2019-work-record</link>
            <guid>/Life/2019-work-record</guid>
            <pubDate>Sun, 10 Nov 2019 01:03:00 GMT</pubDate>
            <description><![CDATA[工作已满两年，感觉到了一个瓶颈期，有很多的体会和感想，也有很多的思考。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2019-11-12 23:18:34 </em></p></blockquote><p>工作已满两年，感觉到了一个瓶颈期，有很多的体会和感想，也有很多的思考。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2019-年">2019 年<a class="hash-link" href="#2019-年" title="标题的直接链接">​</a></h2><p>对于 2017 年毕业的我来说，时间过得比想象中的快，工作忙起来一天一天也就很快过去了，都无法察觉到自己已经工作了两年。</p><p>2019 年是比较特殊的一年，一整年过得都比较惶恐，也是让我对自己的职业生涯产生了大量思考的一年。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="临界点">临界点<a class="hash-link" href="#临界点" title="标题的直接链接">​</a></h2><p>今年对我来说是一个临界点，从 2017 年毕业至年初，一年半的时间里工作上感觉比较充实，而进入今年之后，尤其是越到年底，我心中越发惶恐。</p><p>年初提出了离职申请，部门领导和人事希望我能留下来，最终被劝服了，主要是考虑到工作年限稍短（不到一年半），以及在公司目前还有一定的发挥空间，虽然比较难，但最终还是留下来了。至于为何离职，一方面是待遇问题，另一方面则是希望能去一个新的环境和平台发展，让自己能够有更大的上升空间和更容易一些。</p><p>从毕业至年初的这一年半里，我工作上感觉是相当的充实，因为才步入社会工作，而且对前端这方面的技术还处在学习和探索阶段，所以时间花费比较多，也没有太多的时间去思考其它事情，一心只想着研究技术。</p><p>但到今年不同了，过春节的时候听到大部分同学都换工作了，算是在待遇上上升了一个层次，自己本身起步晚、起点低，就感到了焦虑。同时，另一方面在我的规划里，工作前两年算是入门阶段，可以花大量时间在基础的技术研究学习上；但一旦到了两年这个特殊的节点上，我希望自己在技术方面能有一个质的提升，不再把大量的时间花在基础的技术上，能在某个领域更进一步，让自己在某个领域能具备一定的技术竞争力，也是从入门阶段到中级阶段的过渡期。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="思考">思考<a class="hash-link" href="#思考" title="标题的直接链接">​</a></h2><p>人生充满了抉择，在工作上的这个两年时间节点上，我不时会陷入迷茫。</p><p>所以，今年我常常在思考自己工作了快两年的经历，还是有相当多的体会。一方面是作为技术人应该如何规划自己的生活和工作；另一方面是技术在社会中扮演的角色，以及与我个人产生的联系。</p><p>技术人通常都明白“年龄优势和劣势”，作为刚毕业的年轻学生来说，在 IT 行业是有相当大的年龄优势的，而我正处于刚毕业不久这个优势阶段；但同样的，30 岁以后的 IT 从业者将会进入年龄劣势阶段，如果不具备一定的技术竞争力，就业将有一定的难度，不能达到预期。这就意味着我工作一年，就越接近年龄劣势阶段，我希望能尽早采取行动。</p><p>目前，我感受最深的则是，技术人容易创业，技术人有相当多的变现手段，当然也并非想象的那么容易，只是说明存在大量的机会。最明显的例子则是，大量的程序员都运营着自己的微信公众号，主要是技术文章之类，这个则让我明白技术人要学会营销自己，这样对自己求职以及其它方面都有比较大的正向影响。所以，我依然在坚持写博客，一方面是希望对自己的成果有个记录，另一方面则是希望借此营销自己（这方面基本上没花什么心思）。而且，今年的博文写得少了，主要是考虑到不能再像之前一样学什么写什么，这些东西价值不大，随时都可以查到，应该记录一些比较有技术难度和技巧的东西，这算是我在思想上的一个转变。因此，我也对自己的技术发展方向做了一定的改变，之前是主要学习最基本的 Web 前端开发技术，现在则是希望能涉猎前后端所有的开发技术，完善自己对技术体系的认知，提高自己的技术竞争力，同时能更多的从架构和设计上去思考，而不单纯是业务思维。</p><p>其次，应对“年龄劣势”的另一举措我觉得应该是培养除技术开发之外的兴趣爱好，如果把全部的时间都花在开发技术的学习和研究上其实最终并非是收益最大化，培养自己在另一个领域的兴趣爱好其实有助于自己在软件开发这方面做的更好。一个人如果长时间在某个领域里待着，很容易疲惫，思想受到禁锢；相反的，如果能同时涉猎多个不同的领域，站在多个角度思考同一个问题，则会有不同的体会和收获。我自己则选择了经济、金融领域，原因则是我觉得这是与我们的生活紧密相关的领域，社会本就是个经济社会，人们的行为就是经济活动，能学会如何理财，思考经济发展趋势，把握机会则是我的目的。当然，时间总是有限的，计算机技术和经济、金融知识的学习都需要大量的时间，如何平衡两者也是比较难的，对于我来说主要还是计算机技术优先，这关乎到自己未来几年职业生涯的发展，年初以来感觉到时间明显的不够用。</p><p>还有一点比较重要的是，我觉得对于技术人来说，两年、五年、十年都是比较关键的时间节点，两年时间入行开始选择自己要深入的领域，五年时间积累，能在领域内小有所成是最好的结果，十年时间可以说是应该真正的沉淀了一些技术和人脉才行，否则在这些关键的时间点如果自己没有太大的变化，可以说在事业上是比较失败的。当然，任何时候都需要不断的学习和努力，希望自己也能取得好的结果。</p><p>第二个方面，就是技术在社会中扮演的角色。真正热爱技术的人，刚开始都会认为技术是一切，技术就是生产力，但到了实际工作应用过程中，我们大多数人接触到的技术离创新、核心这些还很远，技术并非有那么神圣，当然我想这与个人所在平台和能获取的资源有很大关系，但我认为最终的结果都差不多。这并不是说技术非常廉价，相反的，技术值得我们去学习和深入研究。对于我们个人来说，不断的学习新的技术，掌握技术的核心原理和哲学设计，对我们思考问题和解决问题的方式会产生很大的影响，这并不局限于软件问题，可能是生活中的任何问题；而对于公司来说，能不断的进行技术迭代升级，能节省成本，增加公司的核心技术竞争力，而公司的技术竞争力恰恰与公司内部那些比较优秀的程序员的技术能力成正比。</p><p>所以说，技术并非一切，对于我们普通人，和中小型公司来说，我觉得技术能力很重要，但并非最重要。而让我体会比较深的是，对我们个人的发展来说，领域经验要重要得多，搞核心技术和创新技术的大多都是计算机科学家、搞学术研究的人，而我们一般人最重要的价值就体现在在某个领域内的经验积累，这是需要很长时间和努力才能获得的，也是最为正确的一条技术路线。而所谓的领域经验应该包括技术应用经验和业务经验，更甚的也应该包含行业内的人脉关系。得出的结论就是，我们搞技术的人不能整天死学技术，更应该思考业务应用方面和如何建立自己的人脉关系这方面的事情，但技术人最重要的还是技术能力，这个倒不能否认。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>在这个两年的时间节点上，有了很多体会和思考，没有再像前两年那样在意所做项目的多少，项目应用的技术是什么，而是更想往高站一点，看看技术之外的东西，想想自己未来的规划，积极为接下来的挑战做好充分的准备。</p>]]></content:encoded>
            <category>生活</category>
            <category>工作</category>
            <category>记录</category>
        </item>
        <item>
            <title><![CDATA[上峨眉，游重庆]]></title>
            <link>https://wang1212.github.io/Life/tourism/tourism-emeishan-chongqing</link>
            <guid>/Life/tourism/tourism-emeishan-chongqing</guid>
            <pubDate>Sun, 08 Sep 2019 22:39:00 GMT</pubDate>
            <description><![CDATA[时间过得真快，又是一年的夏季了，每年爬一座大山的目标还是要坚持的，今年则是峨眉金顶。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2019-09-08 22:39:00 </em></p></blockquote><u>2019-08-18</u><br><br><p>时间过得真快，又是一年的夏季了，每年爬一座大山的目标还是要坚持的，今年则是峨眉金顶。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="一年一座山">一年一座山<a class="hash-link" href="#一年一座山" title="标题的直接链接">​</a></h2><p>自从去年和朋友爬了一次华山之后，就决定要一年爬一次大山，生活上每个人都会给自己立下很多目标，但能否坚持是每个人共同要面对的难题。</p><p>说到旅游，在学生时代很多人面对的是经济问题，我也不例外，在上学的时候可以说没有出过省，也没有出去旅游过。现在工作了，经济可以独立了，但时间却不允许了，唯一值得欣慰的则是可以利用年假和周末出去玩一玩。其实，说到经济独立，面对现在如此高企的房价，经济压力还是相当重的，现在的年轻人无不将结婚年龄推迟到了 30 岁，不过我反而觉得结婚迟一点正好，年轻的时候应该多花点时间和精力在事业上。出去玩一次，也许会花不少钱，但我觉得年轻的时候还是应该出去多看看，这样眼界才能宽广一些，而爬山真的是一个能磨练人毅力和心境的事情。</p><p>于是，才有了一年要爬一座大山的目标，我觉得至少我应该坚持到 30 岁。去年和朋友夜爬华山，清晨看完日出又徒步下山，事后也没觉得太累，此番爬山的经历却感觉不错。今年眼看夏季依然将过，秋季天气冷了怕也出游不是很方便。所以，在七月底的时候就有了要出游爬山的打算，起初打算是继续爬五岳的，目标则是距离最近的河南中岳嵩山，但朋友因去过河南旅游过，觉得满山的石头没有什么景色，不想再去。然而，去年和朋友去成都游玩的时候本想爬山的，但因时间不够，所以爬山没有在计划之内，四川的峨眉山听说不错，有机会想去爬一次。正好，这次则可以去四川的峨眉山，上金顶看日出、云海。</p><p>最终，四天出游计划，前两天则是爬上峨眉山金顶，后两天则是去重庆玩一玩。这次，休了两天年假，周四五和周末两天刚刚好。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="先上峨眉">先上峨眉<a class="hash-link" href="#先上峨眉" title="标题的直接链接">​</a></h2><p>计划的是周三晚上出发，因为去峨眉山只能先坐高铁到成都，再由成都坐城际高速去峨眉山脚。然而，西成高铁最晚也只到晚上 8 点左右，并且票相当抢手，于是下班后火速赶到高铁站，晚饭也没时间吃。</p><p>其实，说到出游，天气也是一个很大的问题，之前看的未来 15 天天气预报，峨眉山是有雨的，一时半会让我们无法决定到底去不去，而休假的时候也不是那么好调整的，幸好还算走运，距离出行的那天越近，天气预报显示峨眉山的天气相当不错。</p><p>旅游，会有大部分时间在车上，都在赶路，这句话真是一点也没错。等我们晚上到达成都后，已经十一点半了，只能先住个酒店然后一大早再赶车去峨眉山，简单的吃了晚饭洗了澡就休息了，因为只能休息四个小时左右，早上 5 点多就得赶去高铁站。</p><p>早晨 6 点多第一趟去峨眉山的城际高速，车厢里的人相当少，车程大概一个多小时就可以到，我们计划的是早上 9 点左右开始爬山，下午三四点就可以到雷洞坪休息，之后我们才知道我们低估了峨眉山。一路都是山区，大概在乐山一带，由于清晨的浓雾，透过车窗却有云海般的美景，可谓迷人。</p><p>很快就到了峨眉山下，这时候已经 8 点了，今天的天气也相当好，阳光晒到身上还有一丝热感。在高铁站可以直接坐旅游观光大巴到山脚报国寺、半山腰万年寺、接近山顶雷洞坪，这三处我们查了攻略直接坐车到了万年寺，距离山脚下 13 公里左右，坐车只需半个小时不到，这时候刚好早上 9 点整。</p><p>峨眉山的爬山路线其实类似数字 8，从山脚下分为左右两条线，然后在半山腰汇合，上山又分为左右两条线，最后到雷洞坪，然后就可以上金顶。我们所走的万年寺则是右线，相对于左线来说总路程要少十几个公里。我们则打算从万年寺开始徒步爬上去，最后要到达雷洞坪，总共路程为 22.5 公里，按查看的攻略来算大概下午三四点就可以到雷洞坪。然后，我们可以到处看看，休息一晚上，第二天凌晨爬到金顶去看日出和云海。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="徒步上峨眉">徒步上峨眉<a class="hash-link" href="#徒步上峨眉" title="标题的直接链接">​</a></h2><p>从万年寺下了观光大巴后就可以开始爬山了，22.5 公里的路程大概可以分为三段，第一段 1 公里为万年停车场到万年寺，第二段 14 公里为万年寺到洗象池，第三段 7.5 公里为洗象池到雷洞坪。从停车场到万年寺就一公里，算是热身，路上人也非常多，不过我们也花了半个小时，按这个速度天黑之前都到不了雷洞坪。所以，我们打算稍微加快点速度。</p><p>不过，虽然说是周四，也不是什么节日，峨眉山的人也太少了，一路上就几个人，而且峨眉山连路标也没有，比起华山还是差的远，我们看见人这么少都怀疑自己是不是走错路了，不过上山的路就这么一条，肯定不会错，所以就往上爬，结果走了快一个小时，连个人影都没有，朋友因为之前听说峨眉山的猴子会抢人东西，弄不好还会伤人，所以觉得没人一块上还是不爬了。说起来，这深山里每个人倒也挺可怕的，如果真被野生动物攻击了，连个帮忙的人都没有，下次爬山还是挑个稍微人多的时候来。不过，我觉得既然都来了，下去岂不是挺没意思，于是我和朋友在原地等了一会，看有没有人上来，准备一起走，毕竟安全最重要。</p><p>过了十几分钟，上来一对父子，还有一个女的，最后才知道这个女的是途中补给站（小卖部）的老板，怪不得她爬山看起来那么轻松。人也不多，不过总算有点人了，我们也就跟着一起爬了。途中一直听说猴子很厉害，手里不要提东西，会被抢，我们上山的时候都背了个包，手里就提了几瓶矿泉水和一盒牛肉干，等到高山区才会遇见猴子也就没怎么在意。话说士力架这玩意真是难吃，上次爬华山背了一盒没吃多少，这次虽然买了一盒，但只拿了半盒，结果一路上也没怎么吃。大概到中午 11 点钟多的时候，我们走了有 4 公里的样子，距离雷洞坪还有 17.5 公里，照这速度下午三四点肯定是到不了了，估计得多爬两个小时。</p><p>去年爬华山的时候根本没觉得累，这次爬峨眉山才爬了两个小时，就觉得有点累了，朋友直说不行了，要下去，不过这怎么可能呢，下去也要走那么久，还不如直接上去呢，我一直鼓励朋友坚持住。心想着，这才四公里就累的不行，还得爬四个这么个四公里，心里甚至有点绝望，爬山真是考验人的毅力啊。一路上倒也不怎么饿，就是不停的流汗，导致人比较口渴，一直在喝水。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="路遇顽猴抢东西">路遇顽猴抢东西<a class="hash-link" href="#路遇顽猴抢东西" title="标题的直接链接">​</a></h2><p>继续爬了一个小时，12 点多在一个补给站（小卖部）坐下准备休息一会，老板娘说再往前不到 5 分钟有只猴子，刚有个孩子被咬了。对了，峨眉山一路上都有卖竹棍的，俗称“赶猴棍”，最后查了下据说是管理员会拿竹棍赶猴子，所以猴子见了拿竹棍的人都比较害怕，在山上时给朋友买了一只，我没买，因为觉得拿起来麻烦。其实，这个时候也没太在意老板娘说的话，休息了一会就开始继续爬山了。</p><p>我们一行的人大概有七八个，我和朋友只有两个人，他们有五个人吧，我们基本上是一块休息，然后一起走，这样遇到猴子也好互相有个照应。途中因为有一瓶水快喝完了，于是我停下来准备喝完扔了瓶子，结果刚一口喝完准备扔垃圾桶，就突然感觉另一侧提东西的手上变重了，回头一看是只猴子在抢我手里的塑料袋，我吓得叫了一声。朋友和另外几个人已经走到前面去了，距离我大概数十米，他们听到我叫了一声回过头来都吓了一跳，没想到刚才那老板娘说的是真的。我直接松手就走开了，这猴子也是不怕人，直接在路上也不走开，就撕扯袋子吃我的东西，幸好袋里就一瓶矿泉水和一盒牛肉干，没什么贵重物品。</p><p>刚休息的时候朋友还说让我把牛肉干装到背包里，怕遇见猴子被抢去，我说算了麻烦，结果还真被说中了。不过，人是安全的总比什么都好。也算是了见了峨眉山的猴子，运气不好的人，爬一次峨眉山还见不到猴子呢，我和朋友当时是这么想的，事实证明还是我们太天真。经历了被猴子抢东西，我在下一个补给站（小卖部）也买了根竹棍，说实话看到网上那种被猴子咬了的人伤口的照片，心里还挺害怕的，不过我想猴子也就是抢吃的，拿棍子是吓唬它的，只要不攻击它，猴子肯定也不会攻击我们人类。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="爬到绝望又遇猴群">爬到绝望，又遇猴群<a class="hash-link" href="#爬到绝望又遇猴群" title="标题的直接链接">​</a></h2><p>此时，大概是下午一点左右，距离洗象池大概还有四公里的样子，也就是说我们总共还有 11.5 公里的路程，朋友这时候心里都埋怨死了，早知道都不来爬峨眉山了，这下估计天黑也上不去了，我依然只能继续鼓励朋友坚持住。其实，这个时候我心里也有点慌，起初想的是下午最迟也就四五点到雷洞坪，结果现在一看最起码得六七点了，于是我开始看了看我们之前几个小时爬山走过的步数和时间，大概计算了一下，告诉朋友我们 6 点钟就可以到雷洞坪了。朋友这时候已经身心俱疲，说太痛苦了，但不管怎么样，现在只能上不能下，因为下山也需要好几个小时呢。这也许就是爬山的真正考验吧！</p><p>我们继续前行，休息了一下感觉好多了，加快速度，准备先到洗象池，那样就离雷洞坪只剩 7.5 公里了。其实，一路爬上来，感觉主要还是人少，如果人多的话，也不会那么累，而且一直都是台阶，没什么景色可看，越爬越绝望。</p><p>不过，更令人绝望的事情才到来，不一会我们遇见了两只小猴子在路前方，我们停了下来，然后有个男的带着两个小儿子走了下来，我们问了下他，他说上面全是猴子，不过不用怕，手里不要提东西就好了。一听到上面全是猴子，再想到之前被猴子抢了东西，加上网上把峨眉山的猴子说的那么厉害，心里有点后怕，一时不知所措。此时，那两只小猴子也顺着栏杆爬了下来，离我们越来越近，我们心里很是紧张，不过猴子和我们面对面看着对方，却没什么动作。等我们冷静下来，想着反正要爬上山，这里是必经之路，他们都能安全下来，我们肯定也可以。</p><p>于是，我和朋友两个人小心翼翼的慢慢往往上走，走完这段台阶，就看到了一片平地，有几座破旧的宫殿，貌似这里就是洗象池了，终于到了，心里终于有了一丝慰藉。等我们进了宫殿前门，看到内殿院子里全是猴子，大部分都是小猴子，其实这时候我们已经不是很害怕了，手里只要没提袋子，猴子应该不会抢我们，而且抢背包估计是猴子看见游客从背包拿吃的了，所以我们从不在路上打开背包取东西。我们小心翼翼的走过猴群，然后来到了宫殿后面的补给站（小卖部），我们打算休息半小时然后一口气爬到雷洞坪，这时候是下午两点半左右。休息的时候，这里有很多游客，也拍了很多猴子的照片。有个特别大只的猴子好像是故意的，坐在宫殿正门，幸亏旁边还可以过人，我们刚才就是从旁边过来的。没想到猴子也欺负我们人啊！</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="直上雷洞坪">直上雷洞坪<a class="hash-link" href="#直上雷洞坪" title="标题的直接链接">​</a></h2><p>下午三点钟，我们开始出发，最后一段路程 7.5 公里，打算中途不再长时间休息，一口气上去，我计算的是大概 6 点半左右就可以到，而且我也算出来大概 800 步是一公里，我告诉朋友之后，她就看着手腕上的小米手环步数开始爬，也不怎么埋怨了。</p><p>这个时候太阳渐渐也不怎么晒了，而且心里也不怎么怕猴子了，反而爬起来轻松不少我们不一会了就爬了两三公里，而且越往上，遇到的人越多，我很奇怪上山的人那么少，下山的人却那么多。我们一路上也没吃饭，只是不停地喝水，打算上去了再好好吃一顿。不过，从早上九点爬到现在五点，8 个小时没吃饭，虽然不饿，但体力确实消耗了很多，越往后爬起来感到越累，不过总算快到了，心里到不那么绝望，总觉得坚持一会就要到了。坚持到最后的感觉真的挺高兴！</p><p>遇到一个小卖部，我们吃了点包里的零食，休息了一会，看到路标前方就是雷洞坪了，而且就 1.5 公里，我们这下可算是放松了，高兴的不得了。而且，这 1.5 公里的路基本都是平路，人也越来越多，我们基本上就是边走边玩着上去的。</p><p>到了最后，路过一座桥时，地上有一个撕烂了的袋子，一看就是谁被猴子抢了，然后往前走，栏杆上竟然蹲了几只硕大的猴子，鉴于人多我们也没怎么害怕，就径直走了过去，还给它们拍了几张照片。到了桥对面，再走上几分钟便就到了雷洞坪，这时候正好下午 6 点 20 多，我计算的刚刚好，一到这里我们的心情瞬间就轻松愉快了起来。</p><p>而且，再往前走，悬崖旁有块石碑上面写着“雷洞坪”三个大字，其实这不是什么重点，重点是周围的铁网和栏杆上有好多猴子上蹿下跳，而且很多游客在围观、拍照、喂食。能在山顶见到这么多猴子也真是另一份意外的收获，我们在这里逗留了半个多小时，然后就去找订好的酒店了，说是酒店，结果进去一看就是一张床和一间卫生间，空间很小，感觉也不是很干净，但没办法，毕竟山顶也算是稀缺资源。我和朋友放好东西，下去先去吃了饭，吃的是米饭和菜，感觉一般般吧，量倒挺足的。</p><p>吃完饭，已经是夜晚了，山顶确实挺冷的，不过没有预想中的冷，可能是夏天的缘故，穿个 T 恤和薄外套就可以。在外面走了走，感觉也没啥意思，就回酒店洗澡休息了。洗漱完已经是晚上 12 点了，在上山之前原本是打算第二天三点多起来，徒步爬到金顶的，这里到金顶的路程是 5 公里，大概两小时就可以爬上去，但经历了这将近 10 个小时的爬山路，彻底打消了徒步爬上金顶的念头，还是坐索道上去吧。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="峨眉金顶">峨眉金顶<a class="hash-link" href="#峨眉金顶" title="标题的直接链接">​</a></h2><p>峨眉山海拔 3000 多米，比华山要高 1000 米左右，在山顶确实能感觉到呼吸有点不一样。我们早上 5 点起床洗漱完没吃早饭就去坐索道的地方了，这里距离坐索道的地方还得步行 1 公里，早上是真的冷，幸亏我们带了厚衣服。</p><p>索道要到 6.30 才开启，不过我们在去的路上时，游客已经特别多了，到了上面我们发现排队的人已经有几百人了，我们赶紧排上队，不然就没机会看到日出了，从开始排队到坐上索道，足足等了快半个小时。这种索道是那种大型的，一次可以上好几十人的，不是那种小的，运载能力就是强，不一会就把这几百人运上金顶了。</p><p>金顶比预想中的要大，上面有很多地方可以转一转，下了索道要走到最高处也得花个十来分钟。我们下了索道，日出就快要开始了，我们挑了个比较好的地方，用手机拍下了日出的整个过程，还是挺美的。上次去华山，因为天气原因，没有看到日出，这次到峨眉山算是圆梦了。因为云海要等到上午 10 点左右才能看到，但我们是订的中午 12 点回成都的城际高速，下山也得两三个小时，所以很遗憾不能等到看云海，只能等下次爬山再看了。</p><p>我们在金顶上各处都转了转，拍了照，因为赶时间和没吃早饭的缘故，就待了大概半个多小时就坐索道下到雷洞坪了，而且金顶上确实挺冷的。下到雷洞坪我们吃了早饭，不过这里的早饭真是难吃还贵啊，吃饭大概 8 点钟，我们就赶紧收拾完东西退房坐车下去，不然赶不上回成都的车，今天就只能待在峨眉山了。不过，下山还是比想象中的快一些，我们十一点就到高铁站了，距离发车还有一个小时，等车的时间也挺煎熬的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="再游重庆">再游重庆<a class="hash-link" href="#再游重庆" title="标题的直接链接">​</a></h2><p>先上峨眉，再游重庆。从峨眉山回到成都，已经是下午快三点了，但我们买的去重庆的车是五点多的，还得等两个小时，奈何也不能走太远，就坐地铁在附近玩了玩，来春熙路太古里看了看，吃了红糖冰粉、红油抄手，都很好吃。说到成都，这次算是一个中转站，也代表我两年时间内已经是第三次来成都了。</p><p>时间过得还是相当快的，我们已经坐上去重庆的城际高速了，不得不感叹成都到重庆的城际高速真是厉害，基本上是 5 分钟一趟车，而且最晚到晚上 11 点多。在峨眉山的时候大概看了看重庆的景点，基本上集中在渝中区，所以我们的酒店也直接订在了步行街那里，也算是市中心到处玩比较方便，基本上步行就可以到。到酒店收拾完已经 8 点了，本来说今天晚上去坐长江索道的，看来是赶不上了，所以倒不如去吃一顿火锅，我们找了一家附近排名第一的火锅店《渝大狮老火锅》，两个人点了八九个菜，吃完感觉真是不错呀，重庆的火锅就是好吃，而且价格也相当便宜，并不比我们地方的贵，免费的小吃也相当丰富。</p><p>今天是周五，晚上吃了一顿火锅，剩下得主要就是休息了。接下来两天把之前看的景点好好逛一遍，重庆之旅也正式开始了。</p><p>之前来成都并没感觉空气有多潮湿，这不，早上刚醒来来到室外，重庆的天气潮湿的不一会就感觉衣服黏糊糊的，恰好这两天重庆也是大晴天，可真是热死我们了。</p><p>我们打算先去比较远的“磁器口”转转，然后回来下午和晚上再看夜景，要做地铁 1 号线过去，鉴于重庆这种魔幻的地形特征，我们在商场找地铁进站口也是费了一番功夫。早上十点钟已经是艳阳高照了，磁器口进口的人潮涌动，我和朋友差点都不想进去了，实在是热的受不了，但来了总归还是要转一转才划算。走完整个磁器口这条巷子大概有两三个小时的样子，其实真没什么意思，现在全国各地这种古镇小巷真是太多太多了，完全失去了新鲜感和特色，一整条巷子全是卖吃的，商业化过度，而且卖的特产不见得一定正宗和好吃，而且还更贵。</p><p>顶着这么毒辣的太阳我们转完磁器口古镇也算是厉害，最后在周围转了转，距离地铁口一公里的路真是热的没办法走了，只好叫个出租过去了。下午的时间我们主要是去了观音桥的商场和美食街玩了玩，吃了一些小吃，一路上都在找空调的感觉。要不是朋友提醒，估计我们今天晚上又赶不上长江索道了，那可真是白来重庆了，所以我们下午七点钟的时候赶紧去地铁站赶去长江索道的北站。</p><p>重庆最出名的就是夜景了，长江江畔的洪崖洞也正是因为夜景而出名，长江索道则正是横跨长江俯瞰重庆夜景的绝佳方式，所以我们倍感期待。长江索道也是相当火爆，我们硬是排了半个多小时才坐上，从江北到对岸，大概是四分钟的样子，缆车中几十人挤得厉害，根本没法转身到处看看，不过我们在窗口，夜景并没有想象中的好看，略感失望。</p><p>到了对岸，即便是买了返程票，也得重新排号，我们是下午提前排号了，所以刚才到现场可以直接排队，不过那也排了半个小时，这重新拍号不得好几个小时，而且有个带孩子的妈妈说她和孩子排了四个小时才坐上缆车，这样看来我们要幸运得多。不过，除过坐缆车回江北，还可以坐观光巴士，机智的我赶紧去看了看，刚好是末班车了，而且车上就我们两个人，司机师傅也挺热情的。想到不用排队坐缆车可真是太高兴了，虽然浪费了缆车票。</p><p>回到江北，我和朋友犹豫要不要去洪崖洞看看，朋友刚开始因为感觉很累不想去了，我心里其实打算去看看的，既然来了不去看看太可惜了，但也觉得累了就没说什么，观光车坐了快一个小时，在车上休息了一会感觉好多了，朋友决定还是去洪崖洞看看，不然是白来重庆了。</p><p>到了洪崖洞，夜景的确好看，而且江边的微风吹起来也很舒服，真后悔今天没早点来江边玩，也庆幸最后还是来洪崖洞了，不然明天就要回去了，真是白来一次了。</p><p>洪崖洞真是人挤人，都快午夜 12 点了，人还是很多，我们已经很累了，想回去了，发现酒店就在后面那条街，却不知道怎么才能抄近路过去，不然得绕一大圈。四川人热心还是真的，旁边以为女士告诉我们洪崖洞里面有个电梯坐到九楼可以走到后面的街上，不过我们找到电梯也费了一番功夫。等我们坐电梯上了好几层楼之后，出电梯发现是平地、街道、大楼，真是惊讶，这难道就是网上说的上了九层楼还是一层，这下对重庆的魔幻 9D 城市标签印象更加深刻了。</p><p>回到酒店已经十一点多了，洗了澡就休息了，今天没转多少地方，但是太阳晒得人真心热，下次来重庆还好是应该挑个比较凉快的季节。</p><p>第二天走之前，中午我们又吃了一顿火锅，不过比起刚来吃的那一家服务、价钱各方面都要逊色不少，看来还是商业化气息太严重了。都是旅游的最后一天基本上浪费了，因为要操心赶车，不过我们订的晚上 6 点多的高铁，时间很充足，但却发现天气太热，而且也没什么好玩的，反而比较无聊，重庆之旅也算落幕了。</p><p>等我们回家已经是晚上十二点多了，由于明天还要上班，只能洗漱完赶紧休息了，行程还是相当紧张的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>虽然说我们这次四天的出游，在重庆停留的时间要比在峨嵋山的时间长一些，但峨眉山却留下了更深的印象，重庆作为一个网红城市、直辖市，有许多吸引人的地方，但商业化过度的城市却也不能给我留下太深刻的印象。</p>]]></content:encoded>
            <category>生活</category>
            <category>旅游</category>
            <category>峨眉山</category>
            <category>重庆</category>
        </item>
        <item>
            <title><![CDATA[经济学的意义]]></title>
            <link>https://wang1212.github.io/2019/7/16/Life/reading/reading-</link>
            <guid>/2019/7/16/Life/reading/reading-</guid>
            <pubDate>Tue, 16 Jul 2019 23:28:00 GMT</pubDate>
            <description><![CDATA[经济学似乎是一个相当高大上的专业，但是经济与我们的生活密切相关，与我们每个人的社会活动都强相关。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2019-07-16 23:28:00 </em></p></blockquote><p>经济学似乎是一个相当高大上的专业，但是经济与我们的生活密切相关，与我们每个人的社会活动都强相关。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="经济与金融">经济与金融<a class="hash-link" href="#经济与金融" title="标题的直接链接">​</a></h2><p>说到经济学，不少人可能觉得这是一个相当高大上的专业，或者说行业，因为我们身边从事这个行业的人还是太少。但是，经济是一个社会上的热点话题，新闻联播几乎每天都会谈到经济发展，可见经济与我们的生活密切相关，而我们每个人的社会活动实际上大部分都是经济活动。</p><p>通俗一点的说，经济对于我们大部分人来说等同于金钱相关的东西，而我们每个人在社会中的大部分活动都是基于货币金钱进行的，例如上班、打工、消费、娱乐、教育等等。换句话说，我们的社会活动可以看作是经济活动。</p><blockquote><p>经济学是研究人类经济活动的规律即价值的创造、转化、实现的规律——经济发展规律的理论，分为政治经济学与科学经济学两大类型。经济活动是指在一定的社会组织与秩序之下，人类为了求生存而经由劳动过程或支付适当代价以取得及利用各种生活资料的一切活动。</p></blockquote><p>以上为来自于百度百科的官方概念，还是比较抽象的。但是，我们不关心经济学到底是什么，只需要明白经济学大概涉及到什么东西，与我们每个人的社会活动密切相关即可。这也是我对经济学感兴趣的主要原因，因为它与我的生活具有强相关的联系。</p><p>经济学是一个相当宽泛，并且抽象的东西，放到真实社会中的话，也许金融学与会计学离我们更近。</p><blockquote><p>金融学（Finance）是从经济学中分化出来的应用经济学科，是以融通货币和货币资金的经济活动为研究对象，具体研究个人、机构、政府如何获取、支出以及管理资金以及其他金融资产的学科。 <br>
　　会计学（Accounting）是以研究财务活动和成本资料的收集、分类、综合、分析和解释的基础上形成协助决策的信息系统，以有效地管理经济的一门应用学科，可以说它是社会学科的组成部分，也是一门重要的管理学科。</p></blockquote><p>金融行业是我们最能真实感受到经济存在的一个行业，新闻中经济相关的东西大多都会涉及到股票、贵金属、期货、黄金等等，这些都是金融交易，这也是国家政府、社会组织、公司、个人进行经济活动的最直接体现。</p><p>会计专业是我们上学过程中很常见的一门专业，每个人身边从事会计职务的人也相当得多，离我们最近的，最平民化的经济活动就是会计职务了。</p><p>然而，无论是经济学、金融学还是会计学，这都是一种社会活动形式，我们或许被动参与，或许主动参与，但它们都有一个共同点，就是对我们的个人生活产生了直接影响。所以，我关注的是个人生活，而并非其它什么东西。对经济学产生兴趣，并去了解学习它，这只是我想明白怎样才可以更好的管理支配自己的社会活动，从而更好的去生活。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="产生兴趣">产生兴趣<a class="hash-link" href="#产生兴趣" title="标题的直接链接">​</a></h2><p>实际上，我是一个相当具有好奇心的人，我喜欢了解新鲜的事物，从上大学期间就对经济相关的东西产生了兴趣，但一直没有什么实质行动。当然，这与之前自己的业余时间有限和自己的年龄偏小、社会阅历比较浅有相当大的关系。</p><p>有个大学舍友对股票很感兴趣，并且也考了证，偶尔能从他那里听到一些股票相关的消息。还有几位朋友大学专业是财务会计相关专业，闲聊时也会探讨到这方面的东西。</p><p>直到毕业，从事了软件开发工作半年左右，突然觉得应该给自己培养一个其它专业的兴趣爱好，这真是个好机会。</p><p>刚开始，在网上了解了下比较好的书，于是买了曼昆的《经济学原理》，分为《微观经济学》和《宏观经济学》两册，我从宏观经济学开始看。起初的想法是想好好学来着，发现看了一段时间之后，要认真学起来，这两本这么厚的书看完估计得两三年。这毫不夸张，因为软件开发行业也是需要持续性学习的，恰好我也非常喜欢软件开发，于是慢慢的没了看经济学书的时间了，就暂时搁置了。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="继续">继续<a class="hash-link" href="#继续" title="标题的直接链接">​</a></h2><p>到了去年年底，大概了过了不到半年时间，我的生日就到了，朋友送了我几本书，其中有三本是经济金融相关的，《灰犀牛》、《伟大的博弈》和《贼巢》。年底相对来说，工作上不是很忙，自己的闲暇时间也比较充足，于是就打算趁着有几本好书，也应该继续看一看经济学相关的东西了。</p><p>准确的说，我在八月份的时候其实就已经开始关注经济了，可以说是直接参与实战了。某一天，突然觉得年轻的时候要学会理财，越早越好，这个想法非常强烈，直接驱使我进入了基金投资。这并非是盲目的，我之前就已经有打算了，只不过这是个机会。我在投资基金之前，身边的大学舍友已经投资过股票了，学财务的朋友也在股票和基金投资上进行了尝试，他们都是在上大学的时候便开始了。当然他们是因为专业学习相关或者浓厚的兴趣驱使，相对来说有优势；但另外一方面，则是不得不提的支付宝推出余额宝的黄金时代了，余额宝实际上就是货币基金，当时万份收益高达 1.5 元，而当我进入市场的时候已经只有 1 元左右了。拿余额宝这个事情来说，大部分人比我要早先尝试基金投资，只是很多人不知道而已，至今很多人依然在用余额宝，但听到基金投资时却敬畏其“投资风险”，说起来也挺好笑。</p><p>当然，我的性格致使我从来不会盲目的干一件事，我开始只是尝试货币基金投资，基本等同于银行活期存款。开始了持续一个多月的补充基金投资知识的阶段，这一个多月花费我很多下班之后的业余时间和睡觉时间，但收获颇丰，直到现在大概快一年的时间，算是经历了大起大落，但总体处于盈利状态，为自己感到庆幸。</p><p>基金投资的目的不是为了暴富，而是为了学会理财，如何让自己的财富保值、升值，更具性价比，也是我要了解经济学来提高自己管理支配个人社会活动的一个体现。</p><p>从年底开始，一直断断续续再看经济相关的东西，到目前为止看完了《灰犀牛》这本书，期间也看了《零边际成本社会》、《互联网+》、《股票大作手操盘术》和《日本蜡烛图技术新解》。其中，前两本没有看完，后两本可以说算是看完了。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="灰犀牛">灰犀牛<a class="hash-link" href="#灰犀牛" title="标题的直接链接">​</a></h2><p>《灰犀牛》这本书的副标题是：如何应对大概率危机。这本书的核心内容主要阐述了一系列的历史经济事件案例，来说明经济活动中的灰犀牛事件如何去避免和应对。总体来说，书很厚，内容还是比较丰富的，值得一读。</p><p>“灰犀牛”是近几年来的一个新词，代表大概率且影响巨大的潜在危机事件，之前类似的有以“黑天鹅”比喻小概率而又影响巨大的事件。</p><blockquote><p>相对于黑天鹅事件的难以预见性和偶发性，灰犀牛事件不是随机突发事件，而是在一系列警示信号和迹象之后出现的大概率事件。</p></blockquote><p>实际上，该书列举了相当多的历史事件案例来说明灰犀牛事件的可预见性，以及分析了人们为什么会在明显的警示信号和发生迹象出现之后仍然遭遇这些影响巨大的恶性事件的原因，目的则是告诫人们，如果做一个合格的管理者、决策者，或者说在生活中如何克服自己人性上的弱点，来应对这些灰犀牛式事件。</p><blockquote><p>人们宁愿和大家一起犯错，也不愿意成为唯一正确的那个人。</p></blockquote><p>人们在遭遇危机事件的时候，容易倾向于认同社会权威、公众人物、媒体的舆论引导，宁愿和大家保持一致，也不敢正视自己的判断，这是一个非常严重的问题，需要我们克服这种弱点，建立自信。</p><blockquote><p>因为人类本性使然，我们总是先参考周围人的意见，然后才形成自己的观点。在这个过程中，我们很容易犯错误。</p></blockquote><p>虽然说，我们会因此而容易犯错，但是犯错并不可怕，可怕的是我们保持沉默，没有自己的判断能力。不怕犯错，拥有自己的判断力，才是我们应该做的。</p><blockquote><p>新的技术和信息资源能给我们提供新的预判能力。</p></blockquote><p>我们要善于在新的方向和事情上探索，敢于尝试，拓宽自己的思维界限，才能让我们对潜在危机的预测能力得到提升。</p><blockquote><p>实现短期和长期目标的平衡，优先处理重要事情，而不是紧急事情。</p></blockquote><p>我们应该学会运用高效战略和长期思维来节省成本，释放资源，创造机会，而不是止步于眼前的利益。</p><p>除此之外，面对潜在的危机，我们不能让抵触、否认情绪左右我们的判断和行动，在危机发生时也不能有得过且过的想法，这样最终会导致我们付出昂贵的代价，及时采取行动比什么都重要。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="股票基金投资">股票基金投资<a class="hash-link" href="#股票基金投资" title="标题的直接链接">​</a></h2><p>在双十二的时候，我在京东上买了两本股票投资相关的书，都与一个人有关：杰西·利弗莫尔。知道这个人也是我从网上了解到的，关于他的两本有名的书《股票大作手操盘术》和《日本蜡烛图技术新解》。第一本可以说是人物传记吧，记录了他在投资生涯的一些心理想法，算是投资与心理学吧。第二本的蜡烛图技术，则是一本股票投资的技术书籍，主要讲的是 K 线图（蜡烛图）的知识，看起来还是比较枯燥的。</p><p>第一本书我完整的看完了，杰西·利弗莫尔认为自己是一个投机者，而且他不喜欢与别人分享自己的想法，因为他觉得会受到影响，他有自己的判断力，因此他才能成为 20 世纪初的一名股票投资天才。这本书更多的是记录的是当时他的一种心理活动，可以看出来利弗莫尔始终对自己所从事的股票投资活动保持着敬畏心，理性分析和冷静让他得以如此成功，而他确实也这样劝诫同样想做股票投资的人。看完还是收益良多的，最起码对自己后期参与基金投资活动过程中，如何保持良好的心态有了很大的帮助。</p><blockquote><p>只有少数投机者能够做到心情不受股票具体走势的影响，而我就是其中之一。</p></blockquote><p>说到这里，对比国内国外的股票投资市场，国外已经非常成熟，主要由投资机构为个人代持投资，而国内还比较混乱，以散户个人投资占主导。大部分的国内投资者对股票投资知识没有一个基本的认知，情绪受股价波动影响，促成了频繁的短期交易，失去了投资的意义，而更像是投机行为。</p><blockquote><p>不要亏钱————不要失去你的筹码，不要失去你的底线。</p></blockquote><p>在投资过程中，难免会出现损失，要以理智的头脑进行思考，及时止损，抛弃幻想，才能控制住投资风险。</p><p>第二本书是一本典型的技术书籍，没有太多废话，分析了上百种 K 线图的情况，我只是粗略的看了看，还是以参考为主，一口气看完也没有什么实际意义。当然，我觉得第二本带给我的另外一个收获就是：杰西·利弗莫尔作为一个西方的股票投资者，在投资过程中积极探索，发现了东方投资界中日本发明的一种分析工具“蜡烛图”，也就是我们今天所说的 K 线图，通过对比分析，发现蜡烛图相比他们西方的分析工具有极大的优势，并将其积极普及到西方投资界。这又说明了一个很简单的道理，做任何事情，不能仅仅着眼于事情本身，更要能发现如何让事情做的更好的途径，而这些更好的方法很可能就在我们的对手手中或者我们自己未曾触及的领域，积极探索学习，会获得更好的结果。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>我们处于一个经济社会之中，大部分的社会活动都涉及到经济知识，了解经济学也是帮助我们自己学会如何高效的管理自己的财富、社会关系。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="书">书<a class="hash-link" href="#书" title="标题的直接链接">​</a></h2><ul><li>《灰犀牛：如何应对大概率危机》- <!-- -->[美]<!-- -->米歇尔·渥克 著，王丽云 译</li><li>《股票大作操盘术》- <!-- -->[美]<!-- -->杰西·利弗莫尔 著，<!-- -->[美]<!-- -->理查德·斯密特 编，邓力 鞠玮婕 译</li><li>《日本蜡烛图技术新解》- <!-- -->[美]<!-- -->史蒂夫·尼森 著，梁超群 陈辉 译</li></ul>]]></content:encoded>
            <category>生活</category>
            <category>阅读</category>
            <category>金融与经济</category>
        </item>
        <item>
            <title><![CDATA[使用 npm]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Nodejs/tools-npm</link>
            <guid>/Computer-Technology/Nodejs/tools-npm</guid>
            <pubDate>Sat, 06 Jul 2019 15:43:00 GMT</pubDate>
            <description><![CDATA[npm 是 Node.js 的一个包管理器，Web 前端工程师也经常利用它构建前端工作流，来看看如何愉快的使用 npm。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-05-14 14:27:00 </em></p></blockquote><p>npm 是 Node.js 的一个包管理器，Web 前端工程师也经常利用它来简化开发流程，看看如何愉快的使用 npm ，并且发布自己的包，让 npm 成为我们的开发利器。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="npm">npm<a class="hash-link" href="#npm" title="标题的直接链接">​</a></h2><blockquote><p><strong>Node.js：</strong><a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/</a> </p></blockquote><blockquote><p><strong>npm：</strong><a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/</a></p></blockquote><p>npm 通常是伴随着 Node.js 一起安装的，只要安装了 Node.js，那么 npm 也就已经安装好了，可以在命令行运行以下命令查看版本：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">node</span><span class="token plain"> -v</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> -v</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="换源">换源<a class="hash-link" href="#换源" title="标题的直接链接">​</a></h2><p>这是作为墙内的开发者必须掌握的一项技能，将 npm 的官方源替换为国内源，这样下载 npm 包速度也会更快，更不容易出错。</p><p>运行以下命令查看 npm 配置，其中有仓库源 <code>registry</code> 一项：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> config list</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> config get registry     // 只查看 registry 配置</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>更换仓库源：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> config </span><span class="token builtin class-name">set</span><span class="token plain"> registry </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">source</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> config </span><span class="token builtin class-name">set</span><span class="token plain"> registry https://registry.npmjs.org/         // 换回官方源</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> config </span><span class="token builtin class-name">set</span><span class="token plain"> registry https://registry.npm.taobao.org/    // 换到国内淘宝源</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>更换掉仓库源之后，再查看下是否更换成功。</p><p><strong>请勿使用 cnpm 等其它类似工具，用官方 npm 换到国内源即可。</strong></p><blockquote><p>常用源切换工具 <a href="https://www.npmjs.com/package/nrm" target="_blank" rel="noopener noreferrer">nrm</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="常用命令">常用命令<a class="hash-link" href="#常用命令" title="标题的直接链接">​</a></h2><p>通常来说，我们只会利用 npm 来安装、卸载依赖包，或者在项目启动时进行初始化。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> init </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">-y</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">   // 在当前文件夹初始化，生成一个 package.json 文件，-y 选项为全部默认</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># https://docs.npmjs.com/cli/v6/commands/npm-install</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> --global</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">-g </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">package_name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">     // 在全局安装指定包</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> uninstall --global</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">-g </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">package_name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">   // 卸载安装在全局的指定包</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">-P</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">--save</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">package_name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">     // 在当前项目本地安装生产环境依赖包，会列在 dependencies 中</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> uninstall </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">-S</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">--save</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">package_name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">   // 卸载安装在项目本地的 dependencies 中指定包</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> -D</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">--save-dev </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">package_name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">   // 在当前项目本地安装开发环境依赖包，会列在 devDependencies 中</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> uninstall -D</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">--save-dev </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">package_name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> // 卸载安装在项目本地的 devDependencies 中指定包</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里值得一提的是，在 npm 5.2+ 之后，附带了一个 <code>npx</code> 命令，作用是<strong>执行包的二进制文件</strong>：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># https://www.npmjs.com/package/npx</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npx </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">options</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">-p</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">--package </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">pkg</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">. </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">command</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">command-arg</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npx create-react-app my-app     // 执行 create-react-app 包的主命令</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>通过 <code>npx</code> 命令执行包的二进制文件有一个优点：<strong>不需要安装包，即可执行包的命令，对本地环境无污染。</strong></p><p>而且，在 npm 6.0+ 之后，<code>init</code> 命令可以接收一个新的选项：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># https://docs.npmjs.com/cli/v6/commands/npm-init</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> init </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">initializer</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> init react-app my-app       // same as </span><span class="token builtin class-name">:</span><span class="token plain"> npx create-react-app my-app</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其中 <code>&lt;initializer&gt;</code> 是一个以 <code>create-</code> 开头命名的包，算是对这种特殊命名的包的 <code>npx</code> 命令的简写方式。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="node-版本管理">Node 版本管理<a class="hash-link" href="#node-版本管理" title="标题的直接链接">​</a></h2><p>作为一名 Node.js 开发，如何在自己的设备上管理多个 Node 版本是一个相当重要的技能，而 npm 库中的 <a href="https://www.npmjs.com/package/n" target="_blank" rel="noopener noreferrer"><code>n</code></a> 模块就为我们提供了最佳解决方案，使用它可以在同一台设备上安装多个不同版本的 Node，并随时进行切换，同时也可以方便的升级、降级。</p><p>作为一个管理 Node 的工具，建议将其安装在全局：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> -g n</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>安装完成后，执行以下命令安装相应版本的 Node：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">n </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">version</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> // eg: n </span><span class="token number" style="color:#36acaa">10.16</span><span class="token plain">.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">n latest    // 安装最新版 </span><span class="token function" style="color:#d73a49">node</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">n lts       // 安装最新的 LTS 版本 </span><span class="token function" style="color:#d73a49">node</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>查看已安装的所有版本的 Node：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">n   // 貌似只能查看通过 n 模块安装的 </span><span class="token function" style="color:#d73a49">node</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>切换 node 版本来执行命令：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">n use </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">version</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">args </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">    // 切换到已安装的另一个版本的 </span><span class="token function" style="color:#d73a49">node</span><span class="token plain"> 并执行命令</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>卸载 node：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">n </span><span class="token function" style="color:#d73a49">rm</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">version</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">      // 卸载指定版本 </span><span class="token function" style="color:#d73a49">node</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">n prune             // 卸载所有已安装 </span><span class="token function" style="color:#d73a49">node</span><span class="token plain"> 版本，但当前正在使用的 </span><span class="token function" style="color:#d73a49">node</span><span class="token plain"> 版本不会被卸载</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>Windows 平台用户可以使用 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener noreferrer">nvm-windows</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="npm-升级">npm 升级<a class="hash-link" href="#npm-升级" title="标题的直接链接">​</a></h2><p>虽然 npm 是随 Node 一起安装的，但在之后通过 <code>n</code> 模块升级 Node 的过程中，npm 不会也跟着升级，需要我们手动升级：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> -g npm</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">@latest</span><span class="token operator" style="color:#393A34">|</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">version</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="发布-npm-包">发布 npm 包<a class="hash-link" href="#发布-npm-包" title="标题的直接链接">​</a></h2><p>通常，我们只是下载安装 npm 库中的包来使用，辅助我们进行开发，但去了解如何利用 npm 发布包也是有必要的，这样我们也可以写一些自己的模块并进行发布供自己和他人使用。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="注册">注册<a class="hash-link" href="#注册" title="标题的直接链接">​</a></h3><p>首先需要去 npm 官网注册一个账号（无需翻墙）。如果想更换头像的话，还要去注册一个 <strong>Gravatar</strong> 并上传一张照片，才可以将这张照片作为头像。</p><blockquote><p><strong>npm：</strong><a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="初始化">初始化<a class="hash-link" href="#初始化" title="标题的直接链接">​</a></h3><p>在本地新建一个文件夹，并初始化：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> init </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">-y</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后，修改生成的 <code>package.json</code> 中的必要字段，例如 <code>name</code>、<code>author</code>、<code>homepage</code> 等等，具体的字段以及含义可以去查 npm 的官方文档。</p><p><strong>这里需要注意的是，如果你将要发布的包，是别人通过 <code>require('package_name')</code> 来使用的话，请指定 <code>package.json</code> 中的 <code>main</code> 字段为该包的入口文件。或者，也可能你将要发布的包只是一个命令行工具，那么删除掉 <code>main</code> 字段，指定 <code>bin</code> 字段即可。当然 <code>main</code> 与 <code>bin</code> 是可以共存的。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="编码">编码<a class="hash-link" href="#编码" title="标题的直接链接">​</a></h3><p>初始化完成后，就主要是我们编码了，建议将入口文件放在项目根目录下，其余代码文件都放在相应文件夹下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Package/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  - build/   // 编译后用于生产环境的文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  - config/  // 项目开发环境配置文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  - bin/     // 项目命令行脚本文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  - scripts/ // 项目 npm 脚本文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  - src/     // 项目源码文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  - index.js // 项目入口文件</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>这里需要注意，<code>bin/</code> 中的命令行脚本文件，必须在每个文件的第一行指定 <code>#!/usr/bin/env node</code>，表明这是一个 node 脚本，以及执行该脚本的二进制文件系统路径。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="发布前本地测试">发布前本地测试<a class="hash-link" href="#发布前本地测试" title="标题的直接链接">​</a></h3><p>在编码完成并完善 <code>package.json</code> 文件后，我们可能需要测试才能确保最终发布后能被自己或者他人通过 npm 安装正常使用。</p><p>我们不需要反复进行<strong>发布--测试--修复--撤销发布--重新发布</strong>这个过程，npm 官方为我们提供了便捷的本地测试工具，也就是 <code>link</code> 命令。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># https://docs.npmjs.com/cli/v6/commands/npm-link</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">link</span><span class="token plain">    // 在你将要发布的包根目录下执行该命令，如同将其安装到全局一样，更改文件及时生效，不需要重新 </span><span class="token function" style="color:#d73a49">link</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">link</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">package_name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">     // 在另外一个测试目录中执行该命令，如同 </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> unlink  // 测试完成后，在你将要发布的包根目录下执行该命令，unlink 会将其从全局卸载</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>本地测试还是相当简单和方便的，也是无污染的。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="小技巧">小技巧<a class="hash-link" href="#小技巧" title="标题的直接链接">​</a></h4><p>这里有个小技巧可以不使用 <code>npm link</code> 命令就能在本地测试，而且是真的无污染：</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token property" style="color:#36acaa">"dependencies"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"my-dev-module"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"file:../my-dev-module/index.min.js"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="登录">登录<a class="hash-link" href="#登录" title="标题的直接链接">​</a></h3><p>发布前需要在命令行登录 npm <strong>官方仓库</strong>：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># https://docs.npmjs.com/cli/v6/commands/npm-adduser</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> login </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">--registry</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">--scope</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">@orgname</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>注意：如果替换了官方源，一定要指定 <code>--registry=https://registry.npmjs.org/</code>，这样才能登录到官方仓库进行发布。</strong><code>--scope</code>则是命名空间，例如 <code>@babel</code>。</p><p>登录成功后，可以查看已登录用户：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># https://docs.npmjs.com/cli/v6/commands/npm-whoami</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">whoami</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">--registry </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">registry</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="发布">发布<a class="hash-link" href="#发布" title="标题的直接链接">​</a></h3><p>登录后，即可通过 <code>publish</code> 命令发布包：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># https://docs.npmjs.com/cli/v6/commands/npm-publish</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> publish </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">--access public</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">   // 在将要发布的包根目录执行</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>需要注意，如果发布的包带有命名空间，例如 <code>@babel/core</code>，需要指定发布限制范围 <code>--access</code>，默认为 <code>restricted</code>（受限制），如你的 npm 帐户不是付费帐户，必须指定为 <code>public</code>。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="撤销发布">撤销发布<a class="hash-link" href="#撤销发布" title="标题的直接链接">​</a></h3><p>通常，是在本地测试无误后进行发布，如果真的在发布后发现问题，导致不能正常使用，可以撤销发布：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># https://docs.npmjs.com/cli/v6/commands/npm-unpublish</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> unpublish </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">@scope</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">/</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">package_name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">@</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">version</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>事实上，npm 官方不建议开发者使用 <code>unpublish</code> 命令来撤销发布，因为如果其它用户已经安装了该包作为依赖，并能正常使用的情况下该包被撤销，会导致其它用户无法再次安装该包。</strong>所以，尽可能用 <code>deprecate</code> 命令来表明该包已被弃用，即便用户安装成功，也会有醒目的提示告知用户已被弃用，用户则会及时寻找替代包。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># https://docs.npmjs.com/cli/v6/commands/npm-deprecate</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> deprecate </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">package_name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">@</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">version</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">message</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="退出登录">退出登录<a class="hash-link" href="#退出登录" title="标题的直接链接">​</a></h3><p>如果不是在自己的机器上工作，建议完成发布后退出登录，保证数据安全。退出登录与登录一样简单，同样需要指定 <code>--registry</code> 与 <code>--scope</code> 参数。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># https://docs.npmjs.com/cli/v6/commands/npm-logout</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> </span><span class="token builtin class-name">logout</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">--registry</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">--scope</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">@orgname</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="最佳实践">最佳实践<a class="hash-link" href="#最佳实践" title="标题的直接链接">​</a></h2><p>以上，是使用 npm 工具本身的过程，但 npm 工具本质上是为维护和发布 Node 模块/包服务的，开发 Node 模块/包有一些很好的社区实践，这里大致记录一下开发 Node 模块/包过程中一些注意的关键点。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="模块包的类型">模块/包的类型<a class="hash-link" href="#模块包的类型" title="标题的直接链接">​</a></h3><p>根据用途，模块/包的类型大致可以分为以下几种，不同的类型需要做对应的处理。</p><ul><li>Node 包</li><li>Web 包</li></ul><p>Node 包一般来说发布时是不需要压缩的，JavaScript 代码也不需要编译，但需要标记一些特殊字段（如 <code>engines</code>）表明包所依赖的 Node 版本限制。</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// https://docs.npmjs.com/cli/v6/configuring-npm/package-json#engines</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"engines"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"node"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"&gt;=0.10.3 &lt;0.12"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>而用于 Web 的包在发布前通常需要进行编译和压缩，目的是解决兼容性问题和资源加载优化，而这些工作一般借助 <strong>Babel</strong>、<strong>Rollup</strong> 等工具配合使用即可。另一方面，用于 Web 的包在开发过程中为了便于调试，所以引入的应该是未经编译和压缩的源码版本，而打包时再引入经过编译和压缩的版本，实现这个目的社区有一个比较通用的做法就是在入口文件使用 <code>NODE_ENV</code> 进行判断并导出相应版本文件，以下是 React 的入口文件示例：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">NODE_ENV</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'production'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  module</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'./cjs/react.production.min.js'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  module</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'./cjs/react.development.js'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>通过下面这篇文章即可了解实现细节。</p><blockquote><p><a href="https://overreacted.io/how-does-the-development-mode-work/" target="_blank" rel="noopener noreferrer">https://overreacted.io/how-does-the-development-mode-work/</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="支持多个环境">支持多个环境<a class="hash-link" href="#支持多个环境" title="标题的直接链接">​</a></h3><p>纵观 Node.js 的发展历史，其生态中出现过多种模式，例如 <a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md" target="_blank" rel="noopener noreferrer">AMD</a>、<a href="http://www.commonjs.org/" target="_blank" rel="noopener noreferrer">CommonJS</a>、ESM(ECMAScript modules)，以及 <a href="https://github.com/umdjs/umd" target="_blank" rel="noopener noreferrer">UMD</a>，这种情况给包的开发带来一定困难，不过经过多年的发展社区已经形成一个约定（共识），可以很方便的解决该问题从而同时支持所有环境。</p><p>主要是通过对应字段导出不同的入口文件来实现，下面是一个示例：</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"main"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"index.js"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"module"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"index.esm.js"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"browser"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"index.umd.js"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>具体实现可以通过下面这篇文章进行了解。</p><blockquote><p><a href="https://2ality.com/2017/04/setting-up-multi-platform-packages.html" target="_blank" rel="noopener noreferrer">https://2ality.com/2017/04/setting-up-multi-platform-packages.html</a></p></blockquote><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="新的方案">新的方案<a class="hash-link" href="#新的方案" title="标题的直接链接">​</a></h4><p>事实上，<code>main</code> 和 <code>browser</code> 字段在 npm 文档中有定义，查看文档：</p><blockquote><p><a href="https://docs.npmjs.com/cli/v6/configuring-npm/package-json#main" target="_blank" rel="noopener noreferrer">https://docs.npmjs.com/cli/v6/configuring-npm/package-json#main</a></p></blockquote><p>而 <code>module</code> 字段后来并没有被 Node 社区采用，而是推出了新的模块入口点定义字段 <code>exports</code>，配合<strong>条件导出</strong>我们就可以实现支持多个环境。查看文档：</p><blockquote><p><a href="https://nodejs.org/dist/latest-v16.x/docs/api/packages.html#package-entry-points" target="_blank" rel="noopener noreferrer">https://nodejs.org/dist/latest-v16.x/docs/api/packages.html#package-entry-points</a></p></blockquote><p>示例：</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"exports"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"import"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./index.esm.js"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"require"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./index.cjs.js"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"browser"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./index.umd.js"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"main"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./index.cjs.js"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="类型定义">类型定义<a class="hash-link" href="#类型定义" title="标题的直接链接">​</a></h3><p>JavaScript 并不是一个强类型语言，所以 IDE 要做类型推断和代码智能提示是比较困难的，尤其是编译、压缩、混淆后的代码对于用户使用有诸多不便，要不断的查询文档。然而，<a href="https://www.typescriptlang.org/" target="_blank" rel="noopener noreferrer">TypeScript</a> 的出现使这一状况得到了改善，如果源代码直接使用 TypeScript 编写，最终编译时生成<strong>类型定义文件</strong>，在发布 npm 模块/包时指定一个 <code>types</code> 字段即可，查看文档：</p><blockquote><p><a href="https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html" target="_blank" rel="noopener noreferrer">https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html</a></p></blockquote><p>对于使用 JavaScript 编写的源代码，事实上也可以利用 TypeScript 工具生成相应的类型定义文件，并随之一起发布，查看文档：</p><blockquote><p><a href="https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html" target="_blank" rel="noopener noreferrer">https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html</a></p></blockquote><p>在使用第三方库时，如果作者发布时没有附带类型定义文件，我们则可以去社区维护的 <a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="noopener noreferrer">DefinitelyTyped</a> 仓库中看看，使用 npm 命令即可查询：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> info @types/react</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考资料">参考资料<a class="hash-link" href="#参考资料" title="标题的直接链接">​</a></h3><ul><li><a href="https://github.com/sarbbottam/write-an-open-source-js-lib" target="_blank" rel="noopener noreferrer">https://github.com/sarbbottam/write-an-open-source-js-lib</a></li><li><a href="https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html" target="_blank" rel="noopener noreferrer">https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html</a></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>工具</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>Web 后端</category>
            <category>Node.js</category>
            <category>npm</category>
        </item>
        <item>
            <title><![CDATA[再游成都]]></title>
            <link>https://wang1212.github.io/Life/tourism/tourism-chengdu-company</link>
            <guid>/Life/tourism/tourism-chengdu-company</guid>
            <pubDate>Tue, 11 Jun 2019 08:09:00 GMT</pubDate>
            <description><![CDATA[距离去年夏天与朋友一起来成都游玩已经快一年时间，而今年的公司春游活动恰好也定为了成都，有机会再游成都，弥补上一次的遗憾。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2019-06-11 08:09:00 </em></p></blockquote><u>2019-04-26</u><br><br><p>距离去年夏天与朋友一起来成都游玩已经快一年时间，而今年的公司春游活动恰好也定为了成都，有机会再游成都，弥补上一次的遗憾。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="去年夏天">去年夏天<a class="hash-link" href="#去年夏天" title="标题的直接链接">​</a></h2><p>记得去年与朋友一起来成都游玩是在 8 月份，那时候正是夏天，天气很炎热。没想到时间真快，距离现在也快一年了，上一次在成都玩了四天，整体感觉还是比较轻松愉快的。</p><p>翻看去年的相册，记忆仍历历在目，上一次是同行的两位女性朋友基本安排了所有的行程路线规划，我只负责跟着玩，哈哈。熊猫基地、人民公园、宽窄巷子、东郊记忆、春熙路、太古里等等这些网红打卡地被我们去了个遍，“小郡肝”串串排队吃了，四川火锅也吃了，吃喝玩乐基本上全覆盖。当然啦，这里面也有很多小小的遗憾，比如去熊猫基地没看到大熊猫在野外活动，在大太阳底下排了两个小时队去产房看熊猫让人至今对熊猫基地印象不太好。而且，上次去成都本来想去爬山来着，但同行的朋友好像都不太喜欢爬山，而且有的人恐高。。。</p><p>今年，现在已经四月份了，天气也快热起来了，公司有计划要去春游，给出两个目的地选项，一个是汉中，另一个则是成都。经过一众投票下来，不出所料，大多数人还是想去成都玩一玩。刚开始，心里想着成都已经去过了，还挺不想去的，后来想想这次公司的春游计划事实上与上次去成都游玩的地方基本上重叠不大，而且最重要的是要去爬山，正合我意。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="春游计划">春游计划<a class="hash-link" href="#春游计划" title="标题的直接链接">​</a></h2><p>公司的春游计划提前一个月就开始了，确定是五一节前去，实际上三月底就开始征求大家的意见，并在确定了目的地后开始制定游玩计划，时间总共是三天，周五至周末。</p><p>很多同事觉得三天时间太短，而且坐高铁来回都得半天多时间，玩的时间反而没多少了，所以有人建议周四晚上过去，不过最终因为各种原因还是没通过。当然，我其实对于去几天没有什么意见。</p><p>事实上，重要的应该是到了成都之后，去哪里玩。大熊猫可是国内外闻名，成都有熊猫基地，这正好成了一个能满足大多数人需求的景点。我自从上次经历了熊猫基地槽糕的体验之后，对那里印象不好，其实心里比较反感。集体活动还是比较花费时间的，熊猫基地一行就占用了半天的时间，作为周末早上的计划，也是离开成都之前的最后一站景点。</p><p>爬哪座山，其实很好选，因为山一般离市区很远，有险峻的山，有缓一点的山，基于集体活动的背景，只能选离近的，安全系数高的了，所以“青城山”成了不二之选，据说都江堰也在附近。爬山作为周六早上的安排。这样的话，基本上周六一天也安排的差不多了。</p><p>至于周五，也就是当天到成都的时候怎么安排，考虑到很多人第一到成都游玩，所以第一天的话基本上以自主选择为主。到成都下高铁然后安排好酒店应该也到下午一两点了，酒店则定在了“宽窄巷子”附近，让大家安排好之后可以下午去那里逛一逛，毕竟也是个网红景点，还是值得一去。</p><p>吃喝玩乐怎么能差一个呢，除过玩，四川的火锅也是远近闻名，因此在周五的晚上安排了大家一块吃一顿火锅，也是满足了大多数吃货的心愿了。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="成都">成都<a class="hash-link" href="#成都" title="标题的直接链接">​</a></h2><p>周五早上大家都早早的出发，8 点 30 分在北客站集合，9 点的高铁，大家的心情似乎还都不错。西安的天气也还行，就是早上吹风挺冷的，据说成都这几天有雨，大家瞬间就担心起来，回不回去成都就是在酒店躺三天呢？哈哈，其实从上次来成都四天，经历了其中三天都下了阵雨，已经对大家说的成都多雨，空气湿热有了切身体验，反而对这些不太担心。</p><p>高铁三个半小时的车程过得还是挺快的，大概中午快 1 点钟到达成都站，这次我们大多数人直接在站内做地铁去了宽窄巷子站，然后步行大概一公里多就到了酒店。说到这里不得不吐槽一下成都的公共交通卡。西安最近一两年开始更加开放，先后与支付宝、微信、小米等合作，实现了通过扫码或者 NFC 刷卡坐公交、地铁，这对于一个旅游城市来说具有重大意义。然而，成都作为一个后起之秀，名声在外，比西安更加开放，却在公交卡、地铁卡上面做起了关起门来的生意，据了解这也遭到了当地人的嘲讽，而对于我们这些来旅游的人来说，明显不够方便，我只能说西安在这方面已经超越了成都一大截。</p><p>舟车劳顿，和我一块住的同事很多年前就来过成都，宽窄巷子更是没了兴趣，和我一样下午都在酒店休息了几个小时，就等晚上的火锅聚餐了。不过，晚上的聚餐稍显平淡，没有想象中的场景，本以为大家都很喜欢四川火锅，没想到都惦记着赶紧吃完饭去逛。因此，这场聚餐可以用草草了事来形容。</p><p>幸运的是，这次来成都，刚好朋友休假，正好可以聚一聚，公司聚完餐就打车赶着去朋友那边了。我们两个在清吧喝了点小酒，谈了谈人生，酒还不错。等朋友的女朋友做完实验后已经 9 点多了，朋友觉得我来一次不容易，刚好他也休假，想多玩一会，于是正好最近《复仇者联盟 4》上映，我们三个看了一场电影。回到酒店已是凌晨 1 点多，还下起了小雨，没有拿房卡，叫醒同事来开门觉得还是挺对不住的。</p><p>周六的计划是爬山，一大早 7 点就要坐大巴去青城山，便早早起来吃了早饭。青城山分为前山和后山，前山相比后山要更险峻，而且前山为 2000 多米海拔，而后山只有一半高。来之前，听说是要爬前山的，没想到，到了青城山脚下，却被告诉是爬后山，略感失望。坐大巴大概一个半小时就到了青城山脚下，上山的路有好几条，当然缆车也是有的，不过我们男同事大多都是选择走最险的，而那些女同事则要坐缆车，所以爬山就要分头行动了，最终在上山的门口集合就行了。刚上山的时候，基本上大家都走在一块，走着走着就分成了几队，有的人体力好基本不用休息，而有的人刚爬一会就感觉撑不住了。</p><p>我自己还是非常享受爬山的整个过程的，基本上都是按自己的节奏来，不跟别人比爬的快，想休息就休息一会。想起去年爬华山的时候，突然觉得青城山根本不算什么。后山只有 1000 多米高，一个小时就登顶了，而且发现青城山好像也没什么特别的，在山顶没怎么逗留就下山了。下山的时候，有一部分同事选择坐缆车下，而且依然准备走下去，这次走另一条路。下山是真的比上山难，膝盖受不了，而且腿感觉立马就软了要摔倒，不过一路小跑，基本上不到四十分钟就下了山。</p><p>大家在山脚下聚齐的时候刚好中午十二点多，这个旅游团购里面有一份午餐，不过还需要坐大巴去另一个地方，大概五分钟的车程。沿途的路边有很多农家乐，我们便在其中一家农家乐下了车，这个应该是和旅行社合作的。吃了之后才知道旅游团的坑名不虚传，每人一份 20 元的午餐基本上就是几口菜外加一小碗米饭，还是等到了酒店休息下吃顿好的。到了酒店差不多下午两点多，比预想的要回来的早，爬山的过程中汗水浸透了衣服，赶紧回酒店洗了个澡，感觉很舒服。晚上也是自由活动时间，今天晚上大多数同事去更远的地方逛了，比如锦里、武侯祠、春熙路，不过这些地方我去年来的时候已经去过了。</p><p>昨晚回来的时候，朋友执意要在今晚一起吃个饭，恰好他和她女朋友今天都没有事情忙。我们一起吃了个他们两个常吃的，觉得还不错的纸包鱼。吃完饭朋友的女朋友想去买东西，我便不想再打扰朋友了，于是准备回酒店，但朋友不太愿意让我走，这个时候还下起来了雨，我们在周围的商场逛了一会，朋友提议去找个茶馆。成都的“慢生活”让很多人都比较向往，正因此茶馆也相当的多。</p><p>在茶馆里我们喝着茶，简单的聊着一些家常话，看着窗外的雨下个不停，大家偶尔会比较沉默。现在感觉大家是真的长大了，彼此都少了些原先的稚气。</p><p>来成都还是避免不了被雨淋，成都的雨夜似乎也没有什么特别的。</p><p>两天的行程已然匆匆而过，明天下午就要返程了，说起来还有点感慨。我本身是一个不太喜欢漂泊的人，每次出差或者旅游，去另一个地方呆几天不免会有一些失落。</p><p>睡了一顿好觉，早上吃了早饭，出发最后一站，熊猫基地。想到上次在太阳下面暴晒两个小时排队的情景，我对这里提不起一丝兴趣。下车之后，比预想的情况好，游客少得多，可能是因为大清早的原因吧，天气也不热，整体来说还算舒服。我和同事在熊猫基地逛了两个多小时，这次的收获还是颇感意外的。四月底的天气还算凉爽，大熊猫们基本都在户外活动，这次真是拍到了好多大熊猫在野外活动的照片和视频，大熊猫们还是挺调皮的。这一次意外的收获也算是弥补了上次来成都的遗憾了吧。</p><p>时间很快就到了中午，大家基本该逛的也都逛完了，吃完饭休息一会就要去高铁站了，踏上归程。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>两次来成都收获了不同的东西，第二次也弥补了第一次来时留下的一些遗憾。总之，成都是一座年轻的城市，也是一座适合年轻人的城市。</p>]]></content:encoded>
            <category>生活</category>
            <category>旅游</category>
            <category>成都</category>
        </item>
        <item>
            <title><![CDATA[围城]]></title>
            <link>https://wang1212.github.io/2019/4/8/Life/reading/reading-</link>
            <guid>/2019/4/8/Life/reading/reading-</guid>
            <pubDate>Mon, 08 Apr 2019 22:29:00 GMT</pubDate>
            <description><![CDATA[终于看完了钱钟书的《围城》，也正好写篇日志记录下自己最近刚看完的一些书的个人感受。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2019-04-08 22:29:00 </em></p></blockquote><p>终于看完了钱钟书的《围城》，也正好写篇日志记录下自己最近刚看完的一些书的个人感受。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="就想看看书">就想看看书<a class="hash-link" href="#就想看看书" title="标题的直接链接">​</a></h2><p>自从工作以来，难得看了几本与工作无关的书，感觉还不错，算是生活的调味料。双十一来了，我也跟着加入了剁手的行列，买了四本书。</p><p>事实上，在双十一之前，刚看完一本小说，《摆渡人》。这本书前半部分看起来相当乏味，不过等到看了快一半的时候，突然变得有趣起来，让我接连好几天晚上专门留出时间看完了它。这是英国作家克莱儿·麦克福尔的作品，获得了多项世界大奖，被誉为令千万读者灵魂震撼的心灵治愈小说。作为读后评价，这本书还是不错的，简单的冒险故事情节，围绕主人公心理的变化，细腻的心理描述让整个故事也颇为有意思。当然，作为读者来说，这本小说给读者带来的思考也是很有意义的。</p><blockquote><p>你之所以相信一个人说的话，是因为他说了你想听的话。 <br>
有时候必须要残忍，有时候为达目的真的可以不择手段。 <br>
每个人都要穿过他们自己的荒原。在这个地方发现你已经死去的真相，然后无可奈何的接受。 <br>
不是这个地方不让他们走，而是这些灵魂束缚住了自己。</p></blockquote><p>我不喜欢写书评，感觉自己不够资格，当然同时又喜欢把一些好的句子或者东西记录下来，算作收藏。</p><p>据说，《摆渡人》的作者出了第二部，我从网上看到评价似乎不怎么好，也就没有去看，或许第二部是第一部火了之后的营销手段的产物，太多的人人逃不过世俗的束缚。</p><p>看完了《摆渡人》，就想着以后每年看几本工作之外的书，也算是个兴趣爱好和目标。于是，双十一买了四本之前一直想看的书：《围城》、《我们仨》、《活着》、《人间失格》。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="人间失格">人间失格<a class="hash-link" href="#人间失格" title="标题的直接链接">​</a></h2><p>在看《你的名字》的时候，就听里面的男主角总是提到“太宰治”，莫非是个名人，是个什么样的人呢？其实，当时也没怎么特别去关注这个人。直到后来了解到《人间失格》，太宰治就是该书的作者。在看这本书之前，了解了很多太宰治的生平事迹，让人感到震惊、好奇，又觉得可惜。</p><p>同时，让我感到好奇的是，我了解到《人间失格》这本书竟然深受国内 90 后，00 后年轻一代人的喜爱。</p><blockquote><p>相互轻蔑却又彼此来往，并一起自我作贱——这就是世上所谓“朋友”的真面目。 <br>
胆小鬼连幸福都会害怕，碰到棉花都会受伤，有时还被幸福所伤。 <br>
我的不幸，恰恰在于我缺乏拒绝的能力。我害怕一旦拒绝别人，便会在彼此心里留下永远无法愈合的裂痕。 <br>
因为怯懦，所以逃避生命，以不抵抗在最黑暗的沉沦中生出骄傲，因为骄傲，所以不选择生，所以拒斥粗鄙的乐观主义。 <br>
我仍然认为向人诉苦不过是徒劳，与其如此，不如默默承受。</p></blockquote><p>太宰治在我看来，是一个太较真的人，所以他总是在犯错，又总是在自责，世俗对他来说太过丑陋，但他又逃脱不了世俗的束缚，最终以自杀结束了自己的生命。太宰治的内心是矛盾的，想的太过理想化，但自己总是做不到。这似乎契合了当下年轻人的精神状况，想快速获得成功，但又不得不一遍遍面对现实的打击。在浮躁的社会之中，稍有不慎，可能就会陷入精神奔溃。</p><p>《人间失格》我仅仅花了三四天熬夜看完了，而这并非我读的比较粗，确实是因为太宰治的写作手法比较吸引人和故事引人入胜，让人总是想迫不及待的知道接下来的剧情发展。实际上，故事本身并非是那种跌宕起伏的剧情，大概是在一种略感悲伤的气氛下的琐事叙述。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="我们仨">我们仨<a class="hash-link" href="#我们仨" title="标题的直接链接">​</a></h2><p>那个时候恰好不是很忙，于是隔了几天就开始看《我们仨》了，作者是杨绛先生。了解的人应该知道，杨绛先生和钱钟书是一对令人羡慕的婚姻伴侣，他们的故事已成为一段佳话。</p><blockquote><p>人间不会有单纯的快乐，快乐总夹杂着烦恼和忧虑，人间也没有永远。 <br>
惟有身处卑微的人，最有机缘看到世态人情的真相。一个人不想攀高就不怕下跌，也不用倾轧排挤，可以保其天真，成其自然，潜心一志完成自己能做的事。 <br>
现在我们三个失散了。剩下的这个我，再也找不到他们了。我只能把我们一同生活的岁月，重温一遍，和他们再聚聚。 <br>
我陪他走得愈远，愈怕从此不见。 <br>
我一个人，怀念我们仨。</p></blockquote><p>《我们仨》算是杨绛对往事的回忆，对家人的追忆。整本书都在写一件很简单很平淡的小事，语言细腻、平淡，没有太多华丽的词藻和艺术渲染成份。作为我来说，读起来似乎感受不到任何的悲伤，故事平淡又感觉真实，可能作为现年龄阶段的我来说无法真正理解作者当时的心境，但作者通过文字给读者传递的感情是让人感到温暖的。</p><p>抛开这本书，杨绛是一个富有智慧的典型中国女性，她与丈夫钱钟书都是文人，她比丈夫成名的早，但她不像张爱玲那样追求实现自我，追求爱情带来的激情，相反她选择了为丈夫做部分牺牲，当然这不是无畏的牺牲，这更像是一个聪明的选择，她经营了令人羡慕的婚后生活，她的家庭和谐而幸福，为他们留下了珍贵的记忆，也传为佳话。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="活着">活着<a class="hash-link" href="#活着" title="标题的直接链接">​</a></h2><p>《人间失格》和《我们仨》算是短篇小说吧，之前也很少看过长篇小说，这次余华的《活着》开启了我长篇小说的阅读之旅。这本书读下来，着实花费我不少的时间，恰好那段时间忙起来了，断断续续花了几个月才看完，其中有好几次晚上我都忍不住看到了深夜三四点。</p><blockquote><p>没有什么比时间更具有说服力了，因为时间无需通知我们就可以改变一切。 <br>
最初我们来到这个世界，是因为不得不来；最终我们离开这个世界，是因为不得不走。 <br>
人是为活着本身而活着，而不是为了活着之外的任何事物所活着。 <br>
人类无法忍受太多的真实。 <br>
人啊，活着时受了再多的苦，到了快死的时候也会想个法子来宽慰自己。</p></blockquote><p>以往看过的小说里面很少有农村题材的，而且主角是一个地地道道的农民，《活着》就是这样一本书，还获得了国外文学大奖。这本书更像是中国那个时代的真实写照，虽说是虚构的小说故事，但其中的每件小事都在当时那个时代中随处可循。</p><p>很久没读过这么长的小说，读的过程中相比之前看短篇小说也有不一样的体验，人物更多了，而且人物更丰满了，令人产生思考的地方也特别的多，读过之后明显印象会比较深一些。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="围城">围城<a class="hash-link" href="#围城" title="标题的直接链接">​</a></h2><p>很久之前就听说了钱钟书与杨绛的生平事迹，令人羡慕和倾佩。对杨绛先生的想象可能比较容易一些，而且看了她的书之后，也对她这个人的理解更具体了一些。但对于钱钟书，我一直无法想象他是个怎样的人，即便是看了他的旧照，也丝毫想象不出他应该是怎样的一个人。所以，看《围城》是慕钱钟书之名而来。</p><blockquote><p>天下只有两种人。比如一串葡萄到手，一种人挑最好的先吃，另一种人把最好的留到最后吃。照例第一种人应该乐观，因为他每吃一颗都是吃剩的葡萄里最好的；第二种人应该悲观，因为他每吃一颗都是吃剩的葡萄里最坏的。不过事实却适得其反，缘故是第二种人还有希望，第一种人只有回忆。</p></blockquote><p>这本是两种截然不同的选择，我们一般都是尊重每一种选择，因此我们得不到任何有用或者说有参考意义的结论。然而，钱钟书却给了一个结论，用回忆和希望来衡量，这真是一个令人感到惊讶的事情。</p><blockquote><p>婚姻是一座围城，城外的人想进去，城里的人想出来。</p></blockquote><p>这应该是流传最广的一句话了，起初我是不知道出自《围城》的，但并不影响我觉得这句话相当经典和干练，生动又形象。当代人面对婚姻或恋爱中发生的一些不快，总喜欢用这句话来做个总结，抒发自己的感慨。</p><blockquote><p>不受教育的人，因为不识字，上人的当；受教育的人，因为识了字，上印刷品的当。</p></blockquote><p>书中有相当多类似的句子，看起来很有道理，但读起来像句废话，这应该是钱钟书式的智慧和幽默。</p><blockquote><p>旅行是最劳顿，最麻烦，叫人本相必现的时候。经过长期苦旅行而彼此不讨厌的人，才可以结交作朋友。</p></blockquote><p>《围城》我本是打算春节之前就要看完的，奈何因为太忙和惰性，拖到年后才看完，其实有很大一部分原因也在于这本书前半部分看起来相当的乏味，不过我最终还是坚持看完了。这本书中不仅仅有爱情和婚姻，更有友情，后半部分那一路结伴而行的篇章还着实有趣。</p><blockquote><p>天地间有许多景象是要闭了眼才看得见的，譬如梦。</p></blockquote><p>书的结尾，男主人公在失意之中沉睡下去，钱钟书为其安排的六声钟声也相当值得斟酌。我当初看完的时候，是一种莫名其妙就结局了的感觉，这应该与刚开始看这本书感到乏味是相对应的，在后半部分起了兴趣，反而想一路陪着男主人走完一生，突然而来的结局让人感到猝不及防，也多了一些遐想的空间。</p><p>看完《围城》之后，书的附录是杨绛对书中的主要人物一一解读，可见她对丈夫事业的大力支持和付出。至今，我也很难对钱钟书有一个稍微具体点的理解，他不想杨绛一样给人那么亲切的感觉，更容易理解，钱钟书是一个不容易理解的人，最起码对我来说即是如此。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>从很久之前，我每看完一部稍微长点的小说，就会陷入一段时间的失落之中，恨这本书不能写的更长一点，可以让我每天都看一点，永远都看不完，我想追随书中的故事一直延续下去。这大概是因为我对情感这方面太过敏感，太容易用心的缘故吧！</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="书">书<a class="hash-link" href="#书" title="标题的直接链接">​</a></h2><ul><li>《围城》- 钱钟书</li><li>《活着》- 余华</li><li>《我们仨》- 杨绛</li><li>《人间失格》- <!-- -->[日]<!-- --> 太宰治</li><li>《摆渡人》- <!-- -->[英]<!-- --> 克莱儿·麦克福尔</li></ul>]]></content:encoded>
            <category>生活</category>
            <category>阅读</category>
        </item>
        <item>
            <title><![CDATA[国庆游延安]]></title>
            <link>https://wang1212.github.io/Life/tourism/tourism-yanan</link>
            <guid>/Life/tourism/tourism-yanan</guid>
            <pubDate>Sun, 07 Oct 2018 21:55:00 GMT</pubDate>
            <description><![CDATA[原以为国庆将会七天呆在房间里看书玩游戏度过，却未曾想过能去延安这个“革命圣地”看看。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2018-10-13 11:22:00 </em></p></blockquote><u>2018-10-04</u><br><br><p>原以为国庆将会七天呆在房间里看书玩游戏度过，却未曾想过能去延安这个“革命圣地”看看。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="延安">延安<a class="hash-link" href="#延安" title="标题的直接链接">​</a></h2><p>中秋节刚过，从家里来收假只上了一周班又到了国庆长假，计划的是呆在房间好好看看书，趁这个时候刚好把平时自己感兴趣却又没时间做的事情回过头来看看。</p><p>延安，大家称之为“革命圣地”，而我未曾想过要去这片圣地看看曾经轰轰烈烈的革命所留下的历史遗迹。</p><p>从假期第一天起，我就开始了自己看书的旅程，打算让心灵去旅行。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="10-月-4-日">10 月 4 日<a class="hash-link" href="#10-月-4-日" title="标题的直接链接">​</a></h2><p>假期已过半，不知不觉间就到了第四天，这天早晨起床看了会书后，准备玩一玩游戏放松下，这时候收到了一条微信消息。</p><p>哥哥假期前几天一直在公司值班，后面给他放四天假，打算出去玩一玩，问我去不去延安。当时，我还是有点犹豫的，就问了他为什么要去延安，哥哥说远处去不了，只能去近处看看了，听说壶口瀑布不错，想去看看。</p><p>国庆假期之后就只能等春节过年了，国庆假期时间这么长，趁着年轻单身，多去不同地方走走看看也好，于是，我就答应了。我们约定，在晚上他下班后，就坐高铁出发去延安。</p><p>晚上 7 点钟，我们赴约一起坐地铁去北客站，中间出了些小意外，不过时间倒是挺充足也没耽搁什么，8 点半我们坐上了去延安的高铁。</p><p>延安应该要比西安冷一些，我特地穿了一件外套，11 点钟到达延安，下车之后温度还可以，挺舒服。</p><p>延安不愧是“革命圣地”，高铁站也是火车站，比起西安的火车站环境要好得多，尤其是卫生是真的好。</p><p>来延安的第一件事就有点让人猝不及防，住宿成了问题，不过这个时候都快饿死了，还是先吃饭再说。出租车司机将我们带到了大东门夜市，哥哥推荐我吃陕北的特色面食“抿节儿”，感觉还不错，其实我对吃的并不怎么感兴趣。以前听别人说延安的消费水平挺高的，这下真的是感受到了，吃饭比西安消费高好多。</p><p>吃完饭后已经快 12 点了，我们开始找住的地方，刚开始是打算住个便宜点的宾馆就好，然而在我们找了一个小时左右之后，现实告诉我们不应该来延安。这里到处都是那些乱七八糟的小宾馆和招待所，要价出口就是 200 多、300 多，然而房间的卫生环境真是不敢恭维。最后，我们决定还是住一个稍微正式点的宾馆，贵是一方面，但最起码卫生环境还是看的过去的。这个时候，已经半夜 1 点多了，但我们丝毫没有睡意。</p><p>即便是国庆节，延安也没有想象中的人多，不过夜晚 12 点也不会是那种寂静无声的街道，有那么点夜生活的意思。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="10-月-5-日">10 月 5 日<a class="hash-link" href="#10-月-5-日" title="标题的直接链接">​</a></h2><p>早晨醒来的时候 8 点多，晚上 2 点钟才睡的，精神还算不错，今天准备在市区内的各个景点逛逛。洗漱完，磨蹭了一会，先去吃个早饭。又来了大东门的附近，走了一圈实在不知道吃什么，随便吃了个面皮和肉夹馍，这两样没有一样是让我满意的，我一个对吃的没有太多要求的人都觉得不好吃，给了延安第二次差评。</p><p>前段时间看了《平凡的世界》电视剧，里面有个让我印象深刻的地方“宝塔山”，没想到居然是延安市区的标志性景点，这倒让我颇有兴趣。</p><p>宝塔山景点门口售票的地方正在搞活动，据说宝塔山正对面的清凉山也是一个景点，买联票的话有优惠，而正好我俩也喜欢爬爬山。</p><p>宝塔山的门票还是挺贵的，60 块，这是我们花了不到半个小时逛完整个景区，爬完能爬的地方得出的结论，不值。整个山上的风景一般，革命精神的宣传也一般，没什么特色，唯一值得他们骄傲的估计就是那座塔了，结果上塔还要钱，我看了一眼感觉连西安的大雁塔都不如。可能唯一值得称赞的就是夜晚宝塔山的灯光效果了，还是挺漂亮的。</p><p>站在宝塔山上的烽火台等几个较高的地方，专门拍了延安市的全景照片，俯瞰整个延安市，处于两边山坡所形成的中间山谷里，市区是随着山谷的蔓延而发展建设的。回过头来想想，像西安市，北京市等等这些四方四正很对称的城区能被选为古代的都城倒是挺有道理的。不过，各有各的特色啦。</p><p>我偶然间了抬头看了看天空，这里的天空在晴天看起来很蓝很蓝，比起西安市的大气污染要好得多，也许这就是发展的代价吧。</p><p>从宝塔山下来，我们准备再去爬对面的清凉山，然后就吃午饭。说起来延安市四周环山，各种山的名字也很多，到了对面之后并没有看到检票的地方，我们就径直顺着修的台阶上山，走了一大圈后都没有看到清凉山的名字，也没有找到检票的地方，心想着难道被忽悠着买了票。我们整整绕着清凉山走了一圈下来之后，才看见了清凉山的检票口，我们也是佩服自己的。虽然这时候已经中午了，但没有丝毫要吃饭的欲望，既然买了票就要爬一遍。</p><p>不过，清凉山的入口处有一个新华社纪念馆，我们决定先去里面看看。这个纪念馆里面是新华社当初在延安各处的活动记录和旧址展览，挺有意思的，有很多电视剧里面熟悉的人物，这也算是在延安第一次接触了真正的革命历史。</p><p>从纪念馆出来之后就上了清凉山，这个山真的是没有什么特色，10 分钟上下搞定，我怀疑我们都不是来旅游的，完全是在赶时间，算啦就当作爬爬山锻炼锻炼身体了。</p><p>已经到了下午 2 点钟的样子了，我们依然没有要吃饭的欲望，但该吃的午饭还是应该吃的，下午继续逛。不知道为什么，又走到了大东门附近。</p><p>吃完饭后，在河边的凳子上休息了一会，这是工作以来第一次和哥哥一块出来玩，一起坐一块说说话。</p><p>延安市各个革命旧址还是比较近的，为了利于消化和减肥，我们选择了步行两三公里到达下一站，延安革命纪念馆。现代化的建筑融合陕北特有的窑洞风格，再加上革命的纪念意义，这也许是最能代表延安这块圣地的建筑了。纪念馆里面还是很大的，入口处就是一幅巨幕一样的壁画，描述了中共的很多重要元老；二楼还有个书法展，据说是中国书法家协会承办的；三楼有一个观看革命历史 CG 的地方，但单个人门票要 60 元，不得不说延安这个地方商业化气息很重，而且收费也太高了，实际上景区没有任何意思。</p><p>从革命纪念馆出来后，时间也已到了下午 5 点钟，我们继续步行去往下一个地方，杨家岭革命旧址，据说这个是毛泽东、周恩来、刘少奇等人居住过的地方，不过我们要赶在 6 点钟人家关门之前进去看一看。等我们走到门口的时候已经差十几分就 6 点钟了，还好这个时候可以再进去一部分人。杨家岭这个地方其实在很多电视剧中都出现过，而且这里依次都有毛主席旧居、刘少奇旧居、周恩来旧居、朱德旧居，他们的旧居当然也都是窑洞；而且最重要的是，当年的中共七大就是在这里召开的。匆匆的领略了杨家岭革命旧址的文化意义，我们结束了今天的旅程。</p><p>有了昨天的经验教训，今晚我们直接就住了一个正式的宾馆，不愿意再为这个事情费神了，延安给我的印象已经够差了。</p><p>今天晚上休息的挺早的，才八点多，哥哥打开电视挑了一个电视《橙红年代》，听他说是当初他高中时候看过的一个小说改编的，我们连着看了好几集，直到半夜 2 点左右才睡觉。很久没有看过电视了，前段时间看电视还是因为在家看了几集《平凡的世界》，觉得不错，就连着好几天下班休息之前看完了。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="10-月-6-日">10 月 6 日<a class="hash-link" href="#10-月-6-日" title="标题的直接链接">​</a></h2><p>延安市区该去的地方都去了，今天计划去壶口瀑布看看，打算晚上就回西安了。哥哥说来延安不去壶口瀑布看看就太遗憾了，虽然比较远，在宜川县。</p><p>这一次又遭遇了上次去成都的尴尬事，没有提前买票，今天看的时候已经没有回西安的票了，最后哥哥买了到蒲城东的高铁票，看上车后能不能补票，实际上蒲城东下一站就是西安北了，而且车程只有 40 多分钟。</p><p>早上 9 点多买了去壶口瀑布大巴的往返票，去的路上大巴走走停停，一看都是套路，让你吃个饭买个东西啥的。从 9 点多出发，本应该三个小时路程，快下午 1 点钟就应该到了，硬是磨蹭到了下午 2 点钟才到壶口瀑布。</p><p>一路上也了解到壶口瀑布的观景点其实有两个地方，一个就是我们今天要去的地方属于陕西省宜川县，而另一个地方则是山西省临汾，而且据说山西省临汾那个观景点其实更好一些。黄河对面就是山西省了。</p><p>当我们真正看到壶口瀑布的时候，才发现有点坑，并没有想象中的好，甚至不及一半。一个是水流量确实比想象中的小很多，再一个则是感觉并没有宣传中的那么气势磅礴，而且景区的路面真是差的可以。作为一个陕西人，西安美其名曰还是个旅游城市，殊不知这几年都干了些什么，可惜啊。</p><p>壶口瀑布的门票要 100 元，事实上也就是能让你站在一个台子上拍拍照而已，我们沿着停车场走了一圈，领略了一下壶口瀑布的“美景”。转眼间，时间也快到三点半了，返程的大巴也马上要来了。</p><p>坐在返程的大巴车上，我和哥哥总结了下这次延安之旅，总体感觉令人不满意，有太多令人吐槽的地方，真的是不如上次去成都那一次。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>时间很充裕，我们及时赶上了回西安北的最后一趟高铁，在车上也补了票，心上的石头总算是落了地，以后一定要提前计划买票。</p><p>来延安其实只有两天，但感觉经历还是比较丰富的。其实对于我自己来说，能来延安比在延安这两天的经历要有意义的多，因为从小到大的环境影响，让我的性格中有了一些做事优柔寡断的影子，我一直在极力克服这些问题。这次能果断的来到延安，其实也是我自己的一大进步，希望自己以后能在生活中各方面做的更好一些。</p><p>生活，是一场斗争，在斗争中前行！</p>]]></content:encoded>
            <category>生活</category>
            <category>旅游</category>
            <category>延安</category>
        </item>
        <item>
            <title><![CDATA[2018 年工作记录]]></title>
            <link>https://wang1212.github.io/Life/2018-work-record</link>
            <guid>/Life/2018-work-record</guid>
            <pubDate>Wed, 29 Aug 2018 00:14:00 GMT</pubDate>
            <description><![CDATA[从去年毕业到现在，时间过得飞快，今年的毕业生这个时间也已经走上工作岗位了，而我这一年工作上经历的事情要丰富的多了。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2019-02-20 22:27:00 </em></p></blockquote><p>从去年毕业到现在，时间过得飞快，今年的毕业生这个时间也已经走上工作岗位了，而我这一年工作上经历的事情要丰富的多了。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2018-年">2018 年<a class="hash-link" href="#2018-年" title="标题的直接链接">​</a></h2><p>今年，我已经不是个应届毕业生了，对我来说，已经度过了步入社会走上工作岗位短暂的过渡期。同时，今年毕业的同学们应该也已经走上工作岗位了，那么我也算是有一定工作经验的人了。</p><p>在这一年里，熟悉了工作流程的我，尽可能的抓住一切机会，让自己快速的成长，经历更多的事情。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="思考">思考<a class="hash-link" href="#思考" title="标题的直接链接">​</a></h2><p>进入公司也有半年了，已经熟悉了工作流程的我，现在要思考的问题不再是怎样快速熟悉工作流程以及胜任基本的工作任务了，因此我决定把新的目标放在针对自己的领域如何提高自己的工作效率上。</p><p>作为 Web 前端开发新手，我还在手动编码，手动处理代码压缩，图片压缩，CSS 兼容等等这些工作，而且与服务器端的合作开发流程也不太顺畅。由于公司没有可借鉴的经验，所以就自己动手研究，首先将问题分解成了两个：</p><ol><li><strong>建立一套前端工作流，进行工程化实践</strong></li><li><strong>寻找更好的前后端合作开发模式</strong></li></ol><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="建立前端工作流">建立前端工作流<a class="hash-link" href="#建立前端工作流" title="标题的直接链接">​</a></h3><p>首先，则是自己所在领域的开发工作流程问题。Web 前端不像安卓、服务器端开发，它们都有专门的 IDE，提供一整套的开发工具包，而前端开发就相对于零散化了。</p><p>第一，刚开始用的编辑器是 Sublime-Text 3，后来在网上发现了 VS Code，感觉用起来要方便得多，就直接转战 VS Code 了，它确实是前端开发的利器。</p><p>第二，建立一套前端工作流，节省时间，把一些非核心业务编码的工作自动化处理。主流的方案有 Gulp 和 Grunt，在试用并且衡量优劣之后，选择了 Gulp，主要原因是因为配置比较简单，利于上手。</p><p>在使用了 Gulp 两个月左右之后，发现由于 JavaScript 没有类和模块的概念（ES5 没有，ES6/7/8 新特性浏览器不一定支持），代码量变大之后，JS 代码和模块难以手动维护。于是，准备采用主流的 Webpack 模块化方案。然而，网上的大多数教程还停留在 2、3 版本，这时候官网的 Webpack 版本已经到 4.5 了，最重要的是 4 之后的版本调整的特别大，与之前的 2、3 不兼容。所以，花了两周左右的时间，研究了下官方的 Webpack 英文文档和 GitHub 的版本更新文档以及 Demo，基本上配合 Gulp 搭建了一套完整的前端工作流。</p><p>利用 Gulp 工作流来处理 Sass 文件合并、压缩和图片压缩等工作，最后将 Webpack 插入到 Gulp 工作流中来完成 JavaScript 代码模块化管理工作，前端的开发流程简化了，工作效率也大大提升了。</p><p>后来，也在开发过程中不断的调整优化 Gulp 和 Webpack 的配置，尽可能的将能自动化完成的工作都交给它们来负责，减轻自己的手动工作量。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="前后端分离开发部署">前后端分离开发/部署<a class="hash-link" href="#前后端分离开发部署" title="标题的直接链接">​</a></h3><p>其次，则是前后端合作开发的模式。在实际工作中，前后端都有不同的开发人员负责，初期进行并行开发。到后期，前端需要随时与服务器端进行接口数据对接，并进行调试。</p><p>传统的模式中，一个 Web 项目中前后端代码都在一块，要么服务器端开发人员拿着前端代码去调试，要么前端开发人员拿着服务器端代码去调试，由于对彼此的领域不熟悉，这个过程中会出现很多麻烦的事情，而且效率低下。</p><p>于是，参考现在主流的模式，进行前后端开发/部署完全分离的尝试，这个工作由我来做，过程还算顺利。主流的解决方案就是利用 nginx 来做一个反向代理，将前端静态资源均放在 nginx 前端服务器上，而服务器端代码则放在 tomcat 容器中。nginx 使用起来门槛也比较低，大多数东西都在配置文件中，不过这个过程中还是费了一些心思的。</p><p>因此，后期进行 Web 项目开发的时候，前端开发人员只需在自己的电脑上开一个 nginx 服务器，随时根据需求更改配置文件中的代理 IP 地址，这样前后端开发人员配合调试起来也方便、高效。</p><p>同时，将 Web 项目进行前后端分离部署，使用 nginx 也为后期做负载均衡提供了解决方案。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="项目总结">项目总结<a class="hash-link" href="#项目总结" title="标题的直接链接">​</a></h2><p>因为基本技术能力尚可与公司项目多的双重因素，手上负责了两个项目，第一次经历整个项目的所有过程，困难多，收获也多。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="保护区巡护系统">保护区巡护系统<a class="hash-link" href="#保护区巡护系统" title="标题的直接链接">​</a></h3><p>其实，这个项目的 1.0 版是公司刚成立时，一个负责服务器端开发的同事做的。两年过去了，公司现在准备做个 2.0 版，界面与功能都需要更完善一些，依然是由当初那个开发 1.0 版的同事来做，我刚来公司参与的其实就是他做的 2.0 版的项目。由于那个同事比较忙，时间仓促，以及公司现在服务器端、安卓、前端开发都有专门的人来负责工作了，于是又准备将 2.0 版作为一个正式项目按流程来做一遍，做的更好一些。</p><ul><li><p>任务</p><p>项目开发负责人，主要工作包括需求分析、系统设计、前端开发工作、开发工作进度把控、人员协调、与客户进行商谈等等。</p></li><li><p>过程</p><p>这个项目历时 4 个月左右（3 月初至 7 月初）。3 月初接到了项目负责人的任务，花了 2 - 3 周的时间去做需求分析、系统设计，做完这些基本就是开发计划了，大概 2 个月的开发编码时间，留了 2 周的测试时间。最终，在七月初，项目基本所有流程都完成了，还算顺利。</p><p>除过项目负责人的角色，前端开发的工作也是我做的，当然这也是我的本职工作。这是个新项目，所以我抓住机会使用了 React.js 框架，这个过程中最后也应用了 redux 方案解决应用的状态管理问题。</p></li><li><p>收获</p><p>第一次参与一个项目的所有流程的工作，并且由自己来做，收获很多；同时，也首次应用了 React.js 来做项目，自己的专业技术上也收获颇丰。</p><ul><li>了解到一个软件项目的所有流程和工作内容</li><li>学会更好的写文档，规范做事流程</li><li>学会应用 React.js 框架，并应用 Redux 方案解决状态管理问题</li></ul></li></ul><p>事实上，这个项目可供参考的东西有很多，难度相对较低，也刚好适合我这种工作经验较少的人。</p><p>刚开始做需求分析、系统设计这些工作时，我主要是参考 1.0 版的系统以及已做了部分工作的 2.0 版系统，我从网上查了也一部分的资料来了解目标客户及其他们的需求痛点。当然这些工作的成果则是撰写的需求分析文档、概要设计文档、详细设计文档，当初在写这些文档的时候，其实我觉得大部分东西都很啰嗦，但后来再看的时候随便啰嗦，但能规范我们的工作和流程。这些文档里面涉及的东西非常多，很多东西和概念都是第一次接触，了解到原来一个简单的项目不仅仅是设计好、开发完成就好，这里面涉及到甲方、乙方、销售、开发等等多方利益和人员工作的协调问题。</p><p>作为一名开发人员，最熟悉而且最乐意的当然还是编码了。利用我半年多的工作经验和结合自身与项目组成员的技术能力，定的开发周期是 2 个多月，给测试预留了 2 周的时间。我负责了前端的开发工作，当然我还多了一份工作，就是接口文档的撰写。根据业务需求将前后端的数据格式和接口文档提前定好，这样开发工作才能开始，后期也会少一些麻烦。因为时间比较紧张，我采取的是先写简单、核心且容易实现的业务的文档，这样边写文档边开发，不需要等到整个系统的接口文档都写完才开始开发工作，项目能顺利进行也节省了时间。</p><p>这个项目整体上分为 Web 端、安卓端、服务器端三大部分，主要的业务集中在 Web 端和服务器端。最终，测试过程中还是出了不少 BUG 的，其中有一部分是系统设计上的逻辑漏洞，这些都是很珍贵的经验。</p><p>其次，作为一名前端开发，掌握一个主流的框架其实是非常必要的，在 Vue.js 和 React.js 中，我选择了后者。由于之前了解的东西比较多，而且对 React 的实现原理有部分了解，学习起来难度倒也不大，应用起来也感觉得心应手，比之前任何东西手动编码要轻松、效率高得多。我相信任何一个应用 React 的开发者都会遇到一个棘手的问题，那就是应用的状态管理，由于 React 数据单向流动的机制，在实现某些业务时，组件多层级嵌套会让人很头疼。于是，我接触到了 Redux，并在项目中应用了该方案，确实解决了一个大问题。</p><p>然而，最让我感到惊叹的是后来为了解决异步更新状态的问题，我应用了 redux-thunk 的方案，而它的源码只有 10 行左右，但它确实解决了一个大问题。这个过程中，我又了解到了<strong>中间件</strong>的概念，并从 redux 的官方文档 Demo 中仔细了解了中间件这个东西。所以，我觉得思想比我们会写代码要重要得多。</p><p>总之，第一次负责一个项目，能按预期顺利完成还是挺高兴的，这离不开团队的努力。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="预算系统">预算系统<a class="hash-link" href="#预算系统" title="标题的直接链接">​</a></h3><p>这个项目属于公司的一个战略性项目，与公司之前的业务不同，是一次新的尝试，也由我来负责。</p><ul><li><p>任务</p><p>项目开发负责人，主要工作包括需求分析、系统设计、前端开发工作、开发工作进度把控、人员协调、与客户进行商谈等等。</p></li><li><p>过程</p><p>这个项目由于客户提供的资料不全，一直是断断续续的在做，不是很顺利。项目本身的业务不多，但是由于业务的特殊性、专业性，客户提供的资料总是不全面，公司第一次尝试这种类型项目等等多重因素，导致项目处于断断续续的开发状态中，战线拉的比较长。</p><p>但是，作为前端开发这部分的工作倒是因为需求频繁变动带来的思考收获却是很多的。</p></li><li><p>收获</p><p>项目进展不顺利，第一次感到受挫，需求频繁变动导致的工作量激增，这些都成了宝贵的教训经验。</p><ul><li>理解需求分析的重要性</li><li>明白及时可客户沟通的重要性</li><li>开发上面对需求频繁变动的应对措施</li></ul></li></ul><p>首先，这是一个林业系统的预算项目，与公司之前所做的 GIS 业务相差甚远。其次，刚开始时间比较仓促，需求分析没有做到位，导致后期客户的需求频繁变动，加大了工作量。</p><p>由于业务的特性性，前端开发的工作量很大。前端需要在页面上做一些类似 Excel 表格的操作，包括展示表格数据、联表计算、增加表格行列、调整列宽行高等等，尤其是因为表格的表头都是合并单元格组成的，难度才大大增加。业内没有特别好的解决方案，在线 Office 解决方案又功能太强，而且费用高昂，只能自己尝试解决。</p><p>刚开始表格的单元格数据都是自己手动来写的，光这部分的工作量就特别大；在页面上单元格的位置则采用绝对定位来做，发现加了动画之后，单元格在上百个数量级时渲染效率变低了，取消了动画后渲染效率明显提高。而且，刚开始做的更新和计算操作都是基于 DOM 元素的，因而渲染效率低是可想而知的。</p><p>后来，需求发生了几次变动，每次需求变动，表格单元格数据又得重新手动编辑，于是优化了数据格式，并抽象了方法来自动填充空白单元格，这之后的这部分工作量明显大幅下降。最重要的是，这一次引入 React.js 框架来渲染 Excel 表格，所有的更新数据操作都是在内存中完成，然后由 React 一次渲染到 DOM 中，加上 React 的虚拟 DOM 技术渲染效率大幅提升。</p><p>还有一个收获就是，第一次使用 React 的时候，应用状态管理采用了 Redux 方案，当时的 Action、Reducer 采用了官方 Demo 中典型的分离结构，发现项目代码量变大之后，这种分离的结构需要频繁的切换文件来编码，严重影响开发效率。所以，这一次参考了更多的资料，优化了 Action、Reducer 的结构，将其放在同一个文件中，更易查找。当然，还有更优的方案，后面在做项目过程中会不断的优化，来提高开发效率。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="淮安市智能路灯管理平台">淮安市智能路灯管理平台<a class="hash-link" href="#淮安市智能路灯管理平台" title="标题的直接链接">​</a></h3><p>在接近年终的时候，10 月份左右接手了这个项目，我只负责前端的开发任务和部分技术文档的撰写。</p><ul><li><p>任务</p><p>前端开发人员，负责前端开发任务的完成，以及撰写部分技术文档。</p></li><li><p>过程</p><p>在这个项目上，从开发开始到结束，我都尽可能尝试了新的东西，包括数据可视化库，CSS 框架和新的 React 组件库。同时，也遇到了之前 GIS 业务上没有遇到过的问题，地图属性查询、空间查询、编辑等操作，为了解决这些问题，还是耗费了一些精力。</p></li><li><p>收获</p><p>从这个项目开始，我都尽可能的去尝试了新东西，前端新技术的迭代很快，能在业务中实践新的技术，对比分析优势和缺点，是非常难得的机会。</p></li></ul><p>事实上，和这个项目放在一块的还有其它好几个小项目，就拿这个比较典型的总结一下。这些小项目为我提供了很多试错的机会，而且在下半年的工作计划当中，我的重心切换到了更新和扩宽自己的技术栈，恰好接手了这些小项目，而且做下来感觉不错，收获确实也很大。</p><p>第一个首先是尝试了新的设计风格的 CSS 框架，集中尝试了谷歌 Material Design 风格的框架，最后筛选了比较优秀的而且维护更新比较频繁的 Materialize.css，以及谷歌官方的 Material Design Lite。其次，也将之前使用的基于 Bootstrap 的 React 组件库 Reactstrap 替换成了遵循 Material Design 风格的 Material UI，这个过程中也学习了 CSS-In-JSS 相关的东西。最后呢，主要是更新了前端的工作流工具，将 Webpack 相关的工具都更新到最新，而且剔除了 Gulp 相关工具，由之前的 Gulp + Webpack 演进到现在的只用 Webpack 完成所有工作。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="遗憾">遗憾<a class="hash-link" href="#遗憾" title="标题的直接链接">​</a></h2><p>回头去看 2018 年的工作情况，上半年还算充实，负责了一个项目，学习了解了项目管理上的很多东西，同时在建立前端自动化工作流和工程化实践方面做了很多工作；下半年基本上把精力都耗费在了继续完善前端工作流和工程化实践上面，在最后的阶段也尝试了很多新的工具和技术框架。</p><p>但是，现在细细想来，虽然收获挺多，但是遗憾也比较多。首先，没有机会尝试移动端的 Web 开发，自从年中就一直想在这方面进行尝试，但到目前为止没有实际项目机会去做，而且也在这方面花的时间和精力比较少；其次，一直想在 React 服务器端渲染（SSR）和 Node 这方面进行学习，扩展自己的服务器端技术栈，但苦于时间精力有限，而且也没有合适的业务场景供自己去试错。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>这一年是我自毕业工作以来，第一个完整的工作年，经历了很多事情，很多困难，目前为止也都逐一解决了，感到自己成长的也很快，很感谢公司给了这样的平台和机会，也很庆幸自己能抓住这些机会。生活还在继续，工作也进入了新的阶段，新的一年要更好的利用闲余时间，不断的提升自己的技术能力和分析问题的能力。</p>]]></content:encoded>
            <category>生活</category>
            <category>工作</category>
            <category>记录</category>
        </item>
        <item>
            <title><![CDATA[IDE：VS Code 配置同步]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Tools/tools-vscode-sync</link>
            <guid>/Computer-Technology/Tools/tools-vscode-sync</guid>
            <pubDate>Wed, 15 Aug 2018 16:42:00 GMT</pubDate>
            <description><![CDATA[利用一款插件来同步 VS Code 的配置到 GitHub 的 gist 上，实现多个设备间共享一套配置。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2018-08-15 16:42:00 </em></p></blockquote><p>利用一款插件来同步 VS Code 的配置到 GitHub 的 gist 上，实现多个设备间共享一套配置。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="vs-code">VS Code<a class="hash-link" href="#vs-code" title="标题的直接链接">​</a></h2><p>Visual Studio Code 是由微软出品的一款轻量级编辑器，兼有部分 IDE 功能。在之前，Sublime Text 是最受欢迎的编辑器（开源），也为多数前端开发者所推崇，当然说到底它依然是个编辑器。随着时间的推移，GitHub 打造了自家的编辑器 Atom，微软的 VS Code 也横空出世，更有其它优秀的轻量级编辑器在市场上展开角逐。不过，到现在来看，VS Code 可能胜出了，已成为前端开发的利器。</p><p>前端开发的工作流向来是个令人头疼的问题，虽然说现在利用 gulp、grunt、webpack 可以解决大部分问题，但要换台电脑重新配置一遍那真的是令人不敢想象的事情。而且，开发过程中大量依赖了 VS Code 插件提高了开发效率，但要换台电脑重新配置一遍编辑器，装一遍插件那也是相当头疼，时间都浪费在了重复性工作上。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="setting-sync">Setting Sync<a class="hash-link" href="#setting-sync" title="标题的直接链接">​</a></h2><p>Setting Sync 插件恰好就是为了解决多个设备间编辑器和插件配置同步难题的。</p><blockquote><p><strong>Setting Sync</strong> : <a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener noreferrer"></a><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener noreferrer">https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync</a></p></blockquote><p>这个插件大概的原理就是将本地的 VS Code 的配置文件和插件配置同步到 GitHub 的 Gist 服务器上，然后在另一台设备上可以通过 Gist ID 和 Token ID 下载配置，即实现了多个设备间配置共享。</p><p>插件的使用步骤在它的说明页面很详细，大概就是以下几步：</p><ul><li><strong>在 GitHub 上新建一个 Personal access tokens，保存 token id</strong></li><li><strong>在 VS Code 中安装 Setting Sync 插件，然后输入 token id，上传配置信息，得到 gist id</strong></li><li><strong>在另一台设备上的 VS Code 中安装 Setting Sync 插件，然后输入 token id 和 gist id 即可同步配置</strong></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>工具</category>
            <category>IDE</category>
            <category>编辑器</category>
            <category>VS Code</category>
            <category>配置同步</category>
        </item>
        <item>
            <title><![CDATA[再见，少年]]></title>
            <link>https://wang1212.github.io/2018/8/12/Life/reading/reading-</link>
            <guid>/2018/8/12/Life/reading/reading-</guid>
            <pubDate>Sun, 12 Aug 2018 10:33:00 GMT</pubDate>
            <description><![CDATA[这些同学少年，是闺蜜也是情敌，是知己也是对手，他们热闹着寂寞，在骄傲中孤独，他们的成长多舛，他们的叛逆如此热烈又如此单纯。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2018-08-16 08:20:00 </em></p></blockquote><p>这些同学少年，是闺蜜也是情敌，是知己也是对手，他们热闹着寂寞，在骄傲中孤独，他们的成长多舛，他们的叛逆如此热烈又如此单纯。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="少年">少年<a class="hash-link" href="#少年" title="标题的直接链接">​</a></h2><p>少年是如何定义的，我特地在网上查了一下。</p><blockquote><p>少年是指十一岁左右至十七八岁这一时期的孩子，从少年期开始，是一个人的个性形成的关键时期，也是促进儿童“文明化，成为社会的个体”的时期。少年期是从童年期向青年期发展的过渡时期，是儿童心理发展的一个重要的转变期。其主要特征是，半幼稚和半成熟、独立性和依赖性、冲动性和自觉性等交错发展着，因而在生理和心理社会化方面都有巨大的变化。</p></blockquote><p>十一岁至十七八岁，恰好与书中的主人公们的年龄相吻合。我记得自己十三四岁的时候正在念初中，恰好也与书中的他们经历着相似的经历。没有期望过书中的他们的故事是真实的，但我自己的故事却是真实的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="漫长的念旧">漫长的念旧<a class="hash-link" href="#漫长的念旧" title="标题的直接链接">​</a></h2><p>这是一本长篇小说，与其说是小说，我更愿意称之为回忆记实录，无论这些故事是否真实。</p><p>在读到这本书的时候，我于去年大学毕业，刚好工作满一年。然而，我想作者在写书的时候大概已经步入婚姻的殿堂了，人生的轨迹比我要长一些。</p><p>开篇便是漫长的念旧，诉说了少年时的种种。只给大家带了 1 学期的班主任，给他们的人生留下了浓墨重彩的一笔，影响了他们许多人的人生轨迹；除此之外，还有班级里那些可爱的小伙伴。自然的，这位特殊的“班主任”便成了整本回忆录的主要线索，推动着剧情的发展。</p><p>对于我或者大多数人来说，人生第一个 20 年基本上都和学校、老师、同学联系紧密。</p><p>我的初中生活也有一位让我印象深刻的班主任，当然也有发生过几件事而让我印象深刻的代课老师。</p><p>我当时初一和初三的班主任是同一个人，她是我们的英语老师。那时候的我成绩还算不错，有幸成为了班长，因此我也肩负起了班长的责任。我作为班长，可能与很多人当班长的做法不太一样，我不太会偏向学生，可能大多数时候表现的都比较严肃，不太给同学们留面子，但原因很简单：为了大家好。庆幸的是，后来我与大多数同学的关系还算不错。</p><p>有时候，恪尽职守，尽心尽力的去做事情，可能不会得到大家的理解，但做事的态度是自己的选择。初二的时候，因为分班的原因，没有分到初一班主任所在的班；过了一年，初三的时候又与初一的班主任和小伙伴们重逢了，这是一种缘分。</p><p>初三，班长是我，副班长则是班主任他们初二时候的班长。记得有一次班主任当着大家的面随口说了一句：对于你们来说，他（副班长）是好班长，而对于我来说，他（指我）是好班长。这句话没有什么特别的意思，但是对我作为班长的工作的一种肯定，同样地这并不意味着是对副班长的否定。在不同人的眼里，我与副班长所做的事情的侧重点不一样，也就产生了不同结论，但无论如何我们都和同学们相处的很好。</p><p>说完班主任，其实还有几位代课老师因为某几件事让我也印象深刻，他们都是我初二的时候遇到的。</p><p>我的语文老师，当时她让我们把自己写的好的作文收集起来，然后让我负责手打成电子版。这个过程中为了尽可能少的出现错别字，可真是费劲了，那时候输入法还没有云联想功能。虽然，后来她把我们的作文投稿后，没有什么音讯，但我依然感谢我的语文老师。生活和成长在一个小镇子上的我们，从没有奢望过作文会被刊登或者获奖，但也从没有尝试过。后来想想，我的语文老师真的很勇敢，她最起码敢于尝试，而我们却不敢迈出第一步。</p><p>我的数学老师，他做到了一视同仁地对待我们每一个人。无论谁学习好谁学习差，表现好就表扬，表现不好就批评。记得有一次我没有完成所布置的作业，他毫不犹豫的将我和其它那些学习差也没有完成作业的同学一起赶了出去。实际上，当时我觉得自己学习好可以幸免于难，然而这个结果让我有点惊讶。现在想想，这一次的经历对我的影响颇大，让我以后做事的原则也秉承了他的风格。</p><p>喔，对了，我初一时候的数学老师也很有趣。流传中，他是学过美术的，当然后来他确实同时代了我们的美术课。那节美术课，是我们第一次接触到了素描，也真正见识到了他作为一个数学老师却拥有非常厉害的素描功底。数学课上，他有自己的教学风格，他通常都会让我们自学，鼓励我们互相帮助，让学习好的去帮助学习差的，每一节数学课氛围都相当的轻松。期末的时候，我们班的数学成绩进步特别大，我想这是对我们自己以及他最大的回报。</p><p>有那么一段时间，也就是我上高中和大学的这七年时间，初中同学之间的联系慢慢都变少了。我们这群人中，有继续上学的，有出走打工的，有当兵的，也有到现在我也不知道在干什么的。总之，这是人生中第一次我们那么多人分道扬镳。</p><p>现在，相比起其他人来说，我作为班长其实能联系到的同学还算多，虽然关系没有以前那么好了，但偶尔也能闲聊几句，不至于相忘于陌路。值得高兴的是，那时候我们前后桌的四个人现在关系还不错，偶尔一起吃吃饭，看看电影，也能互相玩的来。</p><p><strong>后来，我们不算失散。只是，我们再也没有在心底真正的重逢。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="重逢">重逢<a class="hash-link" href="#重逢" title="标题的直接链接">​</a></h2><p>在漫长的念旧之后便是诡异的重逢，年少的他们不知何来的勇气只身去了一个陌生的城市找寻他们的班主任，经历了一系列挫折之后，却莫名其妙的遇到了他们多年不见的班主任。班主任依然如当年，带他们几个去了很多好玩的地方，同时也给他们上了最后一堂生动的人生一课。</p><p>同学聚会是每个人人生中必经的事情，也是很多人津津乐道的一项活动。相比起大学同学和高中同学，初中同学在我们的记忆里更久远一些。因此，初中同学聚会显得尤为迫切。</p><p>记得第一次初中同学聚会是我还在上高中的时候，那时候大家基本都还在学校读书，话题也都能聊到一块去，AA 制也显得理所当然。我们和班主任吃了饭，还去 KTV 唱了歌，那时候的我还是不太喜欢说话，即便是客套话。整个聚会过程大家还都算高兴，而且最重要的是来的人还是比较齐的，这可能是以后再也不会有的事了。</p><p>这一次重逢其实离大家初中毕业离别的日子还不是很久，所以每个人并没有太多的感情触动，只是不知道下一次重逢是什么时候了。</p><p>现在已经过去了有五六年了吧，没有等来大家第二次的重逢。作为班长的我，其实应该负有一定的责任，说我失职我也接受。其实，更多的是我想得太多，现在的我们每做一件事情考虑的总是太多，大家会不会愿意来，AA 制可能不再显得那么理所当然，大家坐在一起会不会还有共同话题。</p><p>人一旦长大，难免会跌入俗世的束缚之中，我也是，我想曾经的小伙伴们应该也是。但是回过头来，有些事情其实说做也就做了，顺其自然也是一种选择，即便是被俗世束缚的我们，心中那点情谊应该还是有留存的。</p><p><strong>人一辈子最珍贵的品质其实就两样：一个是热血，一个是天真。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="标志性人物">标志性人物<a class="hash-link" href="#标志性人物" title="标题的直接链接">​</a></h2><p>念旧回忆之后，经历了重逢，但最重要的细节性记忆让一切都能显得更加真实。</p><p>无论是初中、高中还是大学，班里难免会有一些“标志性人物”，何为标志性人物，就是那些因为某方面的特点特别突出而给大家留有深刻印象的小伙伴。说到这里，我相信很多人脑海里已经不自觉的浮现出了一些人的面孔。</p><p>文中作者的笔下，有家境贫寒、长相一般的女孩，后来通过努力赢得了所有人的尊重和幸福，或者说羡慕；有家境好、任性、高调的女闺蜜，她的一言一行影响着自己的思绪；有父母离异、性格孤僻的男孩，后来成为一名流浪各地的唱作者，他也成为自己一名好朋友；有成绩、长相平平，却思想成熟、热爱读书与思考的男孩，他也成为了自己一名好朋友；有成绩一般、却热心肠，不懂得拒绝的男孩，在一次选举中意外成为了大家的班长...</p><p>这些标志性人物共有的特点就是曾经坐在同一个教室里上课，一起打闹。</p><p>同样地，让这些事情显得不太真实，更像小说的是作者对这些标志性人物的经历描述的太过细致。事实上，这是个很难的取舍选择。</p><p>比起书中所写，我对当时班里那些标志性人物的记忆大多已经模糊了，我也未曾了解到他们大多数人的近况。</p><p>另外地，作者笔下的自己比起班级里那些小伙伴要显得普通得多，又或许作者其实就是自己笔下那些标志性人物中的一个。我想，这也是后来的我们，每个人都能领悟到的人生至理：一个人成熟的开始，是承认自己的平庸，并愿意开始改变。</p><p><strong>遗忘，才是人生的常态。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>很遗憾，我不是一个善于记录的人，当然我的记性也不出众，生活中大多美好的时光转瞬即逝，待回忆的时候却已经模糊了。</p><p>自去年就一直说着要去看看班主任，我想今年是时候付诸于行动了。</p><p><strong>等时光抽打掉所有的妄想，留下的只有真实到让人惶恐的钢筋铁骨的荒芜，起初的梦，不管有多瑰丽或多虚幻，就都已经无所谓了。或说，经历过各种生活经验的折磨，才有可能发现生命的真谛，那就是，比得奖，出书和认清“他们”更重要的是，一个人一辈子要适时地发现“我”这个东西的存在。一个怯懦的或昏惑的人生，是没有“我”的。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="书">书<a class="hash-link" href="#书" title="标题的直接链接">​</a></h2><ul><li>《再见，少年》 - 秋微</li></ul>]]></content:encoded>
            <category>生活</category>
            <category>阅读</category>
        </item>
        <item>
            <title><![CDATA[四日游成都]]></title>
            <link>https://wang1212.github.io/Life/tourism/tourism-chengdu</link>
            <guid>/Life/tourism/tourism-chengdu</guid>
            <pubDate>Wed, 08 Aug 2018 22:55:00 GMT</pubDate>
            <description><![CDATA[旅行的意义不是能遇见多少人，看到多美丽的风景，或是经历怎样的奇遇，而是走着走着，在一个际遇下，突然重新认识了自己。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2018-08-08 22:55:00 </em></p></blockquote><u>2018-08-03</u><br><br><p>旅行的意义不是能遇见多少人，看到多美丽的风景，或是经历怎样的奇遇，而是走着走着，在一个际遇下，突然重新认识了自己。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="成都">成都<a class="hash-link" href="#成都" title="标题的直接链接">​</a></h2><p>一首《成都》让成都这个城市上了热搜，许多人慕名而来；同样地，抖音上的强势推广，也让西安这座古城成了“网红城市”。</p><p>仔细的想一想，《成都》这首歌并不是我想去成都的原因，其实没怎么听过这首歌；当然，西安也没有因为成为“网红城市”而让我更想留下来。</p><p>想去成都看一看的念想，不知什么时候就有了，不过现在它已经实现了。</p><p>长这么大，成都是第一次远游，第一次旅行。</p><p>每天上班往来于地铁站，墙上有一句广告词让我印象深刻：<strong>旅行的意义不是能遇见多少人，看到多美丽的风景，或是经历怎样的奇遇，而是走着走着，在一个际遇下，突然重新认识了自己。</strong></p><p>成都对我来说可能没有什么特别的意义，但是第一次旅行却不一样。当然，成都也有它自己的风格，让人向往的“慢生活”便是成都最重要的标签。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="8-月-3-日">8 月 3 日<a class="hash-link" href="#8-月-3-日" title="标题的直接链接">​</a></h2><p>准确的来说，我们在成都停留了 5 天。</p><p>花了一周的时间为去成都做足了准备，提前请了假，工作上却难免有不测风云，但都被我推掉了，有时候想想是应该勇敢一点，即便是预想着未来可能面临更紧张的工作时间。</p><p>原本的计划是 3 天，后来觉得时间太短，就任性的为自己多加了 1 天。为了尽可能的在成都多待一会，我们选择了周 5 的晚上出发。</p><p>奈何工作之后时间总是不够用，为了下班前早退时能让自己安心一点，一大早就认真的为自己安排了一份可以在下班之前完成的工作。待下午完美的完成了这份工作交差之后，小心翼翼的问了人事可不可以提前 1 个小时走，被告知可以的时候真是高兴。原谅耿直的我，总是把在很多人看起来很平常的事搞得很有“仪式感”，难免让自己略显尴尬。</p><p>同时，另一位朋友因为没有赶上来西安的火车，而增加了一丝紧张感，实际上时间还够用，这时候的我还坐在办公室。</p><p>4 个人凑齐上了车，快要发车的时候有一位朋友却发现手机丢了，打过去之后那位捡到手机的大叔答应我们把手机邮到成都，世界上还是善良的人多。</p><p>这样有些许意外和紧张的气氛，让第一次旅行显得更加真实。</p><p>动车从西安出发的时候不到 7 点，到达成都的时候是晚上 11 点，因此我们在成都多停留了 1 天，4 个小时的车程并没有太多疲惫和沉默。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="8-月-4-日">8 月 4 日<a class="hash-link" href="#8-月-4-日" title="标题的直接链接">​</a></h2><p>早上醒来之后，又发生了一些在意料之中的麻烦事。因为担心酒店的环境问题，所以就只订了一天的酒店，来了之后发现还算不错，可惜后悔睡觉之前没有续订房间，等到早晨醒来之后房价已经涨到了令人不可接受的价格。仔细权衡之后，决定委屈自己，另外订更便宜的大床房（之前是双床房），把行李从房间拉出来办了暂存手续才开始成都第一天的行程。</p><p>旅行的第一天一般来说精力最充沛，安排的行程最满，我们也不例外。今天的目的地基本都在市中心，我们所住的酒店恰好也不远，所以选择以散步的方式去第一站人民公园。可想而知，散步这种方式在女性朋友的眼里只能称之为“走路”，她们很直白地表达了不满。</p><p>成都的天气并没有想象中的那么潮湿，比西安最近的天气要略显舒服一些，当然也很热。路过了省图书馆和艺术馆，极具现代化的建筑风格，让我对成都有了些许好感。</p><p>在人民公园拍照打卡之后，已经快到中午了，我们继续以散步的方式去了“宽窄巷子”。两条平行的巷子，以宽窄命名，我到现在也没有搞懂它的含义。印象最深刻的是这里卖着各种各样的小吃，我们花了双倍的价格吃了份量不到平时一半的午饭。安慰自己的理由很简单，这里是景区，认了。对了，冰粉好吃吗？</p><p>下一站，天府广场。这时候下起了雨，让我们猝不及防，第一天就见识了成都在大白天大太阳的情况下依然可以暴雨倾盆。在发现天府广场原来就是我们早晨经过的地方，并没有什么特别之处的情况下，只好在附近的麦当劳驻留了一会，喝了杯果汁，等待着雨停。对了，这是我第一次进麦当劳快餐店消费。</p><p>果然不一会儿，雨停了，太阳已经升的老高了，下一站“太古里”如果再以散步的方式过去，两位女性朋友就准备回酒店吹空调了。我们毫不犹豫的打了车过去，原来成都的网红街区“太古里”比想象的人要多，最起码堵了好久的车才到。</p><p>“太古里”极具现代化的建筑风格以及诺大的占地面积，加上那么大的人流量，实在让人感到西安的不争气，瞬间就感到了西安的差距，也许小寨这种没什么特点的地方足以概括西安。</p><p>第二天我才知道，原来太古里就在春熙路，在得知已经去过春熙路的时候，对美女没什么特别爱好的我也没有太多的遗憾。</p><p>要吃甜点的朋友因为没有座位只好在店外面享受美味了，不过有意思的是这个过程中发现了我的手机拍照美颜的效果还不错，自从知道这个事情之后，我所拍的照片也入了两位女性朋友的法眼。</p><p>时间很快到了下午，我们决定去吃比较有名的串串“小郡肝”。</p><p>起初，想着打电话预订然后再过去，没想到人家根本不接电话，等我们赶过去的时候，门口坐满了排队的人。炎热的天气，饿着的肚子，加上年轻的我们，显然没有太多的耐心，毅然把它安排在了明天晚上，开始寻找今晚的餐厅。</p><p>我们迅速的锁定了附近一家火锅店，排了不一会队就到我们了。来成都第一次正式的吃饭，享用了四川的标签食物“火锅”，不是很好吃也不是很难吃，但要便宜得多，这可能是我们对这顿火锅最深刻的印象了吧。</p><p>吃完火锅已经晚上 10 点多了，我们不约而同的决定先散散步。</p><p>走在成都的街上，并没有什么特别的感触。街道上没有太多的人，我们在宽阔的马路上慢悠悠的散着步，也许这就是成都的“慢生活”，行人都不慌不忙。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="8-月-5-日">8 月 5 日<a class="hash-link" href="#8-月-5-日" title="标题的直接链接">​</a></h2><p>时间总是在充实的生活中显得弥足珍贵，第二天我们决定一开始就坐车，当然今天的目的地确实也比较远。我们选择了坐公交，事实上公交确实要方便得多。</p><p>为了下午早点去吃“小郡肝”串串，我们特地调整了行程。</p><p>早晨，我们先去了锦里。一个类似古镇的景区，挺大的，我们走了好久才转完，也拍了很多照片。</p><p>我建议两位女性朋友拍一个抖音视频，当然我的建议很快就被采纳，后来她们觉得昨天应该也拍一个，去了那么多地方没有打卡有些许遗憾。我的推荐是第一次看抖音被吸引的作品，一家三口伴随着《下个路口见》跳舞的视频。</p><p>锦里耗了我们一上午的时间，中午的时候暴雨又侵袭了成都，这一次我们已经见怪不怪了。为了躲雨，去了一家有各种表演和书法拍卖的店里吃饭，拿到菜单的时候感觉这里的饭是真的贵，后来吃了之后确实也觉得饭不咋样。</p><p>庆幸的是，吃饭过程中的脸谱变脸表演很精彩，后来的说书也让人回味无穷。窗外的雨丝毫不见得要停，店里坐满了吃饭的游客，能在这种氛围中安静的听书真是难得。不由得又让人想到了成都的标签“慢生活”。同时，不知为什么，这时候我竟然想起了一句诗，“海棠不惜胭脂色，独立蒙蒙细雨中”。</p><p>“宽窄巷子”就像被历史遗忘了一样，沦为了单纯卖小吃的地方；锦里则应该可以让来成都的外地人感受到成都那种原始的生活氛围了。</p><p>简单吃了午饭之后，我们就折返赶去了下一个目的地——东郊记忆。</p><p>这应该是一个被废弃的地方，现在成了一个景区，随处可见的废弃物，有一种遗失的历史感。</p><p>这个地方也是蛮大的，我们足足走了有两个小时左右吧。中途遇到了一个做活动的现场，我们用微博分享换来了蓝色背景墙加气球和道具拍照的机会，外加两杯现场制作的果汁。两位女性朋友拍了美美的照片，得到两杯蓝色果汁后高兴的喝了起来。</p><p>事实证明，生活总是会有太多意外。所谓现场制作的果汁不过是加了色素的饮料，待我发现一位女性朋友张嘴之后，牙齿和舌头全都变成蓝色的时候，她竟然还是坚持喝完了。</p><p>今天为了吃到这家串串，我们在打电话依然没有人接的时候，早早的五点左右就赶到了店里，空桌子还很多，我们坐到了靠近马路的窗口。</p><p>可能是因为吃的太早的原因吧，我们四个人竟然还没有隔壁三个女的吃的多，这家串串的味道也没有到让人感到惊喜的地步。生活总是惊人的相似，很多原本期待的事情，在发生之后其实没有预想中的要好。</p><p>吃完之后，我们就一直散着步慢悠悠的走到了酒店，对的，今晚没有坐车。</p><p>来成都的大部分行程已经结束，时间已经过半，走在昏黄的路灯下，显然要比昨天晚上有情绪得多。</p><p>我们四个人，1 男 1 女前后自然成了两队，看着前面两位朋友有说有笑，又看了看旁边的朋友，我竟找不到话题，也就自顾自得走着。</p><p>我原以为自己这几年来变了很多，尤其是性格上。以前我是不怎么爱说话的，沉默的时候居多，现在的我显然要比以前说话的频率要高。这个时候，我才发现我可能还是原来的我，虽然说话的频率高了，那只不过是限于开玩笑罢了。真的到面对其它人，即便是关系很好的朋友，也依然找不到话题；不过，以前这个时候会慌张，会想着极力避免这种情况的发生，现在倒是多了些从容。</p><p>所以说，人呢有时候其实很难看清楚真实的自己，可能成长也需要时间，也可能有些事情一辈子都不太容易改变。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="8-月-6-日">8 月 6 日<a class="hash-link" href="#8-月-6-日" title="标题的直接链接">​</a></h2><p>今天是第三天，也就是倒数第二天，实际上明天已经没什么行程安排了，今天也就去最后一个比较远的地方——大熊猫基地。</p><p>四川成都作为国宝“大熊猫”的家乡，来这里拜访一下大熊猫也是应该的。只是，景区的门口秩序比较混乱，而且人工检票很慢，排了长长的队，炎热的天气让我们的耐心在极力的被耗尽。</p><p>好不容易进了景区，景区的树木和竹子比较多，一路上比较凉快，这才有了些许安慰。</p><p>然而，生活的挫折总是一个接一个。炎热的天气，出于保护国宝的考虑，它们不能在野外活动。所以，我们要想目睹国宝的真容得排队去一个叫做产房的地方。</p><p>为了进产房看熊猫，我们排了一个多小时的队，这一次耗尽了我的耐心，无人管理的混乱秩序让我对这个景区彻底的感到了失望。后来在产房看熊猫也被工作人员吼着迅速边走边拍赶了出来，后来想想竟对大熊猫没有太多深刻的印象。</p><p>看了熊猫之后，完成了今天最重要的任务，我们也就在景区随便溜达了起来。想着明天就要离开成都了，我们没有放过拍照的机会，边走边拍。</p><p>下午一点钟了，我们还没有吃午饭，但下午也没有行程安排，一时竟不知去干什么。后来，决定先去吃饭然后去购物广场买特产。</p><p>在吃了火锅，串串之后，我们今天的午餐选定了一家冷锅串串“叶婆婆钵钵鸡”，我们到现在也没搞明白这个名字与串串有什么关系。不过，这家店的东西还是很好吃的，而且也不贵。</p><p>两位女性朋友去买了很有名的成都正宗冷饮“一只酸奶牛”，从来只喜欢喝矿泉水的我也被迫喝了一杯，不过感觉还不错。</p><p>去买特产的时候，只有我买了一些火锅底料寄给了朋友和同事。朋友们临时决定要去看电影，而我则因为寄快递耽搁了将近半个小时才进场。进到大厅之后，才发现电影院诺大的放映厅竟然没有几个人，于是迅速的找到了朋友。我们看的电影是最近刚上映大火的《西虹市首富》，看完之后我们并未对电影有太多交流，感觉一般吧。</p><p>离开的时候总想着要干一些特别的事情，比如吃一些成都的网红小吃。我们折返去了中午吃饭的附近，排队买了排骨小吃和饮品，我记得那家排骨店排队可能有一个多小时吧，那是真的火。</p><p>在中午想到第二天回家买票的时候，高铁票其实已经没有了，而火车票同时也没了，幸好还有站票，我们才不会被迫留在成都。4 个小时的站票，难免会有些许抱怨。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="8-月-7-日">8 月 7 日<a class="hash-link" href="#8-月-7-日" title="标题的直接链接">​</a></h2><p>虽说有四天的时间，但实际上只安排了三天的行程，前三天为了好好玩，早上起的比较早，今天没啥事，也就能睡个懒觉了。</p><p>九点下去吃早饭的时候，暴雨再一次侵袭了成都，让人颇为感慨。</p><p>下午两点半的高铁，所以我们中午选择去酒店附近吃一家川菜。吃完饭等叫到滴滴坐上车的时候已经两点整了，而离成都东站的距离有 10 公里，我们一下子紧张了起来，如果错过就真的今天回不去了。幸运的是，一路上绿灯放行，而且司机师傅也很给力，我们只花了 15 分钟就赶到了高铁站，给师傅一个五星好评。</p><p>在经历了这一场紧张的赶车，等我们站在高铁上，车开始驶向西安离开成都的时候，我们安心了。</p><p>离开的时候，我并没有感到对成都太多的不舍，只是感叹时间过得比预想中的要快。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>其实，很多时候担心自己的计划会因为各种理由和原因而最终不能实现，现在实现了，反而感到很高兴。作为一个从小到大，性格略显内向，沉默寡言，做事有点优柔寡断的我来说，一场说走就走的旅行来之不易。</p><p>记得大学一年级报到那天爸妈安顿好我之后，在校门口送走他们，那时的我因为第一次接触集体生活，第一次独自留在一个大城市，沉默寡言的性格等等多种原因让我瞬时有点不知所措。后来，因为学校其它学院专业有高中同班同学可以偶尔联系，以及遇到的大学室友还算不错的缘故，大学四年的生活也算顺利度过。去年刚毕业时候因为没有立即找到合适的工作，离校拖了两个月才顺利入职现在就职的这个还算满意的公司，承受了来自家里莫大的压力，可能没有人会理解。现在，我可以从容的去其它省份其它城市出差或者旅行，我想这算是我成长的一部分。</p><p>我自认为是一个情感上比较细腻和敏感的人，我喜欢去了解自己，也喜欢去了解身边的人。在很久之前认识到自己做事有点优柔寡断的问题之后，我一直在极力的修正自己，所以这次去成都的旅行我毫不犹豫的推掉了工作安排。因为成长环境的原因，我意识到自己总是不够自信，所以我努力的学习工作所需要的技能，在工作之后才可以依靠自己的实力自信的做事；同时，我希望自己尽可能多的接触一些生活中的东西，让自己成为一个有趣的人，这样才不至于在和朋友的相处过程中还是和以前那样沉默寡言，气氛尴尬。在旅途中，现在我可以大胆的在游客的观望下帮朋友拍照，偶尔也偷偷的自拍一下，一路上和朋友相处的还算愉快。我想，这也算是我成长的一部分。</p><p>看过一句话，要看两个人合不合适，一起去旅行就知道了。</p><p>正如我在地铁墙上看到的那句广告语，旅行的意义在于走着走着，在一个际遇下，突然就重新认识了自己。旅行可以帮助我们认识自己，也许还可以帮助我们认识别人。</p><p>生活，需要一场说走就走的旅行！</p>]]></content:encoded>
            <category>生活</category>
            <category>旅游</category>
            <category>成都</category>
        </item>
        <item>
            <title><![CDATA[偶读朋友的书]]></title>
            <link>https://wang1212.github.io/2018/7/30/Life/reading/reading-</link>
            <guid>/2018/7/30/Life/reading/reading-</guid>
            <pubDate>Mon, 30 Jul 2018 00:50:00 GMT</pubDate>
            <description><![CDATA[一次偶然得到了朋友不打算要的好多书，刚好闲着翻了翻，却觉得有那么几本书真的不错。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2018-07-30 00:50:00 </em></p></blockquote><p>一次偶然得到了朋友不打算要的好多书，刚好闲着翻了翻，却觉得有那么几本书真的不错。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="缘分">缘分<a class="hash-link" href="#缘分" title="标题的直接链接">​</a></h2><p>有些事情用缘分来形容再合适不过了，这一次是因为偶然间帮朋友“处理”她搬家时觉得累赘的东西——许多书外加一本英汉字典。</p><p>记得原来的我看过印象最深刻的一本书便是《诛仙》了，这还是一本网络小说。其实看了有好几本网络小说，但给我印象最深刻的还是《诛仙》，可能是因为它比较适合我的欣赏风格吧。</p><p>从小到大，没有像那么多朋友一样看过很多原著，以及名家写的小说散文。也不是说我不爱看书，我其实看了很多书，但看的书基本上都是实用类的书，比如计算机软件方面的。我一直觉得是自己认为那些书对自己价值和意义不大吧，最起码不能像计算机软件这些书一样帮我找个好工作；但更能说服我的是，我觉得有时候刻意的去看一些名著啊，散文小说的，反而无法体会到这些书所带来的真正价值，单纯的感动和印象深刻感觉诠释不了这么受人推崇的理由。我这么说当然多多少少有点依据，因为我曾经有段时间，刻意的去看鲁迅写的散文，看了有一段时间，发现鲁迅写的文章是好，但我似乎不能够融入其中，有的只是简单的感动和令人感到肃然起敬的精神。</p><p><strong>其实书作为作者将其精神、生活阅历、理想等等一系列琐碎的事情作为艺术品表达和传播的载体，我觉得如果我去把它当作一件艺术品去看待的时候，其实一开始就失去了与作者近距离交流的机会，更谈不上体会到书带给我们的真正价值；反而，我觉得不那么刻意的话，在某个机会或者巧合下读了一本书，读完之后感觉写的真好，回过头来看原来作者是一个名家，又或者是一个在网络上都无法搜索到太多信息的写作者，其实这是我最想要的结果。</strong></p><p>这一次，算是巧合又或是缘分，当时听到朋友让我帮她处理掉这些累赘时，还觉得要提这么重的书回到住处还是挺抱怨的，我建议朋友直接扔掉就行了。但现在回想起来，也不知道为什么当时自己提了回来，其实回来之后它们在房间躺了应该有整整一个季度吧。这次搬家之后，我没有扔掉这些书，带到了新住处，等收拾完之后，想了想以后要和陌生人合租了，没有以前和朋友一块合租时那样的气氛了，难免有些不悦。</p><p>此时，就看到了还静静躺在地上的朋友的书，翻了一下袋子，里面的书已经铺上了一层厚厚的灰尘，拿了抹布和纸将书擦干净后，随手将上面的几本书拿了出来，先看了看名字然后翻了翻目录和简介，这是我看书的习惯；当然我并没有刻意的去看作者是谁，这也符合我的风格。</p><p>庆幸的是，朋友的书基本上都是精装的，让人拿在手里最起码第一印象分还是很高的。人呢，都是视觉动物，连厨师都知道菜的卖相要好。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="这一次迷恋上了看书">这一次，迷恋上了看书<a class="hash-link" href="#这一次迷恋上了看书" title="标题的直接链接">​</a></h2><p>三本书，《手机里的男朋友》、《在慌乱的世界，不慌不忙地爱》、《我们从未陌生过》，清一色女性朋友的书，不过我是男的，一个耿直的男生。</p><p>《手机里的男朋友》这本书在我看来确实太烂，充满了矫情、做作的男女之间感情故事，但我还是坚持看了有三分之一，后来实在乏味，我就想着同时看几本书也能换换口味，就翻了另外两本书，在看了一段时间之后，我就把这本书扔在一边了，我不打算看了。不过话说回来，这本书在那些女性朋友看来可能还是一本好书，不争论没有意义的事情，大家看自己喜欢的书对自己有意义就好。</p><p><strong>在我看书的过程中，我还不时的向它们的主人反馈我的读后感，哪本书太烂，哪本书好看，我从来都不避讳，不过更重要的是，我说等我看完之后我会帮你寄回去，这些书扔掉太可惜了。后来，我越发的觉得，真的，扔掉太可惜了。</strong></p><p>工作了快一年了，身边朋友读书的还在读书，工作了的也都到天南地北，和还在一个城市的偶而出去吃饭喝酒看电影也还不错。曾经的好朋友一起合租最后却反目，我不想去说谁对谁错，不过我也不想去原谅谁。在上学时候喜欢的女生在即将毕业时分手了，不过是那种很自然也不知道为什么就分开了的方式，有时候会极力的去挽回和讨好她，有时候却也觉得自己太过于打扰对方了，让她应该开始新的生活；总之，这种寂静无声的告别方式，无论是情侣还是朋友之间总是有一种说不出的感受。</p><p>其实，毕业之后比较纠结的就是，现在和那些还在读书的朋友出去吃饭一块玩，还是会比较尴尬的，一来是因为经济情况上的差异，总是在买单的时候容易发生尴尬；二来是因为确实大家接触的生活环境不同了，难免话题对不上。当然，这些很可能也是我自己想得太多。</p><p>在我看来，第一个问题是最好解决的，我原来还在上学的时候，和已经工作的朋友出去玩，我本想 AA 的，但朋友们没有让我得逞过；现在这种事情发生在自己身上的时候，我一样不会让那些还在校园的朋友得逞，一顿饭、一场电影的钱其实并不比朋友陪你一起吃饭，看电影来的珍贵，那些朋友我希望他们也能明白有些人适合 AA，而你们不一样。</p><p>话题对不上其实是比较严重的问题，但庆幸的是，大家都比较接地气，正能量满满，也能很好的化解这个问题，愿我们能保持住自己内心之中那份纯真的感情。</p><p>我已经 4 个月没有回家了，对于在外地工作的朋友来说，我可能是最容易回家的人了，他们是羡慕我的。</p><p>说了这么多与书无关的事情，其实就是在渲染缘分这件事。书之所以能让人产生共鸣，是我们能在作者所述的故事中看到自己相似的影子，能看到自己所向往的东西，又或许是恰好你正在经历与作者相似的生活，这些故事已经属于读书的人了，而不是写书的人。</p><p>《在慌乱的世界，不慌不忙地爱》是后来两本中我最先看的，原因再简单不过了，因为这本书的质量看起来没有另外一本书好，而我喜欢把好的东西留到最后。</p><p>确切的说，这两本书才是引起了我读书的极大兴趣，都是散文故事，很符合现在快时代的生活，长篇小说难免与现在的生活节奏有些格格不入。后来，我决定多读一些小说、散文的书，从实用技术类的书籍中掺杂一些新的东西，也算是生活的调剂。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="书与人也得三观相合">书与人也得三观相合<a class="hash-link" href="#书与人也得三观相合" title="标题的直接链接">​</a></h2><p>天下的书这么多，名著更是多的数不胜数，但想让一本书能得到所有的人称赞是不容易的，当然我说的称赞是看过几遍之后依然觉得好，至于那些看了一半或者没看过的人我是不算在其中的。</p><p><strong>相爱容易，因为五官；相处不易，因为三观。</strong></p><p>这是某个人的签名，也是大家耳熟能详烂大街的却又极力推崇的四字绝句，包括我也一样。这句话说的其实很对，但就是因为烂大街了，它成了一句玩笑，一句梗，一个理由，一个不被大家怎么重视的东西。</p><p>要想让一个人觉得你写的东西好，其实不需要太多华丽的辞藻，那都是小学生写作文才应该考虑的事情。故事所传达的感情主旋律、价值观、社会观、人生观等等能被读书的人认可才是最重要的。</p><p>虽然作为朋友来说，她是买自己想看的书，而且都是推荐给女性朋友所读的书，但丝毫不影响我对其中一部分书的兴致。</p><p>后面两本书没有了前一本书那种娇柔做作的风格，看起来要舒服得多，最起码对于我来说是这样的，所以说有时候换一种风格就能产生奇效。当然，我自认为也不是那么肤浅的人，故事的核心还是要符合我的三观的。</p><p>两本书各有特色，但总的来说都是叙写一些生活在都市的上班族的感情、工作生活，刚好符合我踏入社会工作的生活阅历；但更重要的是，这些故事无论真实与否，都用我自认为比较合理的理由传递了积极向上的正能量，而非鸡汤。</p><p>与其说故事好，倒不如说是我欣赏这些人对生活的态度，我也一样向往好的生活，我也有理想。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="生活总是可以被总结">生活总是可以被总结<a class="hash-link" href="#生活总是可以被总结" title="标题的直接链接">​</a></h2><p>在我看完之后，开始看新书的时候，其实记忆里已经对书的内容模糊了，这大概因为是散文的缘故，故事太多难免会记不住。</p><p>然而，生活给出一个难题，总会有一种方法能解决这种难题，那就是作者总会出其不意的引用一些其他人的句子，或者说写出一些令人深刻的感悟，来对这些故事做一个总结。往往是读过故事的人一看到这些句子就能在脑海中勾画出故事的原型，这真是一件幸运的事情。</p><blockquote><p>婚姻，并不仅仅是一个名分， <br>
而是从此刻开始，你要打开自己的心， <br>
自然而诚恳地去信任另一个人； <br>
两个原本独立的人， <br>
融为一体， <br>
从一个人的自由到两个人的温暖、从孤单到陪伴，从洒脱到责任， <br>
生命从此进入另一个世界。</p></blockquote><p>《在慌乱的世界，不慌不忙地爱》这本书第一章节的引语，传递出对待婚姻的观点吸引了我，我其实是对美好的婚姻以及婚后生活比较向往的，尽管它很难实现，但我依然觉得努力是有用的。</p><blockquote><p>人不应该是插在花瓶里供人观赏的静物， <br>
而是蔓延在草原上随风起舞的韵律。 <br>
生命不是安排， <br>
而是追求， <br>
人生的意义也许永远没有答案， <br>
但也要尽情感受这种没有答案的人生。</p></blockquote><p>这是作者引用的其他人的句子，我很庆幸能看到它，并尽可能的去理解它。我们作为一个平凡的人，干不出惊天动地的事，但可以做自己喜欢的事，可以有自己独特的风格，不断的追求，实现自己，不沦为一个平庸的人。人，可以平凡，但要有趣。</p><p>即便是总结，一本书也会有许多来不及分享的美好的东西。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="好书要分享">好书要分享<a class="hash-link" href="#好书要分享" title="标题的直接链接">​</a></h2><p>我是一个极度偏爱分享的人，我看到好的东西，无论是书、音乐，还是工艺品，都会分享给朋友。无论别人是如何看待我这种分享的行为，他们认为是强加给他们也罢，他们认为是我需要他们的思想和价值观需要保持与我一致也罢，我想的很简单，<strong>我不喜欢美好的东西被错过</strong>。</p><p>于是，我看完之后和很多人分享了心得，并买了两本新书送给了一位女性朋友，男性朋友我没有考虑过，也许他们认为我看女生看的书是一种特殊的爱好。我送书给朋友的时候，还特意提醒了一下，书还行，但略显鸡汤，朋友没有理我，我当时心理活动还是挺丰富的，当然后面说了是因为她正在忙，没顾得上回消息。书都没让人家看，就先泼了一盆冷水，不过这符合我的风格。</p><p><strong>到现在，分享依然是我坚持要做的事情。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>生活总是需要一些仪式感，工作总是需要一些使命感。认真的活，做一个有趣的人！</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="书">书<a class="hash-link" href="#书" title="标题的直接链接">​</a></h2><ul><li>《在慌乱的世界，不慌不忙地爱》- 宗柳伽</li><li>《我们从未陌生过》- 何炅、张皓宸、大冰、荞麦、咸贵人等</li></ul>]]></content:encoded>
            <category>生活</category>
            <category>阅读</category>
        </item>
        <item>
            <title><![CDATA[GIS-地图及其数据类型]]></title>
            <link>https://wang1212.github.io/Computer-Technology/GIS/gis-map-data-type</link>
            <guid>/Computer-Technology/GIS/gis-map-data-type</guid>
            <pubDate>Tue, 12 Jun 2018 02:12:00 GMT</pubDate>
            <description><![CDATA[在 GIS 开发中，直接接触的就是地图及其数据类型，借此总结一下常见的地图类型，以及在开发过程中涉及到的数据类型。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2019-06-08 07:18:00 </em></p></blockquote><p>在 GIS 开发中，直接接触的就是地图及其数据类型，借此总结一下常见的地图类型，以及在开发过程中涉及到的数据类型。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="地图">地图<a class="hash-link" href="#地图" title="标题的直接链接">​</a></h2><p>GIS 开发均是基于地图结合相关的空间数据来为客户提供一定的功能需求，根据常见的地图呈现类型可以简单的将其分为：</p><ul><li>影像图</li><li>道路图</li><li>专题图</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="影像图">影像图<a class="hash-link" href="#影像图" title="标题的直接链接">​</a></h3><p>影像地图是指一种带有地面遥感影像的地图，是利用航空像片或卫星遥感影像，通过几何纠正、投影变换和比例尺归化，运用一定的地图符号、注记，直接反映制图对象地理特征及空问分布的地图。</p><p>我们通常使用的百度地图、高德地图、谷歌地图等等这些软件，在进行图层选择时就有一个卫星图的选项，这就是卫星影像图。<strong>影像图是很容易辨别的，其呈现的是地图上的实体，可以直观、有效地反映地理空间信息，以供用户快速、准确地认识、了解地理环境和地理现象的空间位置、形态、分布、相互联系及发展变化的相关信息。</strong></p><p>由于 3S（GPS、RS、GIS）技术的快速发展，使得影像图多个领域得到了应用。大范围的影像图通常采用的是卫星遥感图像，一般对外发布的分辨率精度较低；而小范围的影像图为了保证超高精度（厘米级）以及高度还原地形地貌和极大的灵活性，通常会采用无人机航拍图像。</p><p>同时，影像图结合地形数据后可以实现三维地图的效果，准确呈现出丰富的地形地貌信息。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="道路图">道路图<a class="hash-link" href="#道路图" title="标题的直接链接">​</a></h3><p>道路图是通过电子技术绘制矢量图形进而呈现相关的地理空间信息的地图，<strong>与影像图最大的不同就是，道路图是利用简单的矢量图像来代替地图上目标实体，更侧重于目标位置信息。</strong></p><p>我们日常生活中使用的高德地图、谷歌地图等等这些软件，仅仅是为了获取简单的位置服务，因此这些软件默认的图层加载的就是道路图，即一打开软件所看到的地图。对于我们普通人来说，更多的功能需求都是基于位置信息，而并不关注地图上目标实体的一些特性，例如地形地貌等等。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="专题图">专题图<a class="hash-link" href="#专题图" title="标题的直接链接">​</a></h3><p>专题地图（thematic map），又称特种地图，是<strong>在地理底图上按照地图主题的要求，突出并完善地表示与主题相关的一种或几种要素，使地图内容专题化、表达形式各异、用途专门化的地图。</strong></p><p>专题地图在生活中是非常常见的，例如天气预报使用的预测地图，人口变化的动态地图，旅游景区的地图。<strong>普通地图侧重客观地反映地表现实，而专题地图取材学科广泛，许多编图资料都由相关的科研成果、论文报告、研究资料、遥感图像等构成，能反映学科前沿信息及成果。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="数据类型">数据类型<a class="hash-link" href="#数据类型" title="标题的直接链接">​</a></h2><p>由于地图数据通常较为庞大（GB 级别），而在 Web 技术发展迅速的今天，在线地图服务是 GIS 开发行业中发展最快的业务，为了提高在线地图加载效率催生了现在的 WMS、WTMS 等技术。</p><p>在线地图服务通过利用地图切片，加载地图瓦片的形式解决了加载效率的问题，瓦片类型通常可将其分为一下两类：</p><ul><li>栅格数据</li><li>矢量数据</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="栅格数据">栅格数据<a class="hash-link" href="#栅格数据" title="标题的直接链接">​</a></h3><p>栅格地图数据，是预先在 Server 端绘制好的固定图片（PNG、JPEG、GIF、TIFF）集合。<strong>这种类型的数据是没办法在客户端实现在线交互效果的，同时改动的话也是比较麻烦的，要重复进行制图、渲染、切片、更新 Service 等。</strong></p><p>栅格数据主要以展示为主，而且<strong>切片的栅格图像本身不具备定位信息，是通过切片的算法计算出来的具体位置，以此来达到定位的功能。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="矢量数据">矢量数据<a class="hash-link" href="#矢量数据" title="标题的直接链接">​</a></h3><p>矢量地图数据，是将矢量数据（点、线、面）通过不同的描述文件来组织和定义，在客户端实时解析和完成绘制。常见的数据格式有 GeoJSON、PBF、MVT、SHP、KML、DXF 等。SHP（Shapefile）是目前最常见的一种矢量数据格式。作为行业标准，几乎所有的商业和开源 GIS 软件都支持 Shapefile。</p><p><strong>矢量数据要改动的话也是比较方便的，不再像栅格数据一样要重新进行制图、渲染等；在不同分辨率的屏幕上可以获得一致清晰的呈现效果；矢量数据是可以在线交互的；矢量瓦片的渲染效率要比栅格瓦片高。</strong></p><p>注意：<strong>矢量瓦片存储的数据是相对坐标，并不是地理坐标，这么做的目的是为了减小数据量，加快传输效率和前端渲染效率。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="dtm-与-dem">DTM 与 DEM<a class="hash-link" href="#dtm-与-dem" title="标题的直接链接">​</a></h3><p>除此之外，还有一个比较重要的就是 DTM（Digital Terrain Model，数字地形模型） 与 DEM（Digital Elevation Model，数字高程模型）。</p><p>DTM 是利用一个任意坐标系中大量选择的已知 x、y、z 的坐标点对连续地面的一种模拟表示，或者说，DTM 就是地形表面形态属性信息的数字表达，是带有空间位置特征和地形属性特征的数字描述。<strong>x、y 表示该点的平面坐标，z 值可以表示高程、坡度、温度等信息，当 z 表示高程时，就是数字高程模型，即 DEM。</strong>地形表面形态的属性信息一般包括高程、坡度、坡向等。</p><p>一般认为，DTM 是描述包括高程在内的各种地貌因子，如坡度、坡向、坡度变化率等因子在内的线性和非线性组合的空间分布，其中 DEM 是零阶单纯的单项数字地貌模型，其他如坡度、坡向及坡度变化率等地貌特性可在 DEM 的基础上派生。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="服务类型">服务类型<a class="hash-link" href="#服务类型" title="标题的直接链接">​</a></h2><p>在 GIS 开发中，为了分享地图数据和提高数据源的灵活性，这时候就会需要部署/发布一个网络地图服务，用来提供在线的地图数据分发功能。通常来说，网络地图服务分为 <strong>动态地图服务</strong> 和 <strong>缓存（静态）地图服务</strong>，大致有 WMS、WFS、WCS、TMS、WMTS 几种。</p><blockquote><p>OGC - <a href="http://www.opengeospatial.org/" target="_blank" rel="noopener noreferrer">Open Geospatial Consortium</a>，开放地理空间信息联盟，一个非盈利的国际标准组织，GIS 相关官方标准的制定者。 <br>
OSGeo - <a href="https://www.osgeo.org/" target="_blank" rel="noopener noreferrer">Open Source Geospatial Foundation</a>，开源空间信息基金会，一个全球性非营利性组织，目标是支持全球性的合作，建立和推广高品质的空间信息开源软件。</p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="动态地图服务">动态地图服务<a class="hash-link" href="#动态地图服务" title="标题的直接链接">​</a></h3><p>动态地图服务通常是基于可定制化的地图需求，来实时动态生成所需要的地图数据供客户端访问，同时也提供给客户端一些可对地图进行编辑的操作。其特点就是：<strong>实时渲染、效率低、可编辑、交互性强。</strong></p><ul><li><strong>WMS</strong></li></ul><p>WMS（Web Map Service，网络地图服务）通过具有地理空间信息的数据来实时渲染地图（地理数据的可视化表现）数据，它提供给客户端的是地图图像，格式类型多为 PNG、GIF、JPEG、SVG、WebCGM 等。</p><ul><li><strong>WFS</strong></li></ul><p>WFS（Web Feature Service，网络要素服务）通过 &nbsp;GML（Geography&nbsp;Markup&nbsp;Language，地理标记语言）传递地理空间数据，它支持在基于 &nbsp;HTTP&nbsp; 协议的分布式计算平台上对地理要素进行插入（INSERT）、更新（UPDATE）、删除（DELETE）和发现（DISCOVERY）等操作，并且在这些操作的过程中保证了地理数据变化的一致性。</p><p>基于 WFS，我们通常在 GIS 客户端提供地图的属性查询、空间查询等客户需求的实现。</p><ul><li><strong>WCS</strong></li></ul><p>WCS（Web Coverage Service，网络覆盖服务）是 OGC 定义的在 Web 上以 “Coverage” 的形式共享地理空间数据的规范。所谓 “Coverage” 是指能够返回其时空域中任意指定点的值的数据，其形式易于输入到模型中使用。WCS 服务是以 “Coverage” 的形式实现了栅格影像数据集的共享，如卫星影像、数字高程数据等栅格数据。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="缓存地图服务">缓存地图服务<a class="hash-link" href="#缓存地图服务" title="标题的直接链接">​</a></h3><p>缓存（静态）地图服务是在动态地图服务这种实时渲染效率低的情况下提出的一种以灵活性换取性能的解决方案，更适合提供全球性大范围的地图数据在线服务。其特点就是：<strong>缓存数据、效率高、范围广、不可编辑、交互性弱。</strong></p><p>缓存地图服务通常不需要特殊的地图服务器，将生成的地图数据文件放在一个 Web 服务器中即可实现。</p><ul><li><strong>TMS</strong></li></ul><p>TMS（Tile Map Service，切片地图服务）是 OSGeo 提出的一种解决方案，它允许客户端访问切片地图数据，仅支持 RESTful 形式访问。</p><ul><li><strong>WMTS</strong></li></ul><p>WMTS（Web Map Tile Service，网络地图切片服务）是 OGC 基于 TMS 的特点和优势，附加了更多功能的一种新的地图服务官方标准，支持 RESTful、SOAP、KVP 形式访问，也是 OGC 首个支持 RESTful 访问的服务标准。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>GIS</category>
            <category>地图</category>
            <category>数据类型</category>
        </item>
        <item>
            <title><![CDATA[GIS-坐标系统]]></title>
            <link>https://wang1212.github.io/Computer-Technology/GIS/gis-coordinate-system</link>
            <guid>/Computer-Technology/GIS/gis-coordinate-system</guid>
            <pubDate>Wed, 06 Jun 2018 02:53:00 GMT</pubDate>
            <description><![CDATA[GIS，地理信息系统（Geographic Information System），它是一种特定的十分重要的空间信息系统，坐标系统是 GIS 理论知识中最基本的而且最关键的一点。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2019-07-12 03:20:00 </em></p></blockquote><p>GIS，地理信息系统（Geographic Information System），它是一种特定的十分重要的空间信息系统，坐标系统是 GIS 理论知识中最基本的而且最关键的一点。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="gis">GIS<a class="hash-link" href="#gis" title="标题的直接链接">​</a></h2><p>GIS，即就是在计算机硬、软件系统支持下，对整个或部分地球表层（包括大气层）空间中的有关地理分布数据进行采集、储存、管理、运算、分析、显示和描述的技术系统。空间信息与我们日常生活紧密相关，而且其数据的价值也是非常的大，现在可以说大多数行业都离不开空间信息技术的支撑。</p><p>GIS 开发是当前一个前景很好的行业，尤其是 Web GIS 处于一个井喷的时代，作为开发者不仅要学习基本的软件技术，更要了解 GIS 相关的理论知识，才能更好的利用技术结合理论知识变现。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="坐标系统">坐标系统<a class="hash-link" href="#坐标系统" title="标题的直接链接">​</a></h2><p>坐标系统（Coordinate System）是了解 GIS 行业的一个切入点，任何空间信息的呈现都是基于特定的坐标系统，其分为两类：<strong>地理坐标系统（Geographic Coordinate System）和投影坐标系统（Projection Coordinate System）</strong>。</p><p>由于历史原因，与其它行业（例如通信行业）标准一样，坐标系统也存在着不同的规范与标准，最常见的则是国际标准 WGS-84 坐标系统；而我国也正在推行自主建立的 CGCS2000 坐标系统标准；国内以前常用的则为北京 54、西安 80 等坐标系统。</p><p>与坐标系相关的有几个技术概念需要知道：<strong>EPSG</strong>、<strong>WKT</strong>、<strong>WKID</strong>、<strong>SRID</strong>、<strong>SRS</strong>、<strong>CRS</strong>。</p><blockquote><p><strong>EPSG</strong>：<a href="http://www.epsg.org/" target="_blank" rel="noopener noreferrer">European Petroleum Survey Group</a>，成立于 1986 年，并在 2005 年重组为 OGP（Internation Association of Oil &amp; Gas Producers），它负责维护并发布坐标参照系统的数据集参数，以及坐标转换描述，该数据集被广泛接受并使用，通过一个 Web 发布平台进行分发。</p></blockquote><p>目前已有的椭球体，投影坐标系等不同组合都对应着不同的 ID 号，这个号在 EPSG 中被称为 EPSG code，它代表特定的椭球体、单位、地理坐标系或投影坐标系等信息。例如，<code>EPSG:4326</code> 代表地理坐标系 WGS-84。</p><blockquote><p><strong>epsg.io</strong>：<a href="http://epsg.io/" target="_blank" rel="noopener noreferrer">http://epsg.io/</a> <br> &gt; <strong>Spatial Reference</strong>：<a href="https://spatialreference.org/" target="_blank" rel="noopener noreferrer">https://spatialreference.org/</a></p></blockquote><p><strong>WKT</strong>，即 Well Known Text，是对相应空间参考系的文字性描述（定义），例如 <code>EPSG:4326</code> 的 WKT 为：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">GEOGCS["WGS 84",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    DATUM["WGS_1984",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        SPHEROID["WGS 84",6378137,298.257223563,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            AUTHORITY["EPSG","7030"]],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        AUTHORITY["EPSG","6326"]],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    PRIMEM["Greenwich",0,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        AUTHORITY["EPSG","8901"]],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    UNIT["degree",0.0174532925199433,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        AUTHORITY["EPSG","9122"]],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    AUTHORITY["EPSG","4326"]]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>WKID（Well Known Identifier）</strong> 与 <strong>SRID（Spatial Reference System Identifier）</strong> 一致，是相应坐标系的标识，为 EPSG code，例如 <code>4326</code>。</p><p>WMS 1.1.1 以前用 <strong>SRS（Spatial Reference System）</strong>参数表示坐标系统，WMS 1.3 开始用 <strong>CRS（Coordinate Reference System）</strong>参数来表示，均为 EPSG，例如 <code>EPSG:4326</code>。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="地理坐标系统">地理坐标系统<a class="hash-link" href="#地理坐标系统" title="标题的直接链接">​</a></h3><p>地理空间坐标系，使用三维球面来定义地球表面位置，以实现<strong>通过经纬度对地球表面点位引用</strong>的坐标系。一个地理坐标系包括角度测量单位、本初子午线和参考椭球体三部分。在球面系统中，水平线是等纬度线或纬线。垂直线是等经度线或经线。</p><blockquote><p>经纬度通常分为天文经纬度、大地经纬度和地心经纬度。常用的经度和纬度是从地心到地球表面上某点的测量角。通常以度或百分度为单位来测量该角度。</p></blockquote><blockquote><p>位于两极点中间的纬线称为赤道。它定义的是零纬度线。零经度线称为本初子午线。对于绝大多数地理坐标系，本初子午线是指通过英国格林尼治的经线。其他国家/地区使用通过伯尔尼、波哥大和巴黎的经线作为本初子午线。经纬网的原点 (0,0) 定义在赤道和本初子午线的交点处。</p></blockquote><blockquote><p>通常，经度和纬度值以十进制度为单位或以度、分和秒 (DMS) 为单位进行测量。纬度值相对于赤道进行测量，其范围是 -90°（南极点）到 +90°（北极点）。经度值相对于本初子午线进行测量。其范围是 -180°（向西行进时）到 180°（向东行进时）。</p></blockquote><p><strong>地理坐标系定义了地表点位的经纬度，并且根据其所采用的参考椭球体参数还可求得点位的绝对高程值。</strong></p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="坐标系类型与基准">坐标系类型与基准<a class="hash-link" href="#坐标系类型与基准" title="标题的直接链接">​</a></h4><p>由于历史原因，产生了不同的坐标系统标准和规范。国内使用的常用坐标系为北京 54（BJZ54）与西安 80，而国际通用的则为 WGS-84 坐标系。目前，为了实现国际化，我们国家也正在推行自己的新一代坐标系统，CGCS2000（亦称，国家 2000）。</p><p>具体可将其分为两类：</p><ul><li><strong>参心坐标系</strong><ul><li>北京 54</li><li>西安 80</li></ul></li><li><strong>地心坐标系</strong><ul><li>WGS-84</li><li>CGCS2000</li></ul></li></ul><p>我们的国家 2000 坐标系现在与 WGS-84 坐标系基本保持一致（大地原点、参考椭球），唯一不同的则是基准面的选取不同，我们的国家 2000 坐标系基准面的选取对应 2000 国家高精度大地控制网。</p><p>通常，我们所说的 WGS-84 坐标系为 <code>EPSG:4326</code>，GPS 采用的就是该坐标系，实际上采用 WGS-84 基准的地理坐标系有很多，例如 EPSG:6326、EPSG:4978 等。同理，我们所说的 CGCS2000 坐标系一般为 <code>EPSG:4490</code>，西安 80 坐标系一般为 <code>EPSG:4610</code>，北京 54 坐标系一般为 <code>EPSG:4214</code>。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="投影坐标系统">投影坐标系统<a class="hash-link" href="#投影坐标系统" title="标题的直接链接">​</a></h3><p>投影坐标系，是按照一定的数学法则，将地球椭球面上的经纬网转换到平面上，<strong>使地面点位的地理坐标与地图上相对应点位的平面直角坐标或平面极坐标间，建立起一一对应的函数关系</strong>的坐标系。地图单位通常为米 ，也称非地球投影坐标系统（notearth），或者是平面坐标。</p><p>一个投影坐标系由以下参数确定：</p><ul><li>地理坐标系（由基准面确定，比如北京 54、西安 80、WGS-84）</li><li>投影方法（比如高斯-克吕格、Lambert 投影、UTM 投影、Mercator 投影）</li></ul><p>我国的北京 54 与西安 80 坐标系采用的是高斯-克吕格投影，国外的坐标系多采用 UTM 投影（通用横轴墨卡托投影）与 Mercator 投影（墨卡托投影）。</p><p>基于高斯投影，我国规定按经度差 6° 和 3° 进行分带，并得出相应带号。<strong>横坐标通常为 6 位或者 8 位（前 2 位为带号），纵坐标通常为 7 位。</strong></p><p>通常，Web 地图服务数据采用的均为 <code>EPSG:3857</code>（伪墨卡托、球形墨卡托、Web 墨卡托）坐标系，被 Google Maps、OpenStreetMap、Bing、ArcGIS、ESRI 广泛使用。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="投影方法">投影方法<a class="hash-link" href="#投影方法" title="标题的直接链接">​</a></h4><p>有几个投影比较重要，需要了解：<strong>墨卡托（Mercator）</strong>、<strong>高斯-克吕格（Gauss - Kruger）</strong>、<strong>通用横轴墨卡托（UTM、Universal Transverse Mercatol）</strong>。</p><ul><li><p><strong>墨卡托投影（Mercator Projection）—— 等角正轴切圆柱投影</strong></p><p>假设地球被围在一中空的圆柱里，其基准纬线与圆柱相切（赤道）接触，然后再假想地球中心有一盏灯，把球面上的图形投影到圆柱体上，再把圆柱体展开，这就是一幅选定基准纬线上的“墨卡托投影”绘制出的地图。</p><p>墨卡托投影特点：没有角度变形，由每一点向各方向的长度比相等；经纬线都是平行直线，且相交成直角；经线间隔相等，纬线间隔从基准纬线处向两极逐渐增大；长度和面积变形明显，但基准纬线处无变形，变形从基准纬线处向两极变形逐渐增大，但因为它具有各个方向均等扩大的特性，保持了方向和相互位置关系的正确。</p><p>在地图上保持方向和角度的正确是墨卡托投影的优点，墨卡托投影地图常用作航海图和航空图，如果循着墨卡托投影图上两点间的直线航行，方向不变可以一直到达目的地，因此它对船舰在航行中定位、确定航向都具有有利条件，给航海者带来很大方便。</p><p>此外，在 Web 地图服务中一般有两种坐标系：<code>EPSG:3395</code>（World Mercator，Elliptical Mercator）和 <code>EPSG:3857</code>（Pseudo-Mercator，Spherical Mercator）。</p></li><li><p><strong>高斯-克吕格投影（Gauss - Kruger projection）—— 等角横轴切椭圆柱投影</strong></p><p>假想用一个椭圆柱横切于地球椭球体的某一经线上，这条与圆柱面相切的经线，称中央经线。以中央经线为投影的对称轴，将东西各 3° 或 1°30′ 的两条子午线所夹经差 6° 或 3° 的带状地区按数学法则、投影法则投影到圆柱面上，再展开成平面，即高斯-克吕格投影，简称高斯投影。这个狭长的带状的经纬线网叫做高斯-克吕格投影带。</p><p>高斯-克吕格投影特点：中央子午线是直线，其长度不变形；其他子午线是凹向中央子午线的弧线，并以中央子午线为对称轴；赤道线是直线，但有长度变形；其他纬线为凸向赤道的弧线，并以赤道为对称轴；经线和纬线投影后仍然保持正交；离开中央子午线越远，变形越大。</p><p>若采用分带投影的方法，可使投影边缘的变形不致过大。我国各种大、中比例尺地形图采用了不同的高斯-克吕格投影带。其中大于 1:1 万的地形图采用 3° 带；1:2.5 万至 1:50 万的地形图采用 6° 带。</p><p>西安 80 与 北京 54 坐标系均采用了该投影。</p></li><li><p><strong>UTM 投影（Universal Transverse Mercatol Projection，通用横轴墨卡托投影）——等角横轴割椭圆柱投影</strong></p><p>椭圆柱割地球于南纬 80 度、北纬 84 度两条等高圈，投影后两条相割的经线上没有变形，而中央经线上长度比 0.9996。</p><p>与高斯-克吕格投影相似，该投影角度没有变形，中央经线为直线，且为投影的对称轴，中央经线的比例因子取 0.9996 是为了保证离中央经线左右约 330km 处有两条不失真的标准经线。</p><p>UTM 投影是为了全球战争需要创建的，美国于 1948 年完成这种通用投影系统的计算。这种坐标格网系统及其所依据的投影已经广泛用于地形图，作为卫星影像和自然资源数据库的参考格网以及要求精确定位的其他应用。</p></li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="坐标转换">坐标转换<a class="hash-link" href="#坐标转换" title="标题的直接链接">​</a></h2><p>通常根据应用场景的不同，会将地理坐标与投影坐标进行转换（包括同一类型坐标系，以及不同坐标系之间）。同一坐标系（例如西安 80）下地理坐标与投影坐标的转换有固定的公式，而不同基准面的坐标系（例如西安 80 与 WGS-84）之间要进行坐标的转换，则涉及到七个参数。</p><blockquote><p>七参数：X 平移、Y 平移、Z 平移、X 旋转、Y 旋转、Z 旋转、尺度变化 K（缩放）。</p></blockquote><p>这七个参数是基于空间直角坐标系的。通常来说，只需要关注 3 个参数即可：<strong>X 平移、Y 平移、Z 平移</strong>，其它参数基本都是一致的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="俯仰角偏航角翻滚角">俯仰角、偏航角、翻滚角<a class="hash-link" href="#俯仰角偏航角翻滚角" title="标题的直接链接">​</a></h2><p>在三维地图渲染过程中表示模型的旋转量时通常会用到俯仰角（pitch）、偏航角（heading）、翻滚角（roll）。</p><p>在右手坐标系中，俯仰角（pitch）正如上下点头一样，表示绕 X 轴的旋转量；偏航角（heading）则和左右转弯一样，表示绕 Y 轴的旋转量；翻滚角（roll）犹如左右上下摇摆一样，表示绕 Z 轴的旋转量。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>GIS</category>
            <category>坐标系统</category>
        </item>
        <item>
            <title><![CDATA[夜爬西岳华山]]></title>
            <link>https://wang1212.github.io/Life/tourism/tourism-huashan</link>
            <guid>/Life/tourism/tourism-huashan</guid>
            <pubDate>Sun, 06 May 2018 13:37:00 GMT</pubDate>
            <description><![CDATA[五一假期过后，正好有机会陪着朋友爬了一次华山，也算是对自己的一次挑战。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2018-05-06 13:37:00 </em></p></blockquote><u>2018-05-04</u><br><br><p>五一假期过后，正好有机会陪着朋友爬了一次华山，也算是对自己的一次挑战。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="第一次独自旅游">第一次独自旅游<a class="hash-link" href="#第一次独自旅游" title="标题的直接链接">​</a></h2><p>二十多年了，事实上自己没有在不和家人一起出去的情况下旅游过；一方面是因为比较宅吧，其实内心来说并不是很宅，大概是因为喜欢安静吧；另一方面呢，也是因为以前作为学生党，没什么收入，也就没怎么独自出去旅游过了。</p><p>现在上班了，计划着不管再忙，也应该出去走走看看，也算是丰富下阅历和见识吧；结果过了清明节假期，没有出去玩；到了五一假期，反而因为公司节前组织活动去玩了好几天，导致比较累，3 天的假期也匆匆而过。难道又要等到国庆节了嘛？感觉说要做的事总会因为太忙或者其它原因而搁置，也许这一年就会这样匆匆而过。</p><p>幸运地是，五一刚收假，有个朋友从南方回来了，说要去爬华山，让我陪她一块去；其实挺高兴的，一直发愁没有人一块出去玩，现在刚好有机会，也算是实现了自己的计划。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="夜爬华山">夜爬华山<a class="hash-link" href="#夜爬华山" title="标题的直接链接">​</a></h2><p>出发之前，看了攻略，也请教了朋友，什么都准备充分了，计划周五夜爬华山。最后看到有人说休息好，精力充沛再去爬吧，想想也是，毕竟听说华山是五岳之中最险的，安全也很重要啊。最后就和朋友商量说，周六晚上爬吧，周五下班都下午六点了，华山离西安也不是很近，这样时间太赶了；结果朋友告诉我说查了下天气预报，周六华山有雨，我看了一下还真是，最后想了想既然说了要陪朋友去，自己也想去，总不能就这样计划泡汤了吧，果断的决定了周五晚上去。</p><p>为什么选择晚上爬呢？因为大家为了看日出，大多都在晚上 10 点左右开始爬，到凌晨 4、5 点左右就会到达东峰的观日台，正好赶上看日出；还有一个好处就是，晚上看不到路边的悬崖峭壁，反而爬的过程中心理会更稳定一点。</p><p>前一天晚上准备了士力架（补充体力），还有面包、饼干、水等等；周五下午下班 6 点钟花了 1 小时赶到北客站买了高铁票前往华山了。高铁坐了大概半个小时就到了，以前坐火车的话得好几个小时才能到。到了华山北站，还得坐半个小时出租车才能到华山脚下。到了华山脚下后，也到晚上 9 点多了，买了票后还犹豫要不要等到 10 点多再上，朋友看起来很兴奋，就说现在就开始爬吧，中途可以一边歇一边爬。就这样从下班到开始爬，一路都在赶时间，马不停蹄的到了华山，没有歇一会就开始爬山了。</p><p>都说山里面很冷，爬的时候才觉得真是热，汗水都浸透了衣服，穿个衬衣都热。但是中途也不能休息的太久，汗水干了之后身体就会觉得很冷，所以每次休息个 5 分钟左右就差不多了。</p><p>朋友一路都在感叹这些人是怎么把卖的东西运到山上来的，我们爬山都觉得很累，何况他们呢？所以，山上的东西卖的贵也是值得的，而且也并没有贵的离谱，我们中途还买了 3 瓶矿泉水，10 元钱，所以并不贵。上山时候带的吃的挺多，结果我们并没吃多少，虽然爬山很累，但并不觉得饿，而且士力架也真是超难吃，我和朋友吃了两三颗就再也没吃了，感觉吃起来太腻了，我还买了一桶，唉...</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="上北峰">上北峰<a class="hash-link" href="#上北峰" title="标题的直接链接">​</a></h3><p>华山有五座峰，分别为东、西、南、北、中峰，北峰是最低，海拔 1600 多米；最高的峰海拔有 2100 多米，但不知道是哪个峰，感觉除过北峰以外，其它峰都挺高的。</p><p>大家基本上都会先上北峰，再去东峰看日出；很少有人能把五座峰转一圈吧。我们也是一样，决定先去北峰，然后去东峰看日出。9 点 20 开始爬山的，朋友刚开始一直说都是平路，好想爬人家拍的那种很陡的台阶，结果走了半个小时也没看见很陡的台阶。后面基本上台阶多了，但也不算陡，爬了好长一段时间，大概一个多小时的时候台阶逐渐变得很陡了，最陡的我觉得有 70° 左右吧，而且还挺长的，得爬半公里左右，这下朋友可乐坏了。当然了，出来玩安全最重要了，一直提醒朋友看好脚下，因为台阶很陡，而且有的台阶很窄，脚必须侧着才能踩稳，一定要手抓住旁边的铁索链。</p><p>挺佩服朋友的，她是个女生，一路都是自己爬，我也没怎么帮她，也没喊有多累，而且据说她以前也没怎么爬过山。反而是一路上遇到的很多男生都是气喘吁吁的。</p><p>我们花了 3 个小时到了北峰顶，这时候已经是 12 点 30 了，整整爬了 3 个小时，爬上了 1600 多米高的北峰。下一站就是东峰了，虽说海拔只相差 400 多米，但能预感到越往后面爬的速度会越来越慢了。当然了，速度不重要，安全是最重要的。</p><p>朋友说要去玩那些比较危险的地方，比如长空栈道什么的，觉得很刺激，我就说出来玩安全最重要，这不是胆大不胆大的问题，而且很多人天生就恐高、晕车什么的，就更不应该去这些危险的地方了。一路上也经过了那种路两旁是悬崖峭壁的地方，虽然是晚上，往下一看也挺可怕的。朋友说她平时也不能玩过山车、旋转木马这些项目，很容易头晕，那我就让打消了去那些危险的地方玩的念头，其实我自己可能也不敢去玩那些吧。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="再上东峰">再上东峰<a class="hash-link" href="#再上东峰" title="标题的直接链接">​</a></h3><p>在北峰顶逗留了十来分钟，吃了点东西，这时候也比较冷，山上也起风了，朋友穿上了拿的外套，我们就又开始出发前往下一站东峰了。</p><p>途径一处有一个叫做天梯还是云梯的路，基本上就是 90° 那种直上直下，不过还好周围不是悬崖峭壁，朋友说要去试试，上去试了下，发现没有想象中那么好爬，我说那算了吧，我们可以走别的路，出来玩开心和安全最重要，只要顺利爬上峰顶，你就很厉害了。于是，我们就放弃了这条路，选择其它路继续往上爬。</p><p>我们比预想中爬的要快，大概一个半小时左右就到达东峰的观日台了，这时候才 2 点 30，距离日出 5 点 45 分还有 3 个多小时，观日台的人还不是很多，我就问朋友要不要去西峰和中峰转转再回来，朋友就说算了吧，挺累的，其实中锋和西峰也挺远的，估计也得爬一个多小时；而且观日台的人越往后面人会越来越多，先在这占个好地方吧。</p><p>在观日台歇了一会，身上的汗干了，风也很大，就越发觉得冷了，然而想一想在这还得等 2 个多小时，真是难熬，大家都打开伞挡挡风，蜷缩在伞中玩或者休息。这时候慢慢也觉得累了，上了一天班，而且爬了 5 个小时的山，平时熬夜也没这么累。和朋友看了一个小时电影，这时候已经 4 点了，距离日出还有一个多小时，实在是撑不住了，朋友也有点瞌睡，就没再继续看电影了，说了说话，各自稍微眯了会眼睛。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="观日台看日出">观日台看日出<a class="hash-link" href="#观日台看日出" title="标题的直接链接">​</a></h3><p>慢慢的，观日台的人是越来越多，那么大点的地方基本上到处都是人。大概快 5 点的时候，不知谁看见天边突然出现了一丝亮光，大喊着日出，所有人都像惊醒了一般，全部站起来了，然而这时候距离日出时间还有将近 1 个小时，大家聚的很紧密，现在想蹲下坐会都很难了。</p><p>就这样，所有人都站着，注视着东方的天空，仔细的看着天空颜色的微妙变化，等待着日出那一刻的到来，这时候感觉时间过得真是缓慢。</p><p>天逐渐亮了，已经能看清山周围了，悬崖峭壁，真是壮观，也是佩服自己和周围的这些人能顺利爬上峰顶，而且沿途的艰险只有去过的人才能体会到。更让人深刻的是，在途中还遇到一个老人，大概 50、60 岁的样子，拄着拐杖一步一步的在慢慢的爬山，这才是真的让人佩服，我们年轻人都爬的很吃力，这些年龄这么大的人能爬上来已经很厉害了。</p><p>终于到日出的时刻了，天边的红光也很灿烂，但是看不见太阳的踪影，到了 6 点了，过了日出的时刻十多分钟了，也没看到太阳的踪影，大家都觉得挺遗憾的，主要是因为阴天吧，天气不好的，朋友一路上都说的云海也没有见到。这时候看完了日出，很多人也开始下山了，我们也很累了，准备快点下山回去好好休息一下。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="下山">下山<a class="hash-link" href="#下山" title="标题的直接链接">​</a></h3><p>不知不觉，就走到了“智取华山步行下山路”上去了，而不是上山来的路，途中真是感受到了下山比上山还累，腿很软，还不如上山舒服。而且，这条路上也有很多那种坡度很大，近乎直上直下的路，感觉比上山走的还要险。虽然说最终花了不到 3 个小时就到了山下，但是那台阶数量感觉比上山时候还要多，每次都以为快到山下了，转个弯总是看不到尽头的台阶，从一开始的以为一个半小时下去，再到两个小时，再到两个半小时，一路上没停没歇最后花了不到 3 个小时才下来。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>这次夜爬华山，上山用了 5 个小时，在观日台待了 3 个多小时，下山用了将近 3 个小时，算起来还是挺快的。最后感觉其实并没有想象中那么艰险和累，主要是对自己的一个超越和挑战吧，原来自己比想象中的要厉害；而且，朋友作为一个女生，表现还是超出想象的，很厉害哟！</p><p>两个人超过了 24 个小时都没有睡觉休息，最后也真是瞌睡，12 点左右赶到了西安，就各自回家收拾了下，睡了一觉。我回家躺了不一会就睡着了，晚上一起吃烧烤的时候朋友还说回去洗了衣服洗了澡才睡的，真是佩服。晚上给她打电话，结果停机了，又不知道她别的联系方式，发了微信语音视频也没人接，就给朋友冲了点话费，打过去才知道朋友常用的是另外一个号码，也真是搞笑了。吃了烧烤，才不到 9 点，本来说要去看个电影，想想看完太晚了，就坐在一起聊了会天，10 点就回家了，这次旅程也算结束了，和朋友下次见面也不知道要到什么时候了。</p><p>总的来说，这次旅游虽然时间很短，但还是很开心的，只是不想第二次再爬华山了，一方面是比较累，另一方面也觉得一个地方去一次就够了，下次机会也许可以去爬五岳之中的其它四座山呢。</p>]]></content:encoded>
            <category>生活</category>
            <category>旅游</category>
            <category>华山</category>
        </item>
        <item>
            <title><![CDATA[了解咖啡文化-品鉴师]]></title>
            <link>https://wang1212.github.io/Life/coffee-taster</link>
            <guid>/Life/coffee-taster</guid>
            <pubDate>Sun, 29 Apr 2018 23:18:00 GMT</pubDate>
            <description><![CDATA[现在很多人都在喝咖啡，为了熬夜也罢，或者是作为一种爱好也罢，了解下咖啡文化还是挺有意思的。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2019-05-25 17:54:00 </em></p></blockquote><p>现在很多人都在喝咖啡，为了熬夜也罢，或者是作为一种爱好也罢，了解下咖啡文化还是挺有意思的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="咖啡">咖啡<a class="hash-link" href="#咖啡" title="标题的直接链接">​</a></h2><p>咖啡（Coffee）作为一种西式饮品在国内还是比较受欢迎的，很多人喝咖啡的目的是为了熬夜提神，当然我也不例外。除了熬夜提神以外，咖啡与我们中国的茶饮也一样，象征着一种饮品文化，于是呢，也想去简单的了解一下咖啡文化。</p><p>因为经常在网易公开课上学习东西，所以就直接在上面搜索了与咖啡相关的课程，结果还是比较少的。我就直接选择了台湾大学王裕文教授的公开课《咖啡学/咖啡官能鉴定》来看看，虽然只有三集，但也有将近 5 个小时，在这里也是将断断续续看的感受与学到的东西记录下，以后闲了也能回过头来看看，回忆复习一下。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="现磨手冲">现磨手冲<a class="hash-link" href="#现磨手冲" title="标题的直接链接">​</a></h3><p>咖啡豆经过高温烘培后，不应该立即磨粉，而是应该等待 15 - 30 分钟再磨粉较好，等待其内部成分充分转化。磨粉细度也有级别控制，根据口味和冲泡量来决定磨粉的细度级别。</p><p>磨粉后，可以进行手冲，但要注意的是，煮咖啡时尽量不要使用滤纸，因为纸会吸附掉咖啡中大量的油脂，损失大量油脂的咖啡喝起来给人的感觉会比较稀，通常又会加奶等饮品来弥补口味上的缺失。但是，咖啡粉中的杂质肯定是要过滤掉的，尽可能使用金属滤网代替滤纸，这样的话，咖啡中的油脂基本会被完整的保留下来，原汁原味的咖啡会更香，口味更舒适。</p><p>煮咖啡其实是对咖啡萃取的过程，通常来说，水温不应该太高，控制在 90℃ 是比较好的，当然了这是适合大众的方式，根据萃取度不同可以搭配不同的温度。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="影响咖啡萃取的因素">影响咖啡萃取的因素<a class="hash-link" href="#影响咖啡萃取的因素" title="标题的直接链接">​</a></h3><p>一般来说，要做出好喝的咖啡，不仅要掌握影响萃取咖啡的因素，而且要对这些因素可控，煮出来的咖啡具备可重复性，这才是最重要的。正如科学研究一个道理，不具备可重复性的实验无法将成果应用于实际产品，投入市场进行盈利。</p><ul><li><p>磨粉颗粒粗细大小</p><p>不同的磨豆机磨出来的咖啡粉颗粒大小级别不同，一定要具备可复制性，而不是呈正态分布。</p></li><li><p>磨出咖啡粉颗粒形状</p><p>理想形状是圆形，因为不同地方充分接触水分，保证萃取程度均匀。但在现实情况下，一般应为正立方体比较好。</p></li><li><p>水质</p><p>矿物质含量高的水为硬水，带正电的金属离子和咖啡中负电离子（蛋白质）结合后就会形成沉淀。蒸馏水矿物质含量低，形成的沉淀少。小技巧：用立顿红茶包泡水可以快速检验水的质量，如果泡过后拿起来在光线下看是透明的说明水质合格。</p></li><li><p>搅拌</p><p>搅拌可以加速溶解速度，使水和咖啡粉混合均匀。</p></li><li><p>时间</p><p>时间越长越苦，越短越酸。</p></li><li><p>过滤</p><p>滤纸会把咖啡中油脂过滤掉，金属滤网会尽可能保留咖啡的油脂。</p></li><li><p>咖啡中自带油脂</p><p>咖啡自带的油脂更好，利于健康；额外加奶油球，反式脂肪对人体健康不利。</p></li><li><p>比例</p><p>咖啡粉与水的比例，一般情况下控制在 1:12 到 1:20 之间即可。</p></li><li><p>冷却速度</p><p>用虹吸壶萃取咖啡时，使用湿抹布包住壶底，使冷却速度均匀。</p></li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《咖啡学》课程，台湾大学，王裕文。（网易公开课）</li></ul>]]></content:encoded>
            <category>生活</category>
            <category>咖啡</category>
        </item>
        <item>
            <title><![CDATA[Web 前端架构设计]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/web-front-end-architecture</link>
            <guid>/Computer-Technology/Web/web-front-end-architecture</guid>
            <pubDate>Wed, 28 Mar 2018 14:01:00 GMT</pubDate>
            <description><![CDATA[Web 前端开发是一个零散化的过程，基本上没有专业的 IDE 来为我们提供一整套的自动化流程解决方案，如何从需求到实现一步步快速推进形成完整的工作流，在后期如何高效的进行测试和优化，让前端开发可持续化、可扩展显得极为重要。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2018-07-01 01:29:00 </em></p></blockquote><p>让 Web 前端开发可持续化、可扩展，关注四个核心<strong>代码</strong>、<strong>流程</strong>、<strong>测试</strong>、<strong>文档</strong>。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="代码">代码<a class="hash-link" href="#代码" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="html">HTML<a class="hash-link" href="#html" title="标题的直接链接">​</a></h3><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="模块化标记">模块化标记<a class="hash-link" href="#模块化标记" title="标题的直接链接">​</a></h4><p>构建模块化标记原则：<strong>标签表达结构</strong>，<strong>类名控制外观</strong>。这样做的好处就是，对相同类型结构的模块可以复用标签模版，同时又可以通过改变类名来灵活的控制模块的外观。例如：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;section class="theme-container-card"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;nav class="theme-nav-block-items"&gt;&lt;/nav&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;header class="theme-title-xxx"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;h2&gt;&lt;/h2&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/header&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;main class="theme-content-xxx"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;p&gt;&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;div&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/main&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;footer class="theme-endnote-fluid"&gt;&lt;/footer&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/section&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在这里，类名其实对应的是不同的主题样式。</p><p>构建一个完整的页面，应该将其分解为一些更细小的可复用的单元，也就是组件模块。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="编码规范">编码规范<a class="hash-link" href="#编码规范" title="标题的直接链接">​</a></h4><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="文档类型">文档类型<a class="hash-link" href="#文档类型" title="标题的直接链接">​</a></h5><p>HTML5 的文档类型申明：<code>&lt;!DOCTYPE html&gt;</code></p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="html-验证">HTML 验证<a class="hash-link" href="#html-验证" title="标题的直接链接">​</a></h5><p>规范化的 HTML 是显现技术要求与局限的显著质量基线，它促进了 HTML 被更好地运用。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;!DOCTYPE html&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;meta charset="utf-8"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;title&gt;Test&lt;/title&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;article&gt;This is only a test.&lt;/article&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;title&gt;Test&lt;/title&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;article&gt;This is only a test.&lt;/article&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="省略可选标签">省略可选标签<a class="hash-link" href="#省略可选标签" title="标题的直接链接">​</a></h5><p>HTML5 规范中规定了 HTML 等标签是可以省略的。但从可读性来说，在开发的源文件中<strong>不要这样做</strong>，因为省略标签可能会导致一些问题。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="资源加载">资源加载<a class="hash-link" href="#资源加载" title="标题的直接链接">​</a></h5><p>CSS 资源（<code>&lt;link&gt;</code>）在 <code>&lt;head&gt;</code> 标签中引入，避免 DOM 加载完后重复渲染；JS 资源（<code>&lt;script&gt;</code>）在文档尾部 <code>&lt;/body&gt;</code> 闭合标签前引入，避免过早的加载 JS 阻塞 DOM 渲染。例如：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;head&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;link rel="stylesheet" href="base.css"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/head&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;script src="common.js"&gt;&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>慎用</strong> <code>&lt;script&gt;</code> 标签的 <code>async</code> 和 <code>defer</code> 属性。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="语义化">语义化<a class="hash-link" href="#语义化" title="标题的直接链接">​</a></h5><p>使用 HTML 5 新标签，构建语义化标签模块，有利于理解和提高效率。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;section&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;nav&gt;&lt;/nav&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;header&gt;&lt;/header&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;main&gt;&lt;/main&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;footer&gt;&lt;/footer&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/section&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;div class="section"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="nav"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="header"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="main"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="footer"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="多媒体回溯">多媒体回溯<a class="hash-link" href="#多媒体回溯" title="标题的直接链接">​</a></h5><p>对页面上的媒体而言，像图片、视频、canvas 动画等，要确保其有可替代的接入接口。图片文件我们可采用有意义的备选文本（alt），视频和音频文件我们可以为其加上说明文字或字幕。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;img src="imgs/banner.png" alt="Prairie and Horse"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;img src="imgs/banner.png"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">或</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;img src="imgs/banner.png" alt="Banner image one"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这些替代文字应该描述媒体资源的内容，而不是这些媒体资源的作用、类型等。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="关注点分离">关注点分离<a class="hash-link" href="#关注点分离" title="标题的直接链接">​</a></h5><p>严格地保证<strong>结构（HTML）</strong>、<strong>表现（CSS）</strong>、<strong>行为（JS）</strong>三者分离，并尽量使三者之间没有太多的交互和联系。遵循：</p><ul><li>不要引入太多零散的样式表，合并成大文件。</li><li>不要使用内联样式（<code>&lt;style&gt; … &lt;/style&gt;</code>）、和行内样式。</li><li>不要引入太多零散的脚本文件，合并成大文件。</li><li>不要使用内联脚本（<code>&lt;script&gt; … &lt;/script&gt;</code>）。</li><li>不要使用表象元素（例如 <code>&lt;b&gt;</code>、<code>&lt;u&gt;</code>、<code>&lt;font&gt;</code> 等）。</li><li>不要使用表象类名（例如 center、red、left）。</li></ul><p>这样做的好处是，代码干净整洁，利于维护。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="内容至上">内容至上<a class="hash-link" href="#内容至上" title="标题的直接链接">​</a></h5><p>不要让非内容信息污染了你的 HTML。遵循：</p><ul><li>不要引入一些特定的 HTML 结构来解决一些视觉设计问题。</li><li>不要将 <code>&lt;img&gt;</code> 元素当做专门用来做视觉设计的元素。</li></ul><p>这些是什么意思呢？HTML 结构应该表达的是文档内容，而非设计要素。例如，列表
元素 <code>&lt;li&gt;</code> 前面的原点、空心圆等修饰性的东西<strong>不应该</strong>用额外的标签去实现，可以借助<strong>伪元素</strong>实现。同样地，<code>&lt;img&gt;</code> 引入的图片应该是内容相关的，而非修饰性东西。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="tab-index-在可用性上的运用">Tab Index 在可用性上的运用<a class="hash-link" href="#tab-index-在可用性上的运用" title="标题的直接链接">​</a></h5><p>依据元素的重要性来重新排列其 tab 切换顺序。你可以设置 <code>tabindex="-1"</code> 在任何元素上来禁用其 tab 切换。</p><p>当你在一个默认不可聚焦的元素上增加了功能，你应该总是为其加上 <code>tabindex</code> 属性使其变为可聚焦状态，而且这也会激活其 CSS 的伪类 <code>:focus</code>。选择合适的 tabindex 值，或是直接使用 <code>tabindex="0"</code> 将元素们组织成同一 tab 顺序水平，并强制干预其自然阅读顺序。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id-和锚点">ID 和锚点<a class="hash-link" href="#id-和锚点" title="标题的直接链接">​</a></h5><p>通常一个比较好的做法是将页面内所有的标题元素（<code>h2</code>、<code>h3</code>）都加上 ID。这样做，页面 URL 的 hash 中带上对应的 ID 名称，即形成描点，方便跳转至对应元素所处位置。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="格式化">格式化<a class="hash-link" href="#格式化" title="标题的直接链接">​</a></h5><p><strong>块级元素应独占一行，内联元素放在同一行，子元素缩进使用制表符。</strong></p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;nav&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li&gt;&lt;span&gt;Item&lt;/span&gt; one&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/nav&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;nav&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Item&lt;/span&gt; one&lt;/li&gt;&lt;/ul&gt;&lt;/nav&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="引号">引号<a class="hash-link" href="#引号" title="标题的直接链接">​</a></h5><p>HTML 标签属性值应该用<strong>双引号</strong>，而不是单引号。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;div class="container"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;div class='container'&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="注释">注释<a class="hash-link" href="#注释" title="标题的直接链接">​</a></h4><p>在 HTML 页面进行必要的注释是应该的，尤其是 SPA 单页面应用，标明不同的模块位置，便于维护和扩展。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;header&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;h1&gt;Single Page Web Application&lt;/h1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/header&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;!-- container 容器 --&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;main id="content"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;!-- Module-1 --&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;section&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;/section&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;!-- Module-2 --&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;section&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;/section&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/main&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;footer&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;p&gt;CopyRight 2018&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/footer&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="csssass">CSS（Sass）<a class="hash-link" href="#csssass" title="标题的直接链接">​</a></h3><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="模块化-css">模块化 CSS<a class="hash-link" href="#模块化-css" title="标题的直接链接">​</a></h4><p>构建模块化的 CSS 有多种方法，这里推荐三种：</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="oocss-方法">OOCSS 方法<a class="hash-link" href="#oocss-方法" title="标题的直接链接">​</a></h5><p>Object-Oriented CSS，即面向对象的 CSS，主要有两个原则：<strong>分离结构和外观，分离容器和内容。</strong></p><p>分离结构和外观，意味着将视觉特性定义为可复用的单元，最简单的例子就是以主题形式定义 CSS。</p><p>分离容器和内容，指的是不再将元素位置作为样式的限定词，定义可复用的 CSS 类名，无关于标签内容位置。</p><p>例如：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;div class="toggle simple"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="toggle-control open"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;h1 class="toggle-title"&gt;Title&lt;/h1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="toggle-details open"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="smacss-方法">SMACSS 方法<a class="hash-link" href="#smacss-方法" title="标题的直接链接">​</a></h5><p>Scalable and Modular Architecture for CSS，即模块化架构的可扩展 CSS，它将样式系统划分为五个类别：</p><ul><li><p>基础</p><p>如果不添加 CSS 类名，标记会以什么外观呈现。</p></li><li><p>布局</p><p>把页面分成一些区域。</p></li><li><p>模块</p><p>设计中的模块化、可复用的单元。</p></li><li><p>状态</p><p>描述在特定的状态或情况下，模块或布局的显示方式。</p></li><li><p>主题</p><p>一个可选的视觉外观层，可以让你更换不同主题。</p></li></ul><p>OOCSS 与 SMACSS 有许多相似之处，它们都把样式的作用域限定到根节点的 CSS 类名上，然后通过皮肤（OOCSS）与子模块（SMACSS）进行修改，后者使用了 is 前缀的状态类名。例如：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;div class="toggle toggle-simple"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="toggle-control is-active"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;h2 class="toggle-title"&gt;Title&lt;/h2&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="toggle-details is-active"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="bem-方法">BEM 方法<a class="hash-link" href="#bem-方法" title="标题的直接链接">​</a></h5><p>Block Element Modifier，即块元素修饰符，只是一个 CSS 类命名的规则，建议每个元素都添加带有如下内容的 CSS 类名：</p><ul><li><p>块名</p><p>所属组件的名称。</p></li><li><p>元素</p><p>元素在块里面的名称。</p></li><li><p>修饰符</p><p>任何与块或者元素相关联的修饰符。</p></li></ul><p>例如：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;div class="toggle toggle--simple"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="toggle__control toggle__control--active"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;h2 class="toggle__title"&gt;Title&lt;/h2&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="toggle__details toggle__details--active"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以上三种方法各有优势，提供给了我们构建模块化 CSS 的方式，也是三种思维方式，在实际开发过程中可以借鉴。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="编码规范-1">编码规范<a class="hash-link" href="#编码规范-1" title="标题的直接链接">​</a></h4><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id-and-class-命名">ID and class 命名<a class="hash-link" href="#id-and-class-命名" title="标题的直接链接">​</a></h5><p>命名应该遵循<strong>语义化</strong>原则，表达其具体的用途和含义，这样做的好处是更容易理解，同时发生变化的可能性也很小。同时，<strong>单词的分隔符统一使用中划线 “-”</strong>。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.bg-important {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    background-color: red;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.bg-red {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    background-color: red;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>命名不要出现表象词，比如颜色等，同时表达的含义应具体而不是通用化。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="避免使用-id">避免使用 ID<a class="hash-link" href="#避免使用-id" title="标题的直接链接">​</a></h5><p>通常，在样式文件中<strong>不应该</strong>出现 <code>ID</code>，所有的样式均应该由 <code>class</code> 来定义，因为 ID 会导致样式不可重用的后果。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="避免使用标签名">避免使用标签名<a class="hash-link" href="#避免使用标签名" title="标题的直接链接">​</a></h5><p>在选择器中<strong>不应该</strong>出现标签名，这样做的好处是可以提高样式的复用性。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.container &gt; .content &gt; .title {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    font-size: 2em;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">div.container &gt; main.content &gt; h2.title {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    font-size: 2em;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>选择器中出现标签名的话，会将外观（CSS）与结构（HTML）绑定在一起，不利于重用。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="精确匹配">精确匹配<a class="hash-link" href="#精确匹配" title="标题的直接链接">​</a></h5><p>在使用选择器时应该尽可能的精确匹配到目标元素，这样发生问题时更容易找到问题也有利于性能优化。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.content &gt; .title {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    font-weight: bold;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.content .title {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    font-weight: bold;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如果匹配的是直接子代元素，就使用直接子代选择器，这样性能更好，也不容易影响非直接子代元素的后代元素样式。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="缩写属性">缩写属性<a class="hash-link" href="#缩写属性" title="标题的直接链接">​</a></h5><p>部分的 CSS 属性值是可以进行缩写的，这样编码效率也会提高，但缩写属性也应该慎用，因为缩写属性牵扯到顺序问题，像 <code>font</code>、<code>background</code> 这些顺序难记的属性不应该使用缩写，而像 <code>padding</code>、<code>margin</code> 这些常用并且顺序好记的属性应该使用缩写。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.content {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    background: #000;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    background-image: url("./imgs/bg.png");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    padding: 0 20px 0 10px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.content {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    background: #000;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    background-image: url("./imgs/bg.png");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    padding-left: 10px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    padding-right: 20px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="0-与-单位">0 与 单位<a class="hash-link" href="#0-与-单位" title="标题的直接链接">​</a></h5><p>如果属性值为 0，不在使用单位。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{ padding: 2px 0; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{ padding: 2px 0px; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="十六进制表示法">十六进制表示法<a class="hash-link" href="#十六进制表示法" title="标题的直接链接">​</a></h5><p>当使用十六进制表示颜色值时，尽可能用更简短的方式，例如使用 3 位。同时，使用小写表示，<strong>不要使用大写</strong>。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{ color: #d8a; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{ color: #DD88AA; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="声明顺序">声明顺序<a class="hash-link" href="#声明顺序" title="标题的直接链接">​</a></h5><p>采用统一的属性声明顺序，可以提高可读性。通常，应遵循以下顺序（依次从上至下）：</p><ul><li>结构性属性：<ol><li><code>display</code>;</li><li><code>position</code>、<code>left</code>、<code>top</code>、<code>z-index</code> 等;</li><li><code>overflow</code>、<code>float</code> 等;</li><li><code>width</code>、<code>height</code>;</li><li><code>margin</code>、<code>padding</code>。</li></ol></li><li>表现性属性：<ol><li><code>color</code>、<code>text</code>;</li><li><code>font</code>;</li><li><code>background</code>、<code>border</code> 等。</li></ol></li></ul><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="分号-与-空格">分号 与 空格<a class="hash-link" href="#分号-与-空格" title="标题的直接链接">​</a></h5><p>CSS 属性值后<strong>必须用</strong>分号结束，每条属性声明都<strong>应该</strong>使用新的一行，并且在<strong>冒号与属性值中间空出一个空格</strong>，提高可读性。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.content {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    width: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    margin-bottom: 10px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.content {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    width:200px; margin-bottom:10px</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="规格分隔">规格分隔<a class="hash-link" href="#规格分隔" title="标题的直接链接">​</a></h5><p>每个规则之间使用一行进行分割，每个选择器<strong>应该</strong>使用新的一行。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.container {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    padding: 10px 20px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.content,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.item:hover {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    color: orange;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.container {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    padding: 10px 20px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.content, .item:hover {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    color: orange;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="引号-1">引号<a class="hash-link" href="#引号-1" title="标题的直接链接">​</a></h5><p>属性值中的引号应该使用双引号，而不是单引号。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{ background-image: url("./imgs/bg.png"); }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{ background-image: url('./imgs/bg.png'); }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="使用-scss-语法">使用 Scss 语法<a class="hash-link" href="#使用-scss-语法" title="标题的直接链接">​</a></h5><p>SCSS 是 Sass 3 引入的新语法，其语法完全兼容 CSS 3，并且继承了 Sass 的强大功能。Scss 语法相较于 Sass 语法更接近 CSS 语法，所以<strong>统一使用 Scss 语法</strong>。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="选择器嵌套">选择器嵌套<a class="hash-link" href="#选择器嵌套" title="标题的直接链接">​</a></h5><p>使用 Sass 预处理器后，使得我们可以进行选择器嵌套，大幅度提高了编码效率，也使 CSS 代码变得更为简洁，结构更为清晰。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.container {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    padding: 10px 20px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &amp; &gt; .content {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        border: 1px solid black;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.container {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    padding: 10px 20px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.container &gt; .content {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    border: 1px solid black;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="选择器嵌套顺序">选择器嵌套顺序<a class="hash-link" href="#选择器嵌套顺序" title="标题的直接链接">​</a></h5><p>属性声明遵循一定顺序，同样地，选择器的嵌套也应该遵循一定的顺序以提高可读性。
通常，应该遵循以下顺序（依次从上至下）：</p><ol><li>当前选择器的样式属性；</li><li>父级选择器的伪类选择器 (:first-letter、:hover、:active 等)；</li><li>伪类元素 (:before and :after)；</li><li>父级选择器的声明样式 (.selected、.active、.enlarged 等)；</li><li>用 Sass 的上下文媒体查询；</li><li>子选择器作为最后的部分。</li></ol><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.item {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 1. 当前选择器样式属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    font-size: .8em;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 2. 父级选择器的伪类</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &amp;：hover {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        color: orange;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 3. ::before &amp;&amp; ::after</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &amp;::before {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        content: attr("tip");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        display: block;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 4. 父级选择器声明样式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &amp;.selected {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        background-color: red;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 5. 上下文媒体查询</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @media screen and (min-width: 768px) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        font-size: 1.2em;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 6. 子类选择器</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &amp; &gt; .text {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        font-weight: 400;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="注释-1">注释<a class="hash-link" href="#注释-1" title="标题的直接链接">​</a></h4><p>在使用 Sass 写 CSS 时有很大的灵活性来组织代码结构，但注释也是很必要的。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="文档注释">文档注释<a class="hash-link" href="#文档注释" title="标题的直接链接">​</a></h5><p>通常写在文件的开始部分，涉及文档的概述以及版本号，及其依赖等。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/*!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    normalize.css v8.0.0 | MIT License |github.com/necolas/normalize.css</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">*/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="模块注释">模块注释<a class="hash-link" href="#模块注释" title="标题的直接链接">​</a></h5><p>模块的注释使用多行注释，标明该模块、代码块的作用等。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * Remove the margin in all browsers.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="普通注释">普通注释<a class="hash-link" href="#普通注释" title="标题的直接链接">​</a></h5><p>对于一些比较关键的代码，要进行注释，写在单行即可。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/* menu-1 */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="javascript">JavaScript<a class="hash-link" href="#javascript" title="标题的直接链接">​</a></h3><p>前后端分离后，前端需要写更多的业务逻辑代码，不再是单纯写 HTML 与 CSS 了，很多需求的实现都依靠于 JavaScript。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="基于-js-的-web-应用">基于 JS 的 Web 应用<a class="hash-link" href="#基于-js-的-web-应用" title="标题的直接链接">​</a></h4><p>创建可扩展且可持续的设计系统，并维护一套高质量的代码。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="选择框架">选择框架<a class="hash-link" href="#选择框架" title="标题的直接链接">​</a></h5><p>没有哪个 JavaScript 框架是完美的，任何一个框架都是基于 JavaScript 来实现的，框架提供给我们的是一种设计模式和更优的实现方式。</p><p>选择哪个框架，首先我们要考虑业务需求是否复杂，大多时候使用框架反而会增加代码量和无畏的复杂逻辑。其实，很多时候我们是用不到框架的，我们更多时候用到的是一些例如 Jquery 库、Bootstrap CSS 库这些工具，当现有的业务手动实现遇到技术瓶颈时，我们才应该去考虑使用一些开源的框架和工具。</p><p>永远保证采用最精简的方案做项目，而不是一开始就准备一大套工具和大规模的启动页，这对我们没有任何好处。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="维护整洁的代码">维护整洁的代码<a class="hash-link" href="#维护整洁的代码" title="标题的直接链接">​</a></h5><p>通常，开发一个项目，尤其是多人协作的过程中，应该遵循一定的“JavaScript”开发编码规范，这样整体代码具有相同的风格，利于后期维护，即便是再简单的项目也应该如此。</p><ul><li><p>保持代码的整洁性</p><p>JavaScript 是一种脚本语言，而且语法相对松散，编写恰当的 JavaScript 代码非常关键，最好在项目中结合单元测试使用一些格式/错误提示，而且能帮助团队编写符合规范的代码。其实，JS Hint 是这些工具中一个很好的例子。</p></li><li><p>创造可复用的函数</p><p>编程语言最大的特点就是可复用性，在开发过程中应尽可能的将有类似行为的过程操作抽象出来，形成一个可复用的函数，这样做可以大幅减少整体代码量，也能够更好的组织代码结构。</p></li></ul><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="编码规范-2">编码规范<a class="hash-link" href="#编码规范-2" title="标题的直接链接">​</a></h4><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="缩进">缩进<a class="hash-link" href="#缩进" title="标题的直接链接">​</a></h5><p>保持良好的代码缩进习惯，缩进统一使用<strong>“制表符”</strong>。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="iife">IIFE<a class="hash-link" href="#iife" title="标题的直接链接">​</a></h5><p>将代码包裹在一个 IIFE（Immediately-Invoked Function Expression，立即执行函数）中，创建独立的作用域，保证每一个人的代码不会污染全局作用域。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(function(window) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">})(window);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="严格模式">严格模式<a class="hash-link" href="#严格模式" title="标题的直接链接">​</a></h5><p>使用严格模式保证 JavaScript 代码的健壮性，严格模式可以作用于整个脚本或者一段代码块中，为了尽可能的不引起冲突，请在代码块中使用严格模式。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(function(window) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    'use strict';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">})(window);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="变量声明">变量声明<a class="hash-link" href="#变量声明" title="标题的直接链接">​</a></h5><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var a = 1,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    b = 2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var a = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var b = 2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="-与-">== 与 ===<a class="hash-link" href="#-与-" title="标题的直接链接">​</a></h5><p>比较时如果使用 <code>==</code> 的话，会忽略掉比较对象的类型，应该总是使用 <code>===</code> 进行精确的类型与值比较。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0 === '' // false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0 == '' // true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="声明提升">声明提升<a class="hash-link" href="#声明提升" title="标题的直接链接">​</a></h5><p>JavaScript 中有声明提升的机制，因为不存在块作用域，在同一个作用域中不同代码块中声明的变量与函数最终都会被提升到作用域顶层声明。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var a;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">a = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (a) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var b = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>等同于：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var a,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    b;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">a = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (a) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    b = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>因为存在声明提升的机制，所以在编码时<strong>应该</strong>将变量与函数声明写到<strong>作用域顶层</strong>。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="条件运算符">条件运算符<a class="hash-link" href="#条件运算符" title="标题的直接链接">​</a></h5><p>在逻辑比较简单时，应该使用条件运算符而不是 <code>if…else</code> 语句。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">a === 1 ? console.log('true') : console.log('false');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (a === 1) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log('true');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">} else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log('false');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="函数声明">函数声明<a class="hash-link" href="#函数声明" title="标题的直接链接">​</a></h5><p>函数的声明应该在作用域的顶层，而不是某个语句块中，因为 JavaScript 没有块作用域的概念，并且由于声明提升的原因，最好将函数声明写在作用域的顶层。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">function foo() {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if(b){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var bar = function() {};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if(b){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">function foo() {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">function bar() {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="闭包">闭包<a class="hash-link" href="#闭包" title="标题的直接链接">​</a></h5><p>JavaScript 代码中大量的使用了闭包机制，这是一个很好的机制，但是应该时刻注意闭包所带来的内存泄漏的问题。<strong>应该在使用完变量后，尽可能将不再需要使用但存在内存泄漏隐患的变量手动释放。</strong></p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="eval-函数">eval() 函数<a class="hash-link" href="#eval-函数" title="标题的直接链接">​</a></h5><p><code>eval()</code> 函数可以将字符串编译为 JavaScript 代码然后执行，但<strong>不应该使用它</strong>，一方面是效率很低，另一方面则是涉及到安全问题。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="this-关键字">this 关键字<a class="hash-link" href="#this-关键字" title="标题的直接链接">​</a></h5><p>由于 JavaScript 的词法作用域机制，以及代码中大多时候都会存在多层嵌套的函数，<code>this</code> 关键字的指向很容易被搞错，如果要在内层函数使用外层函数的 <code>this</code> 引用对象，应该使用一个变量在外层函数作用域内将其缓存起来，然后使用该变量在内层函数中进行引用。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="数组初始化">数组初始化<a class="hash-link" href="#数组初始化" title="标题的直接链接">​</a></h5><p>数组的初始化应该使用字面量而不是构造函数，构造函数的参数容易引起误会。</p><p><strong>推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var a = [3];  // [3]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>不推荐：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var a = new Array(3); // [undefined, undefined, undefined]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="引号-2">引号<a class="hash-link" href="#引号-2" title="标题的直接链接">​</a></h5><p>JavaScript 中引号统一使用<strong>“单引号”</strong>，因为这在书写 HTML 字符串模版属性时将非常有用。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="tostring">toString()<a class="hash-link" href="#tostring" title="标题的直接链接">​</a></h5><p>可以自定义 <code>toString()</code> 函数来控制对象的字符串化，但要保证该方法始终能够正确执行。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="注释-2">注释<a class="hash-link" href="#注释-2" title="标题的直接链接">​</a></h4><p>JavaScript 是一个灵活性很大的语言，那么就会带来代码维护和阅读上的困难，良好的注释会帮助我们减轻这些负担。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="文档注释-1">文档注释<a class="hash-link" href="#文档注释-1" title="标题的直接链接">​</a></h5><p>通常写在文件的开始部分，涉及文档的概述以及版本号，及其依赖等。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/*!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    jQuery v1.11.3 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    (c) 2005, 2015 jQuery Foundation, Inc. |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    jquery.org/license</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="方法注释">方法注释<a class="hash-link" href="#方法注释" title="标题的直接链接">​</a></h5><p>对于模块以及方法尤其要写明注释，这对于如何理解你的方法是至关重要的，应该遵循：<strong>为什么要写这个方法或者模块，解决了什么问题，而不是这个方法是用来干什么。</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @description "..."</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @author mrwang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @param {Jquery Object} $all_a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @returns</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="普通注释-1">普通注释<a class="hash-link" href="#普通注释-1" title="标题的直接链接">​</a></h5><p>普通注释可分为多行注释和单行注释，在必要的地方进行注释即可。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">单行：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// somethings</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">多行：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    somethings</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="流程">流程<a class="hash-link" href="#流程" title="标题的直接链接">​</a></h2><p>流程的核心是工作流。工作流指的就是把想法需求变成现实的过程，从产品的角度来看，就是修复 bug、迭代升级的一系列流程和方法。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="过去的工作流">过去的工作流<a class="hash-link" href="#过去的工作流" title="标题的直接链接">​</a></h3><p>在过去，Web 前端开发还是基于 PSD 文档编写标签和一堆页面的时代，但这个时代从几年前就已经结束了。前端开发不再只是单纯的为了做出好看漂亮的页面，而是更关注高效率开发、构建高性能应用以及快速迭代。</p><blockquote><p><strong>过去的工作流：</strong> <br>
需求 -&gt; 线框图 -&gt; 开发（设计）并行 -&gt; 前端</p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="现代的工作流">现代的工作流<a class="hash-link" href="#现代的工作流" title="标题的直接链接">​</a></h3><p>过去的工作流根据角色逐级交付，前端开发通常是在项目最后阶段才参与的，这样的流程效率很低，而且前端的参与度太低，产品最终质量无法保证。现代的工作流则是相反地，前端将参与整个项目阶段，更大程度地保证产品质量和后期迭代速度。</p><blockquote><p><strong>现代的工作流：</strong> <br>
需求 -&gt; 原型 -&gt; 开发</p></blockquote><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="需求">需求<a class="hash-link" href="#需求" title="标题的直接链接">​</a></h4><p>工作流一般从收集需求开始，现代的工作流在这个阶段，将会改变需求所面向的人群，会让交互设计、视觉设计、后端开发以及前端开发人员共同参与。这样一个来自交叉领域的团队，意味着我们将注重创建一个完整的解决方案，而不是一个大概的线框图了。<strong>来自不同领域的人员共同参与需求收集的过程，能尽早的发现需求中存在的问题和不足。</strong></p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="原型设计">原型设计<a class="hash-link" href="#原型设计" title="标题的直接链接">​</a></h4><p>以往的工作流偏向于在每个环节交付一个成品，而<strong>现代的工作流更注重在用户交互模型、视觉设计和前端解决方案中的持续迭代</strong>。</p><p>原型设计则给我们提供了讨论和反馈的公共空间，在把我们丰满的想法通过在桌面和移动端浏览器中实现之后，我们可以基于原型进行讨论、修改、增删，直到开发人员和产品负责人对原型满意，就可以进入下一步开发环节了。</p><p>相对来说，原型设计阶段实现起来成本要低得多而且更为灵活，要确保在这个阶段将产品原型确定，然后在开发环节将会节省不少时间成本。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="程序开发">程序开发<a class="hash-link" href="#程序开发" title="标题的直接链接">​</a></h4><p>实际上，在通过原型设计阶段之后，<strong>开发环节只需要关注数据处理和业务逻辑的实现即可</strong>。优秀的原型设计基本上可以直接拿来在开发环节中使用，不需要太多额外的修改，而且这对于测试人员来说也更为方便。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="前端工作流">前端工作流<a class="hash-link" href="#前端工作流" title="标题的直接链接">​</a></h3><p>前端开发是一个零散化的过程，没有专业的 IDE 工具为我们处理繁多复杂的任务，一个流畅、高效率的前端工作流显得格外重要。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="开发工具">开发工具<a class="hash-link" href="#开发工具" title="标题的直接链接">​</a></h4><p>我们要安装很多必要的工具来搭建一个适合我们的开发环节和软件运行环境，包括代码编辑器、常用浏览器、版本控制工具等等。这个过程要尽可能的流畅，这样开发人员才能更快的进入实际编码工作中。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="本地部署">本地部署<a class="hash-link" href="#本地部署" title="标题的直接链接">​</a></h4><p>进入到实际编码工作过程中，首先就是要将项目源码使用版本控制工具从版本库中下载下来，然后部署在本地，成功运行后才可以开始编码。这个过程实际上不复杂，例如，如果采用了前后端完全分离的开发/部署方案，我们可能会在前端使用一个 nginx 服务器作为代理服务器，这反而是增加了本地部署的复杂度。所以，在这个过程中，涉及到的流程中的细节必须完整的写在<strong>README.md</strong>文件中，帮助任何一个开发人员都能流畅、快速地搭建好本地环境，成功部署应用。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="开发">开发<a class="hash-link" href="#开发" title="标题的直接链接">​</a></h3><p>在开发过程中，如果需求发生了微小的变动，我们应该尽可能对系统做最小的改动来实现这个需求。<strong>通常好的做法是，加入新的实现方案，去覆盖掉原有的实现方案；而比较糟糕的做法是，在原有的实现方案上进行更改。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="发布">发布<a class="hash-link" href="#发布" title="标题的直接链接">​</a></h3><p>项目源码通常使用版本控制工具来进行管理，而编译之后的生产环境代码如何发布也是一个值得关注的问题。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="提交编译之后的代码">提交编译之后的代码<a class="hash-link" href="#提交编译之后的代码" title="标题的直接链接">​</a></h4><p>在使用的大多数 github 开源项目中，我们会发现通常会有一个<strong>dist</strong>目录，而这个目录中其实就是编译之后的代码。这样做的好处是，其它人可以很方便的将这些编译之后的代码复制到本地成功运行，而不需要经过漫长的搭建编译工具的过程。</p><p>然而，这么做也有不好的地方，其中比较重要的就是合并代码时的冲突问题，当然最简单的解决方法就是将整个项目重新编译一遍进行提交，但这也意味着不同分支将不会有合并请求。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="持续集成的服务器">持续集成的服务器<a class="hash-link" href="#持续集成的服务器" title="标题的直接链接">​</a></h4><p>使用类似 Jenkins 或 Travis CI 的服务可以避免出现以上问题，它们可以在我们将代码发布到服务器之前，先对代码做一些处理。这意味着我们可以在版本库中忽略编译后的资源文件，CI 服务器会自动执行我们的编译任务，然后将代码发布到服务器。</p><p>这样做的好处不仅可以保持代码库的整洁，也不会出现提交编译后代码合并冲突的情况。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="标签分支">标签分支<a class="hash-link" href="#标签分支" title="标题的直接链接">​</a></h4><p>Git 有个强大的功能就是创建标签分支，我们可以在任何分支上创建便签，便于我们进行选择性的发布。</p><p>例如，有时候我们创建了一个分支版本，并添加了一些功能或者修改了一些 bug，但我们并不希望将这些改动合并到主干上去，这个时候则可以在这个分支上创建标签，并进行发布即可。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="发布渠道">发布渠道<a class="hash-link" href="#发布渠道" title="标题的直接链接">​</a></h4><p>如果我们的项目被其他人的项目广泛地引用，发布渠道则是比较重要的。这些渠道有很多，下面列举一些常见的包管理器：</p><ul><li>NPM（Node Package Manager）</li><li>Bower</li><li>Ruby Gems</li><li>RPM</li><li>Sublime Text Package Control</li></ul><p>使用这些包管理器的好处如下。</p><ul><li><p>发布不同的版本</p><p>用户可以选择性的使用某一版本，而不是跟随开发者升级。</p></li><li><p>版本更新通知</p><p>良好的通知机制和内部升级系统，可以让用户很方便的获知新版本的发布信息。</p></li><li><p>从私有库中发布代码</p><p>更多的时候我们的项目源码是维护在私有库中的，包管理器允许我们将代码发布到公共空间，让更多的普通用户来使用。</p></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="任务处理器">任务处理器<a class="hash-link" href="#任务处理器" title="标题的直接链接">​</a></h3><p>对于前端开发者来说，每次修改文件都要手动刷新浏览器，验证改动效果；在生产环境中部署时，要手动使用工具压缩代码和图片，减小文件体积；没办法很好的利用语言的新特性（ES6、ES7 等）来提高编码效率等等，这些场景下的任务实际上占用了开发者大量的编码时间，去做一些与编码无关的事情，但这些事情又能很好的优化我们的应用性能或者开发工作流。</p><p>于是出现了一些任务流管理工具，例如 gulp、grunt、webpack 等等，这些任务处理器工具
实现了一些功能：</p><ul><li>清理文件夹</li><li>编译 Sass</li><li>编译 ES6、ES7 代码</li><li>合并文件</li><li>文件压缩</li><li>自动生成浏览器厂商的 CSS 属性前缀</li><li>监听文件改动自动刷新浏览器</li><li>启动静态的 Node 服务器</li></ul><p>这些任务处理器提供的功能远远不止这些，但这些都是比较常用的功能，能很好的优化我们的开发工作流。将与编码无关的事情交给任务处理器自动化处理，然后开发者专注于编码，实现业务即可。</p><p>无论选择哪一种工具，gulp 还是 grunt，实际上它们每个都能替代对方，实现所有功能，只不过配置的代码风格不同，以及优势不同。我个人比较推荐的是 gulp + webpack 相互配合来构建一个自动化的任务流，gulp 负责编译 Sass、压缩图片等任务，而 webpack 负责打包 JavaScript 模块代码，编译 JS 文件等任务。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="测试">测试<a class="hash-link" href="#测试" title="标题的直接链接">​</a></h2><p>在一个大型项目，尤其是多人参与的前端项目中，每一次提交、合并都很有可能会影响到原有的系统功能，团队开发者并不会太多地去关注这些问题，而作为一个架构师或者负责人，对于这种问题应该重视，而解决方案就是：<strong>测试</strong>。一个人并没有太多的精力和时间去评估每一段代码对原有系统所造成的影响，但可以借助自动化的测试工具来验证我们的应用程序是否能够正常的运行。</p><p>在规划测试过程中，有以下几点应该尽可能的去遵守：</p><ul><li>测试用例应该在建站的同时，甚至是在建站之前就开始编写。</li><li>测试代码是可运行的真实代码，应该一起提交到系统代码库中。</li><li>必须在所有的测试用例都通过之后，才能把代码合并到主干中。</li><li>在主干上运行测试工具，结果应该都为通过。</li></ul><p>因此，与其将时间花费在评估每一段代码上，不如去关注如何构建高质量的系统和完整的测试。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="单元测试">单元测试<a class="hash-link" href="#单元测试" title="标题的直接链接">​</a></h3><p>单元测试是最普遍、最常见的软件测试方法，是将应用程序分解为尽可能小的函数，并创建可重复的、自动化的测试用例的过程。在条件不变的情况下，单元测试应该总是产生相同的结果，它为今后所有应用程序的代码提供构建的基础。</p><p><strong>如果没有单元测试，不常用的函数可能长达数月都不会被发现有 bug；相反，通过使用单元测试，我们可以在任何代码合并到主干之前就验证每个系统函数的功能，不会等到代码实际应用的产品中时还会出现问题。</strong></p><p>无论是前端还是后端语言，都有一套成熟完整的单元测试框架，例如 Java 的 JUnit，PHP 的 PHPUnit，Node 的 NodeUnit 以及 JavaScript 的 QUnit。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="单元">单元<a class="hash-link" href="#单元" title="标题的直接链接">​</a></h4><p><strong>“一次只做一件事，并把它做好”是构建基于单元测试的应用程序的原则。</strong>开发者在写函数时，应该尽可能的抽象、分解成更小的函数单元，如果在一个函数中融入太多的业务逻辑以实现更多的功能，这样不仅开发效率降低，而且增加了测试和维护的难度，因为这样的函数无法复用。</p><p>这有一个例子：通过客户地址，计算出将产品从最近的分拨中心运输给客户的运费。</p><p>如何编写函数来实现这个功能，并将其分解为更小的单元，一般可以将其分解为以下三步，也就是三个函数单元：</p><ol><li>根据地址找到最近的分拨中心；</li><li>计算两个地址之间的距离；</li><li>根据距离计算运费。</li></ol><p>这样的话，编写三个函数要比编写一个函数来实现这个功能好得多，因为 2、3 步的函数复用的概率是相当大的，这样也符合“一次只做一件事，并把它做好”的理念。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="更好的测试">更好的测试<a class="hash-link" href="#更好的测试" title="标题的直接链接">​</a></h5><p><strong>在测试过程中，我们可以测试每个独立且可重用的函数，而不是测试应用程序所能计算的每一条运输线路。</strong>编写单元测试在开发的前期可能显得工作量变大了，但这为避免以后产品上线出现大量 bug 来说是值得的；而且越到后期，开发新功能所需要的新函数会越来越少，有大量可复用的函数提供给我们来实现新的、高复杂度的功能。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="测试驱动的开发tdd">测试驱动的开发（TDD）<a class="hash-link" href="#测试驱动的开发tdd" title="标题的直接链接">​</a></h4><p>通常来说，我们的思路应该是先编写业务代码，再去编写测试代码。但测试驱动的开发（test-driven development，TDD）则颠倒了这一思路，它将单元测试放在第一位，之后才是编写业务代码。</p><p>但如果为还没有创建的函数编写测试用例，岂不是肯定无法通过测试？实际上，<strong>测试驱动的开发的目标是，通过测试用例来描述一个正确编写的系统应如何工作，并为实现这个系统来铺平道路。</strong>所以，这样反而会提高编写业务代码的效率。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="如何进行单元测试">如何进行单元测试<a class="hash-link" href="#如何进行单元测试" title="标题的直接链接">​</a></h4><p>我们可以使用 QUnit 来为 JavaScript 进行单元测试。单元测试的核心理念非常简单，它的基本思路就是调用要测试的函数，传递一些预设的参数，并描述结果应该是什么。</p><p>根据单元测试工具反馈的结果，我们可以及时修复应用程序中出现的 bug，并能以比较细小的粒度获取到出现 bug 的精确位置。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="测试覆盖率">测试覆盖率<a class="hash-link" href="#测试覆盖率" title="标题的直接链接">​</a></h4><p>一个产品的开发过程中，实际上很难做到 100% 的测试覆盖率（大多数的产品都不是基于 TDD 的开发模式），在这种情况下做到多少测试覆盖率才合适也是很难把握的一件事。如果要测试所有的代码，很可能将会导致开发进度停滞不前；但同样地，测试覆盖率不够，将会遗漏很多关键性问题。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="解决分歧点">解决分歧点<a class="hash-link" href="#解决分歧点" title="标题的直接链接">​</a></h5><p>为已有的项目设计单元测试，大部分情况下，你没有充足的时间为先有的功能编写 100% 覆盖率的测试集。但测试覆盖率的好处是，即使一个单一的测试也能够为系统建设贡献价值。因此，在决定从哪开始编写单元测试时，可以从能够获得最大收益的地方开始。<strong>有时候，最大的收益就是为系统最简单的部分编写单元测试。</strong></p><p>一旦有了能提供基本覆盖率的测试集，就可以寻找系统中最关键的部分，或者过去频繁出问题的部分，在需求列表中为它们分别创建需求，并确保尽快推动这些需求。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="从测试覆盖率开始">从测试覆盖率开始<a class="hash-link" href="#从测试覆盖率开始" title="标题的直接链接">​</a></h5><p><strong>如果能在新项目的启动阶段就开始规划单元测试工作，除了设置好测试框架之外，更重要的是要确保开发流程本身为单元测试做好了准备。</strong>就像写文档和代码审核一样，写单元测试也要花费不少时间，你需要确保任何需要测试的需求都有额外的时间来编写单元测试，并且确认所需的测试覆盖率。</p><p>在开发每个系统功能的过程中，应该至少留出 1/3 到 1/4 的时间来编写测试用例，剩下的时间则用来实现业务代码。所以作为一个前端架构师应该争取更多的时间，虽然会花费多一点的时间，但是这其实会节省很多后续回头追查 bug 的时间。</p><p>并不是所有的功能都需要同样的测试覆盖率，但所有的需求都是以测试覆盖率的相关任务开始的，只有当所有人都认为给这些任务写测试用例没有必要时，才考虑去掉它。这样我们才能确信，对于任何需要测试的功能，都已经安排了足够的时间去完成它们。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="性能测试">性能测试<a class="hash-link" href="#性能测试" title="标题的直接链接">​</a></h3><p>任何测试都是为了避免不流畅的用户体验，而网站是严重依赖于网络的，鉴于网络情况浮动较大，糟糕的网站性能正是导致用户体验不流畅的主要原因之一。性能测试虽然不是针对系统或视觉问题的测试，却也是测试库的重要组成部分。</p><p><strong>性能测试衡量的是影响用户使用网站的流程程度的关键指标，包括页面大小、请求数量、首字节时间（time of first bite，TTFB）、加载时间和滚动性能等等。</strong></p><p>性能测试的关键是制定合适的性能预算并坚持下去。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="制定性能预算">制定性能预算<a class="hash-link" href="#制定性能预算" title="标题的直接链接">​</a></h4><p>制定性能预算是指为每个关键指标设定目标值，然后在所有代码合并或部署之前持续测试这些指标。若有任何一个指标没通过测试，则需要调整新增的功能，或删除一些其它功能。</p><p>作为一个前端开发者，很多人习惯了使用例如 JQuery、BootStarp、Angular 等库和框架，一旦离开这些工具，就觉得开发工作无法进行下去。但这些工具通常非常耗费流量资源，会显著的增加应用程序大小，实际上我们用到这些工具提供的功能可能连三分之一都不到。<strong>所以，用最简洁的方案实现我们的需求是首要选择。</strong></p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="竞争基线">竞争基线<a class="hash-link" href="#竞争基线" title="标题的直接链接">​</a></h5><p>制定性能预算的一种方法是参考竞争对手。虽然“至少我比某某更好”不能作为网站性能不佳的借口，但是这种方法可以保证你有一定的竞争优势。</p><p>通过对竞争对手的网站性能进行分析，你的目标不是要达到竞争对手的水平，而是要确保领先竞争对手至少 20% 甚至更多。<strong>这 20% 的优势，是用户将你和竞争对手区分开来所需要的。</strong></p><p>优化关键指标不能一劳永逸，它需要的是持续监控。可以确定的是，在你进行不断的优化过程中，你的竞争对手也不会坐以待毙，他们也在寻找更优的方法来改善他们自己的网站。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="平均基准">平均基准<a class="hash-link" href="#平均基准" title="标题的直接链接">​</a></h5><p>不管你的竞争对手是谁，把你的网站性能基线与行业平均水准和通用的最佳实例相比较总是必不可少的。<strong>我们没有理由因为竞争对手的落后而保持平庸。</strong></p><blockquote><p><a href="http://httparchive.org/" target="_blank" rel="noopener noreferrer">HTTPArchive</a> 是个不错的服务，它测试并记录了几十万个网站的各种性能指标。</p></blockquote><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="原始指标">原始指标<a class="hash-link" href="#原始指标" title="标题的直接链接">​</a></h4><p>网站性能最基本的测试是看渲染页面所需要的资源，包括这些资源的大小和总数。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="页面大小">页面大小<a class="hash-link" href="#页面大小" title="标题的直接链接">​</a></h5><p>随着网络的发展，用户需求的提升，网站页面正在变得越来越大。虽然网站大小并非影响网站加载速度的唯一因素，但它确实对此影响重大。而且，在现在移动优先的时代，越来越多的用户通过移动设备来访问我们的网站，而他们要为数据流量付费，页面越大则意味着用户要花更多的钱。</p><p>我们一些显而易见的地方缩减页面的大小：</p><ul><li><p>图片</p><ul><li>优化 PNG 图片，降低 JPEG 图片的质量。</li><li>利用新的响应式的 <code>&lt;picture&gt;</code> 标签和 <code>srcset</code> 属性来下载大小合适的图片。</li><li>制定一个预算，如果没有移除任何图片，就不增加图片的大小。</li></ul></li><li><p>自定义字体</p><ul><li>制定一个字体预算，不考虑增加第二种或第三种字体。</li><li>考虑必要的字体粗细，因为每增加一种粗细变化，都会使字体文件增加几千个字节。</li><li>虽然字体图标不错，但要注意文件大小，尽可能只引入需要的字体文件，不要将全部的字体文件引入。</li></ul></li><li><p>JavaScript 库和框架</p><ul><li>针对现代浏览器，尽可能的不要使用 JQuery，因为它的文件非常的大。</li><li>能用 CSS 实现的一些效果，不要引入其它的 JS 插件来实现。</li><li>像 Angular 这样大型的框架，要慎重考虑，如果可以使用更轻的框架例如 React 来实现你的需求，则要进行替换。</li><li>CSS 框架很多，但实际上框架提供的样式我们能使用到的并不多，而且基于已有的 CSS 样式表来编写我们自己的样式很可能会陷入困境。</li></ul></li><li><p>使用压缩</p><ul><li>对文件和图片进行压缩，在服务器上开启 gzip 压缩，这些都是缩减页面大小的关键步骤。</li></ul></li></ul><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="http-请求次数">HTTP 请求次数<a class="hash-link" href="#http-请求次数" title="标题的直接链接">​</a></h5><p>浏览器对页面渲染的所需的每个文件都要进行 HTTP 请求。<strong>因为每个浏览器对 HTTP
请求的次数有但域名限制，所以大量单独的文件意味着浏览器必须进行多轮并发请求。</strong>在速度较慢的网络环境中，这么多并发请求会造成很复杂的影响。因此，减少获取所需文件的并发请求次数，效果会更显著。</p><p>可以通过以下方法减少并发请求次数：</p><ul><li><p>减少 HTTP 请求次数</p><ul><li>将多个单独的 CSS、JavaScript 文件合并成一个文件。</li><li>把多个单独的图片文件合并成一个图片。</li><li>延迟加载最初不需要加载的资源文件。</li></ul></li><li><p>增加浏览器每次并发请求的资源个数</p><ul><li>分拆静态资源到不同的服务器（CDN），可以使得浏览器单次并发下载更多的资源，因为浏览器的并发请求数量限制是针对单个服务器的。</li></ul></li></ul><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="计时度量">计时度量<a class="hash-link" href="#计时度量" title="标题的直接链接">​</a></h4><p>除了站点的资源数量和大小，还有其他的计时度量会影响用户对网站性能的体验。</p><ul><li><p>首字节时间</p><p>首字节时间是指从浏览器请求网站页面开始，到浏览器接收到第一个字节之间的毫秒数。这个数值用来测量浏览器和服务器之间的连通路径，包括 DNS 查询、初始连接和数据接收。它并不是判断站点性能的最佳标准，却是一个值得关注的指标。</p></li><li><p>开始渲染时间</p><p>更有价值的计时度量是“开始渲染时间”。这个度量是指用户开始在页面上看到内容的时间。这意味着所有阻塞渲染的文件都已经加载完成，浏览器已经开始渲染文档模型了。可以通过以下方式优化开始渲染时间：延迟加载阻塞渲染的 JavaScript 和 CSS 文件、将关键的 CSS 代码内联到页面头部、用数据 URI 代替图片资源，以及延迟加载所有在文档模型渲染完成后才下载的资源。</p></li><li><p>文档完成时间</p><p>只要最初请求的资源已经加载成功，就可以认为文档“完成”了。文档完成时间不包括 JavaScript 中拉取资源消耗的时间，因此延迟加载的资源不会影响到这个指标。</p></li></ul><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="混合度量标准">混合度量标准<a class="hash-link" href="#混合度量标准" title="标题的直接链接">​</a></h4><p>混合度量标准不是度量离散的值，而是根据多个性能指标综合打分得出。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="pagespeed-分数">PageSpeed 分数<a class="hash-link" href="#pagespeed-分数" title="标题的直接链接">​</a></h5><p><a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener noreferrer">PageSpeed</a> 是 Google 开发的网站工具和 Chrome 浏览器的扩展程序，用来分析站点的性能和网站的可用性，它给出一个用百分比表示的分数，并解释了提高分数的方法。测试包括：</p><ul><li>是都存在阻塞渲染的 JavaScript 或者 CSS</li><li>重定向至登录页</li><li>图片优化</li><li>文件压缩</li><li>服务器响应时间</li><li>服务器端压缩</li><li>服务器端缓存</li><li>点击目标的大小</li><li>窗口可见区域的配置</li><li>清晰的字体大小</li></ul><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="speed-index-指标">Speed Index 指标<a class="hash-link" href="#speed-index-指标" title="标题的直接链接">​</a></h5><p>根据 Speed Index 项目主页上的描述，<a href="https://sites.google.com/a/webpagetest.org/docs/using-webpagetest/metrics/speed-index" target="_blank" rel="noopener noreferrer">Speed Index</a> 指的是页面可见部分展示完成的平均时间，该指标通过用毫秒表示，并取决于视图端口的大小。</p><p>混合度量标准的分数考虑了上述多个单一的度量标准，并将这些标准和页面加载时用户可以实际看到的标准结合起来。Speed Index 是度量终端用户实际体验的最好标准之一。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="设置性能测试">设置性能测试<a class="hash-link" href="#设置性能测试" title="标题的直接链接">​</a></h4><p>性能测试涉及的指标繁多，我们不可能也不愿意去手动进行测试，我们可以借助一些自动化工具插件来完成这些工作，例如 Grunt PageSpeed 插件，Grunt PerfBudget 插件。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="视觉还原测试">视觉还原测试<a class="hash-link" href="#视觉还原测试" title="标题的直接链接">​</a></h3><p>对于前端开发者来说，尽可能的高度还原 Photoshop 设计稿是我们的责任，也是评价我们工作的一项重要因素。在一个多人合作的团队中，很有可能会出现这种情况：一段时候后你发现原来已经做好的界面却出现了问题，于是你开始调整。但是，这样的情况会频繁的反复发生，其中很大一部分原因在于项目过大，团队开发者过多，很难让普通开发者去关注整个系统的设计，往往就会出现一个人写的样式影响了另一个人写的样式，从而导致界面发生变化。</p><p>因此，确保每一次的提交、合并都不会影响已经完成的界面效果是至关重要的，除了提高开发者的专业素养之外，我们需要进行视觉还原测试来帮助我们解决这个问题。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="常见的质疑">常见的质疑<a class="hash-link" href="#常见的质疑" title="标题的直接链接">​</a></h4><p>为何已经完成的页面界面会在后来发生变化，通常有这么几种原因：</p><ul><li><p>不了解情况的开发者</p><p>即使你的代码完美无缺，但很难确保和你同步进行开发的其他人，或者说后期维护的开发者，他们写的 CSS 类名、样式不会影响到你写的代码。</p></li><li><p>不一致的设计</p><p>通常一个比较大型的项目中，Photoshop 设计稿文件也非常得多，如果后期发生了一些全局性的细微变动，很难确保设计师会将变动更新到每一个文件，这就会出现不一致的设计稿。</p></li><li><p>举棋不定的决策者</p><p>通常来说，改动是不可避免的，但是如果决策者仔细研究足够多的功能，进而频繁的进行改动，一次又一次的进行原型开发会大大降低开发效率，原型开发应该是基于设计快速迭代之后的最终设计稿做出。</p></li></ul><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="一个经过测试的解决方案">一个经过测试的解决方案<a class="hash-link" href="#一个经过测试的解决方案" title="标题的直接链接">​</a></h4><p>以上的场景中都突出了更深刻的组织层面的问题，它们可以通过适当的测试覆盖率来缓解。我们不去测试 JavaScript 函数的有效返回结果，而是抓取已授权的设计系统的视觉外观，从而验证我们没有偏离该系统。在提交之前抓取这些视觉还原是保证设计系统一致性的关键。</p><p>视觉还原测试让我们可以将正在开发的版本或者即将部署的版本（新版本）与正确的版本（基线版本）进行视觉对比。这个过程只不过是抓取基线版本的截图，与最新版本进行对比，并找出像素层面的差异。</p><p>通过把这些基线图片提交到仓库，或者在测试库里将其标记为通过，我们就对任何特定的功能在像素级别的视觉表现有了签名确认并一致认同的核对记录。在任何代码提交到主分支之前，视觉还原测试提供了一种测试网站所有功能的方法，以确保没有出乎意料的视觉改变。</p><p>这样，我们通常也会分辨出到底是设计师更新设计稿的疏忽还是正常的需求变更。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="视觉还原测试的多面性">视觉还原测试的多面性<a class="hash-link" href="#视觉还原测试的多面性" title="标题的直接链接">​</a></h4><p>借助于多种技术和流程，视觉还原测试可以有多种风格。虽然新的工具不断地被发布到开源社区，但他们通常是一小部分功能的组合。大多数工具可以归属为以下几类。</p><ul><li><p>基于页面的比较</p><p><a href="https://github.com/BBC-News/wraith" target="_blank" rel="noopener noreferrer">Wraith</a> 是一个基于页面的比较的例子。它使用 YAML 作为设置文件，因此可以很轻松地比较来自两个不同来源的一大串页面列表。当你不期望两个不同来源的页面有任何差异时，比如需要比较线上页面和在工作中即将部署的页面时，这个方法会很合适。</p></li><li><p>基于组件的比较</p><p><a href="https://github.com/garris/BackstopJS" target="_blank" rel="noopener noreferrer">BackstopJS</a> 在基于组件或者基于选择器的比较方面，是一个绝佳的选择。基于组件的比较工具使你可以抓取独立的页面片段进行对比，这样可以写出更有针对性的测试，并防止误报。</p></li><li><p>CSS 单位测试</p><p><a href="https://github.com/jamesshore/quixote" target="_blank" rel="noopener noreferrer">Quixote</a> 是一类比较独特的比较工具，用于比较 CSS 单位的差异，而不是视觉上的差异。Quixote 可以设置 TDD 模式的测试用例，这些用例会设置好预期的 CSS 数值（比如字体大小为 1em，侧边栏的内边距是 2.5%），然后检测页面是否满足这些条件。它还可以诊断页面是否遵守品牌的视觉规范，比如 logo 的尺寸是否正确，以及 logo 与其它内容是否保持恰当的距离。</p></li><li><p>基于无头浏览器的测试</p><p><a href="https://github.com/gemini-testing/gemini" target="_blank" rel="noopener noreferrer">Gemini</a> 是一款可以使用无头浏览器 <a href="http://phantomjs.org/" target="_blank" rel="noopener noreferrer">PhantomJS</a> 的比较工具，它可以在抓取截图之前加载 Web 页面。PhantomJS 是 JavaScript 实现的 WebKit 内核的浏览器，这意味着它速度非常快，并且具有跨平台的一致性。</p></li><li><p>基于桌面浏览器的测试</p><p>Geimin 非常独特，它支持在在传统的桌面浏览器上运行测试用例。为了达到这个目的，Gemini 使用 <a href="http://docs.seleniumhq.org/download/" target="_blank" rel="noopener noreferrer">Selenium</a> 服务器打开并操作系统中安装的浏览器。这种方式没有基于无头浏览器的方式快，而且也受到系统安装的浏览器版本的影响。但是它更接近真实情况，并且可以发现某个特定浏览器引入的 bug。</p></li><li><p>包含脚本库文件</p><p><a href="http://casperjs.org" target="_blank" rel="noopener noreferrer">CasperJS</a> 是一个导航脚本库，可以和 PhantomJS 等无头浏览器协同工作。该工具可以和在浏览器中打开的页面进行交互。使用它，你可以点击按钮，等待模态窗口，填充并提交表单，最终对结果进行截图。CasperJS 还可以在 PhantomJS 打开的页面中执行 JavaScript，你可以隐藏元素、关掉动画，甚至还可以使用静态模拟内容替换掉动态真实内容。</p></li><li><p>基于图像用户界面的比较工具，支持更改确认</p><p><a href="https://github.com/diffux/diffux" target="_blank" rel="noopener noreferrer">Diffux</a> 项目存储了测试历史数据，并可以在基于 Web 的用户界面中提供测试结果的反馈。基准图像存储在数据库中，任何对它的改动都必须在该应用界面中标记为接收或者拒绝。</p></li><li><p>基于命令行的比较工具，支持更改确认</p><p><a href="https://github.com/Huddle/PhantomCSS" target="_blank" rel="noopener noreferrer">PhantomCSS</a> 是一款基于组件的比较工具，借助于 PhantomJS 和 CasperJS，它可以仅通过命令行来运行。测试是通过命令行终端运行的，无论测试是否通过，其结果都会输出到命令行终端里。这种类型的工具尤其适合通过 Grunt 或者 Gulp 运行，而其输出也很适合 Jenkins 或者 Travis CI 等自动化工具。</p></li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="文档">文档<a class="hash-link" href="#文档" title="标题的直接链接">​</a></h2><p>前端项目日益变得复杂，但这并不是一件坏事，只是说前端在快速的发展过程中也出现了许多问题。</p><p>前端开发不像服务器端，桌面端开发一样，后者无论是使用 Java、PHP 还是 C++ 等语言开发，其语言本身就提供了很清晰的类式结构特性，而且框架发展成熟，因此将一个复杂的功能需求代码拆分、抽象从而实现可重用看起来都是很平常的事情；然而，前端开发却不一样，长期夹杂于 JSP 与 PHP 页面的前端代码要实现这些其实要困难的多。那么，随之而来的问题就是，庞大的前端项目没有清晰的代码结构，没有清晰的开发文档，导致后期维护的工作量可想而知。</p><p>不过，随着前端的发展，现今普遍采用了前后端完全分离的开发模式，页面由 JSP 与 PHP 这些夹杂着后端逻辑的页面转变为纯粹的 HTML 页面，为前端的代码拆分、抽象从而实现可复用提供了更多的可能性。与此同时，前端的框架也层出不穷，参考服务器端的开发模式，为前端如何规划项目结构和撰写文档提供了基石。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="何为文档">何为文档<a class="hash-link" href="#何为文档" title="标题的直接链接">​</a></h3><p><strong>文档是系统化设计的蓝图。没有文档，我们将难免重复解决已经解决过的问题，而且花大量时间查看代码来寻找最简单的答案。</strong>没有文档，对新员工也很不友好，没有办法让其快速融入项目组。</p><p>写文档是开发工作的一部分，而不是等重要工作完成之后才开始的事情。</p><p>文档不只是简单地写下代码如何工作，但其主要作用记录我们的开发过程以及开发的代码是如何工作的，帮助其他开发者更好地理解我们所开发的代码。</p><p>文档有多种形式，其中有很多只有在架构支持时才能成型。虽然有些文档只是用于描述每个函数的普通文本，但这种文档的背后往往有一套基于搜索、导航和视觉呈现的构建系统。其他的文档用于展示系统的资源，由我们所写的样式、脚本、模版和模式来驱动。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="静态文档">静态文档<a class="hash-link" href="#静态文档" title="标题的直接链接">​</a></h3><p><a href="https://github.com/trulia/hologram" target="_blank" rel="noopener noreferrer">Hologram</a> 是基于 Ruby 的通用文档工具，支持 CSS、Sass、JavaScript 文件中内联注释、块注释，而且其注释可以使用 Markdown 格式，从而生成静态的 HTML 页面文档，功能比较全面和强大。</p><p><a href="http://sassdoc.com" target="_blank" rel="noopener noreferrer">SassDoc</a> 是基于 Node 的系统文档工具，它宣称 “SassDoc 对于 Sass 的意义，就像 JSDoc 对于 JavaScript 的意义一样”，而且它的确如此！如果你正在构建一个大型的 Sass 框架，或者复杂的栅格或者颜色系统，SassDoc 正是你想要的工具。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="代码驱动的文档">代码驱动的文档<a class="hash-link" href="#代码驱动的文档" title="标题的直接链接">​</a></h3><p>Pattern Lab 是多平台模式库工具，它可以使你模块化地开发设计系统，并将模板和 CSS 转换成可浏览的模式库。在模块化的系统中，你可以先开发每个单独的模式片段，然后通过组合这些片段产生更复杂的模式。可预览的组件库是开发者、设计师、用户体验师、质量工程师和产品所有者聚在一起时可以使用的完美工具。它为设计系统中每个部分创建了一门通用的语言和稳定的参照系。</p><p>JSON 模式是用于描述数据格式的语言，同时也可以说明数据的验证方式。在前端架构的领域中，可以用 JSON 模式来描述模板和模式所需要的数据。JSON 超模式甚至可以描述能够通过 HTTP 协议与设计系统交互的方法，包括验证、渲染和测试。JSON 超模式是一种代码驱动的文档工具，因为它提供了验证和驱动编辑工具的功能。JSON 模式还提供了可读性很强的系统手册，取代了开发者实现一个功能所需的一大堆手写说明。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《前端架构设计》- Micah Godbolt 著</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>程序架构设计</category>
        </item>
        <item>
            <title><![CDATA[Nginx 配置]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Nginx/nginx-config</link>
            <guid>/Computer-Technology/Nginx/nginx-config</guid>
            <pubDate>Thu, 15 Mar 2018 12:38:00 GMT</pubDate>
            <description><![CDATA[Nginx 作为一个轻量、高性能的服务器，近年来颇受欢迎，无论是生产环境还是开发环境都有其发挥作用的地方，其配置文件相对来说还是较为简单的。而且，现在 nginx 也支持 Windows 环境了，利用不同的配置可以满足我们不同的需求。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2020-12-02 01:19:00 </em></p></blockquote><p><strong><u>建议主要参考官网英文文档。</u></strong></p><p>具体指令直接可以在官网文档的 Alphabetical index of directives（按字母顺序排列的指令索引）中搜索即可。</p><blockquote><p>官方文档：<a href="http://nginx.org/en/docs/" target="_blank" rel="noopener noreferrer">http://nginx.org/en/docs/</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="nginx">Nginx<a class="hash-link" href="#nginx" title="标题的直接链接">​</a></h2><p>Nginx 是一位俄罗斯开发者（伊戈尔·赛索耶夫）开发的服务器，于 2004 年 10 月 4 日公开发布。Nginx 的优势在于轻量级和高性能，尤其是高并发的场景下，相对其它服务器来说表现比较好，因此现在颇受欢迎。Nginx 通常运行在 Unix/Linux 环境下，当然现在官方也发布了 Windows 环境下的应用，不过性能有所降低，这是受限于系统环境的影响。</p><p>Nginx 在生产环境下的应用场景通常作为负载均衡的前端服务器，对请求进行分发，实现极高的并发量。当然，在开发环境下，nginx 也可以作为一个工具来使用，提供给我们极大的便利，例如利用反向代理来实现前后端的完全分离开发。</p><p>Nginx 的架构被设计为模块化，从官方文档我们就可以明显的看出来，相应的配置需要在对应的模块中去查找。默认安装的情况下，官方文档中的所有模块并不会被全部安装，只会安装大部分满足常用需求的模块，至于一些特殊需求所要用到的模块，可以自己手动编译安装，当然模块化的好处就是可以自己开发模块来扩展 nginx 的功能。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="nginx-特定场景下的配置">Nginx 特定场景下的配置<a class="hash-link" href="#nginx-特定场景下的配置" title="标题的直接链接">​</a></h2><p>不管 nginx 基于什么场景发挥什么作用，都是基于特定的配置来实现，nginx 的配置文件也相对比较简单。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="工作进程">工作进程<a class="hash-link" href="#工作进程" title="标题的直接链接">​</a></h3><p>Nginx 是基于异步非阻塞 IO 模型的，同时也支持多进程，通常将其工作进程数目设置为 CPU 的核心数，以发挥其最大作用，实现高并发。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    worker_processes  4;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个配置是写在配置文件顶部的，其值也可以为 <code>auto</code>。</p><blockquote><p>官网文档：<a href="http://nginx.org/en/docs/ngx_core_module.html#worker_processes" target="_blank" rel="noopener noreferrer">Core functionality/worker_processes</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="隐藏-nginx-版本号">隐藏 nginx 版本号<a class="hash-link" href="#隐藏-nginx-版本号" title="标题的直接链接">​</a></h3><p>隐藏掉版本号，可以降低被攻击的风险。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">http {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server_tokens off;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>官网文档：<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#server_tokens" target="_blank" rel="noopener noreferrer">ngx_http_core_module/server_tokens</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="设置编码">设置编码<a class="hash-link" href="#设置编码" title="标题的直接链接">​</a></h3><p>通常来说，将编码设置为 <code>UTF-8</code> 是比较合适的。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">server {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    charset utf-8;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>官网文档：<a href="http://nginx.org/en/docs/http/ngx_http_charset_module.html#charset" target="_blank" rel="noopener noreferrer">ngx_http_charset_module/charset</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="更改上传数据大小限制">更改上传数据大小限制<a class="hash-link" href="#更改上传数据大小限制" title="标题的直接链接">​</a></h3><p>Nginx 默认的数据上传大小为 2M，某些情况下我们需要将其更改的大一些，以符合业务需求。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">server {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    client_max_body_size 20m;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>官网文档：<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size" target="_blank" rel="noopener noreferrer">ngx_http_core_module/client_max_body_size</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="开启-gzip">开启 gzip<a class="hash-link" href="#开启-gzip" title="标题的直接链接">​</a></h3><p>开启 gzip 压缩可以在客户端请求文本文件时，将传输大小压缩至少<strong>70%</strong>左右，可以获得非常好的优化效果，通常都会开启 gzip 压缩配置。</p><div class="language-nginx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-nginx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">http {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # gzip</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    gzip                on;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    gzip_min_length     20;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    gzip_buffers        4 16k;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    gzip_comp_level     6;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    gzip_types          text/plain text/xml text/css text/javascript application/x-javascript application/javascript application/json;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    gzip_http_version   1.0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    gzip_disable        "MSIE [1-6]\.";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    gzip_proxied        off;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    gzip_vary           on;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其中有几个配置需要特别注意：</p><ul><li><p><code>gzip_min_length</code></p><p>文件大小小于该值的文件将不会被压缩，大于此值时才会被压缩。</p></li><li><p><code>gzip_buffers</code></p><p>设置用于处理请求压缩的缓冲区数量和大小。比如 <code>32 4K</code> 表示按照内存页（one memory page）大小以 4K 为单位（即一个系统中内存页为 4K），申请 32 倍的内存空间。通常默认即可。</p></li><li><p><code>gzip_comp_level</code></p><p>设置压缩级别，值为 1-9。压缩级别越高，压缩效果越好，但同时越耗费时间和 CPU 性能，所以通常设置为 6 即可。</p></li><li><p><code>gzip_types</code></p><p>设置要压缩的文件 MIME 类型，默认包含 <code>text/html</code>。gzip 只对文本文件的压缩效果较好，不建议设置非文本文件。</p></li><li><p><code>gzip_http_version</code></p><p>设置要进行压缩的 http 协议版本，默认设置为 1.0 即可，因为 nginx 和后端服务器（Server）默认采用 HTTP/1.0 进行通信的，防止出现不压缩的情况。</p></li></ul><blockquote><p>官网文档：<a href="http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip" target="_blank" rel="noopener noreferrer">ngx_http_gzip_module</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="路由匹配规则">路由匹配规则<a class="hash-link" href="#路由匹配规则" title="标题的直接链接">​</a></h3><p>nginx 像一个路由，客户端通过什么地址访问服务器，服务器则在配置文件中通过设置好的路由来匹配请求进行转发。</p><p>nginx 的匹配规则分为 3 类：</p><ul><li>正则匹配：由 <code>~</code>（不忽略大小写） 和 <code>~*</code>（忽略大小写）开头</li><li>精确匹配：由 <code>=</code> 开头</li><li>前缀匹配：由 <code>^~</code> 开头或没有任何字符的规则</li></ul><p>匹配顺序：<strong>首先检查精确匹配，匹配到则终止；其次，检查前缀字符串匹配，匹配到时，若是以 <code>^~</code> 开头的则终止，否则继续进行正则匹配；最后，检查正则匹配，顺序为配置文件中书写顺序（从上到下），匹配到第一条则终止，若没匹配到，则以匹配到的前缀匹配规则为最终结果。</strong></p><div class="language-nginx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-nginx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 精确匹配，加速 / 请求的处理</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">location = / {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 前缀匹配，处理一些需要缓存的静态资源</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">location ^~ /static/ {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    root    /Data/static/;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    expires 7d;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 正则匹配，处理静态资源</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">location ~* \.(html|js|css|png|jpg|jpeg|gif|json|ico|otf|eot|svg|ttf|woff|woff2|map)$ {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    root /Data/webapps/;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 前缀匹配，默认处理（可以做反向代理，处理动态资源请求）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">location / {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    proxy_pass  http://127.0.0.1:8080;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在非精确匹配的规则内部是可以嵌套 <code>location</code> 规则的。</p><blockquote><p>官网文档：<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#location" target="_blank" rel="noopener noreferrer">ngx_http_core_module/location</a></p></blockquote><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="调试技巧">调试技巧<a class="hash-link" href="#调试技巧" title="标题的直接链接">​</a></h4><p>nginx 本身是比较难调试的，不过在配置 <code>location</code> 指令时，可以利用 <code>return</code> 指令来进行调试。</p><div class="language-nginx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-nginx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">location /test/ {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> return 600;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此时若访问 <strong>/test/</strong> 路径，可以看到响应码为 <code>600</code> 时，说明路径匹配成功。同时，可以添加一些辅助文本信息：</p><div class="language-nginx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-nginx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">location /test/ {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> default_type text/html;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> return 600 'Hello';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>官网文档：<a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#return" target="_blank" rel="noopener noreferrer">ngx_http_rewrite_module/return</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="虚拟目录">虚拟目录<a class="hash-link" href="#虚拟目录" title="标题的直接链接">​</a></h3><p>虚拟目录解决了客户端请求资源的 <strong>URL</strong> 与服务器端对应资源存在位置不一致的问题。如下所示：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 虚拟目录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">location /static/ {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    alias /DataDisk/resources/;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 这样，客户端发送 example.com/static/bg.png 的请求实际映射到了服务器端 /DataDisk/resources/bg.png 的资源上</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>URL</strong> 作为统一资源定位符，代表的是资源所在的真实网络位置，但在某些情况下，出于安全性、降低逻辑复杂性等因素的考虑，给客户端提供一个虚拟目录可能更好，这个时候使用 <code>alias</code> 指令就可以实现。</p><p>作为对比，我们使用 <code>root</code> 指令通常指定的是真实目录。如下所示：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 真实目录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">location /static/ {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    root /DataDisk/resources;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 这样，客户端发送 example.com/static/bg.png 的请求实际映射到了服务器端 /DataDisk/resources/static/bg.png 的资源上</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看出，<code>root</code> 指令通常适合用在资源路径完全真实存在的情况下，而 <code>alias</code> 指令则更适合用在资源路径前缀部分不是真实存在的情况下。</p><blockquote><p>官网文档：<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#alias" target="_blank" rel="noopener noreferrer">ngx_http_core_module/alias</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="文件列表浏览">文件列表浏览<a class="hash-link" href="#文件列表浏览" title="标题的直接链接">​</a></h3><p>静态资源服务器一般允许用户查看服务器上的文件列表，例如 CDN、镜像站等。nginx 出于安全考虑，默认是不允许客户端浏览器查看服务器上的文件列表的，可以通过以下指令来进行配置：</p><div class="language-nginx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-nginx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">location /static/ {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    autoindex on;               # 开启客户端文件列表浏览</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    autoindex_exact_size off;   # 默认显示的文件确切大小，单位 b，关闭后自动计算 KB/MB/GB 等</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    autoindex_localtime on;     # 文件的改动时间以服务器时间为准</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>官网文档：<a href="http://nginx.org/en/docs/http/ngx_http_autoindex_module.html" target="_blank" rel="noopener noreferrer">ngx_http_autoindex_module</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="允许跨域">允许跨域<a class="hash-link" href="#允许跨域" title="标题的直接链接">​</a></h3><p>有时候，比较大（几百兆以上）的静态资源需要在客户端使用异步方式加载（例如 Ajax），但是多个人合作开发时，拷贝这些静态资源到各自本地（如果不这么做，将会出现跨域问题）是最糟糕的解决方案，这个时候我们可以将静态资源放在一个服务器上，然后使用反向代理或者允许跨域的配置巧妙的解决这个问题。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">location /static/ {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    add_header 'Access-Control-Allow-Origin'      '*';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    add_header 'Access-Control-Allow-Headers'     'Content-Type';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    add_header 'Access-Control-Allow-Credentials' 'true';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><p><code>Access-Control-Allow-Origin</code></p><p>必选，这个响应头信息代表的是允许跨域请求的域名，<code>*</code> 则表示允许任意域名向此服务器发起跨域请求。</p></li><li><p><code>Access-Control-Allow-Credentials</code></p><p>可选，这个响应头信息代表的是跨域请求是否需要携带 <strong>Cookie</strong> 信息，默认为 <code>false</code>，在需要利用 Session-Cookie 机制的情况下务必设置为 <code>true</code>。</p></li></ul><blockquote><p>官网文档：<a href="http://nginx.org/en/docs/http/ngx_http_headers_module.html#add_header" target="_blank" rel="noopener noreferrer">ngx_http_headers_module/add_header</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="反向代理">反向代理<a class="hash-link" href="#反向代理" title="标题的直接链接">​</a></h3><p>Nginx 可以作为一个反向代理服务器，来为我们提供一些场景下的解决方案，例如负载均衡、跨域、前后端完全分离开发场景等等。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">location / {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    proxy_set_header Host            $http_host;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    proxy_set_header X-Real-IP       $remote_addr;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    proxy_cookie_path /project/ /;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    proxy_pass http://127.0.0.1:8181/project/;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里有几点需要注意下：</p><ul><li><p><code>proxy_set_header</code></p><p>目的是为了保证后端（被代理的）服务器获取到远程客户端的真实信息，相当于将前端（nginx 反向代理）服务器的信息隐藏，造成客户端直接访问后端服务器的“假象”。</p><p><code>Host</code> 应尽可能设置成 <code>$http_host</code>，这样会包含完整的 <strong>IP</strong> 和<strong>端口</strong>信息，设置为 <code>$host</code> 时将不会包含端口信息。</p></li><li><p><code>proxy_cookie_path</code></p><p>目的是为了在访问路径与代理路径发生改变（不一致）的情况下防止出现客户端 Cookie 丢失的问题。</p></li><li><p><code>proxy_pass</code></p><p>则是后端（被代理）服务器地址。</p></li></ul><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="代理服务路径变化时">代理服务路径变化时<a class="hash-link" href="#代理服务路径变化时" title="标题的直接链接">​</a></h4><p>如果说在反向代理过程中，路径没有差异，一般来说不会出现什么问题，但是如果路径有变化时，会出现两个问题，一个是 <strong>cookie 丢失</strong>，另一个则是 <strong>后端服务器重定向错误</strong>。 第一个问题可以用 <code>proxy_cookie_path</code> 指令解决，第二个问题则使用 <code>proxy_redirect</code> 指令解决。具体如下：</p><div class="language-nginx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-nginx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">location /test/ {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  proxy_cookie_path /project/ /test/;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  proxy_pass http://127.0.0.1:8181/project/;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  proxy_redirect&nbsp;~(https?://[^/]+)?/project/(.*)&nbsp;$scheme://$http_host/test/$2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>首先，<code>proxy_pass</code> 指令配置的代理服务在用户实际访问时路径发生了变化。用户以 <strong>/test/users</strong> 路径访问时，实际被 nginx 代理到后端的服务路径为 <strong>/project/users</strong>，可以明显的看到路径的前缀发生了变化。</p><p>此时，<code>proxy_cookie_path</code> 指令告诉 nginx 将后端被代理服务的响应头中 cookie_path 进行转换，这样在客户端访问任意路径时，cookie_path 也会保持和访问路径一致，而不是实际代理的服务路径，否则 cookie 将会在客户端丢失。</p><p>同时，如果说被代理的服务有重定向需求的话，不配置 <code>proxy_redirect</code> 指令，重定向的路径将会发生错误，需要告诉 nginx 将其路径中部分进行替换。例如，用户访问 <strong>/test/</strong>，被代理的服务路径为 <strong>/project/</strong>，此时被代理服务做一个重定向操作到 <strong>/project/index.html</strong>，如果不做转换，用户会直接访问该路径将发生错误。在这里，<code>proxy_redirect</code> 指令所做的就是将响应头中 <code>Location</code>字段的值由 <strong>/project/index.html</strong> 替换为 <strong>/test/index.html</strong>，这样用户将会正常访问到资源。</p><blockquote><p>官网文档：<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html" target="_blank" rel="noopener noreferrer">ngx_http_proxy_module</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="重定向">重定向<a class="hash-link" href="#重定向" title="标题的直接链接">​</a></h3><p>重定向是一个比较常见的需求，nginx 的重定向指令（rewrite）还是相当简单的。例如，需要将所有 http 请求重定向到 https 下，官方推荐这么做：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">server {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    listen      80;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server_name localhost;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return 301 https://example.com$request_uri;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>事实上，也可以用 <code>rewrite</code> 指令，不过官方不推荐：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">server {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rewrite ^/(.*)$ https://example.com/$1 permanent;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>注意：</strong> <code>301</code> 重定向可能会导致 POST 请求被改变为 GET 请求，并可能丢失提交数据，此时使用 <code>308</code> 状态码替换即可。</p><blockquote><p>官网文档：<a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html" target="_blank" rel="noopener noreferrer">ngx_http_rewrite_module</a></p></blockquote><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="项目首页重定向">项目首页重定向<a class="hash-link" href="#项目首页重定向" title="标题的直接链接">​</a></h4><p>大多数时候，我们在同一个域名下会部署多个 Web 应用，访问的话需要 <strong>WebAppName</strong> 来进行区分，例如 <code>localhost:80/App</code>，那么 <code>App</code> 其实就代表了一个 Web 应用，将会映射到相应的文件夹。这里有一个细节性问题，文件夹的路径必然以 <code>/</code> 结束，所以大多数服务器都会自动做一次重定向，将 <code>localhost:80/App</code> 重定向到 <code>localhost:80/App/</code>。如果 Nginx 没有配置，默认是不会做这个重定向的，为了用户访问方便，我们需要解决这个问题：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">localhost / {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 这是一个默认配置文件中的配置项</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # First attempt to serve request as file, then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # as directory, then fall back to displaying a 404.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    try_files $uri $uri/ =404;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个配置基本上解决了该问题，但<strong>在内外网端口不一致时，会出现问题</strong>。例如，我们通过 <code>www.example.com:80/App</code> 访问部署在内网 <code>8080</code> 端口上的 Nginx 时，Nginx 会将其重定向到 <code>www.example.com:8080/App/</code>，这里的差异在于，重定向时丢失了外网端口，用户此时将会访问失败。</p><p>目前，还没找到比较优雅的解决办法，可以用以下配置暂时解决该问题：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">location ~ ^/[^/]+$ {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return 301 $scheme://$http_host$uri/;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="日志分割">日志分割<a class="hash-link" href="#日志分割" title="标题的直接链接">​</a></h3><p>Nginx 的访问日志（access_log）默认是没有进行分割的，时间一长，日志文件就会有 GB 级别的大小，日志写入速度变慢，也会影响 nginx 的性能。我们可以通过很简单的方式，将访问日志设置为按天记录,将日志记录在不同的文件中。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">server {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # cut log by day</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})") {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        set $year  $1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        set $month $2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        set $day   $3;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    access_log  logs/access/host.access-$year-$month-$day.log main;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>官网文档：<a href="http://nginx.org/en/docs/http/ngx_http_log_module.html" target="_blank" rel="noopener noreferrer">ngx_http_log_module</a></p></blockquote>]]></content:encoded>
            <category>计算机技术</category>
            <category>服务器</category>
            <category>Nginx</category>
            <category>配置</category>
        </item>
        <item>
            <title><![CDATA[初识经济学]]></title>
            <link>https://wang1212.github.io/Finance-Economics/economics-preliminary-understanding</link>
            <guid>/Finance-Economics/economics-preliminary-understanding</guid>
            <pubDate>Mon, 05 Mar 2018 02:16:00 GMT</pubDate>
            <description><![CDATA[刚开始学习经济学，在这里记录下学习过程中的点滴。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-01-18 22:58:00 </em></p></blockquote><p>刚开始学习经济学，在这里记录下学习过程中的点滴。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="初识经济学">初识经济学<a class="hash-link" href="#初识经济学" title="标题的直接链接">​</a></h2><p>年前就开始在网易公开课上学习金融学，学了之后发现挺有意思的，而且感觉受益颇多，后面了解到经济、会计、金融是三门相辅相成的学科，互相了解下也对其中任何一门学科的了解也会有更多帮助。随后从网上查阅了相关资料，发现很多人都推荐曼昆教授的《经济学原理》，于是就买了一套，分为两本书《微观经济学》与《宏观经济学》。</p><p>虽然做程序员很累，而且要经常学习更多新的知识，但总是看同一种东西难免会感到无聊，所以偶尔看看经济学的书也是调节下自己的心情，还能学到一部分经济学的知识，何乐而不为呢。借此，记录下自己学习看书过程中的点滴。</p><p>两年后回过头来看，发现业余学习一个东西是很不容易的，尤其是学习一个专业性比较高的东西，当然坚持在学习过程中不断的了解和积累我相信也是值得的，转变策略，以一些社会中比较典型的现象做一些记录。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="美联储加息">美联储加息<a class="hash-link" href="#美联储加息" title="标题的直接链接">​</a></h3><p>2022 年初，当下最值得关注的就是美联储加息预期提前，本轮加息周期启动是在 2015 年底，一直持续到 2018 年底，时隔三年后再次加息。美联储加息为何会吸引全球的注意力？</p><p>首先，美联储加息加的是什么“息”？<strong>隔夜拆借利息</strong>。简单的来说，就是美国各大银行同业之间互相借钱的成本，而加息意味着借钱的成本上升。</p><blockquote><p><a href="http://www.360doc.com/content/18/0614/13/437296_762347688.shtml" target="_blank" rel="noopener noreferrer">科普：「美联储加息」到底加的是什么“息”？</a></p></blockquote><p>其次，为何全球在关注美联储加息？因为，目前的世界金融体系中，美元的地位举足轻重，是全球国际储备货币中占比最高的，其动向往往会对世界各国的国际金融贸易投资活动产生重大影响。</p><p>最终，也是最重要的，美联储加息意味着什么？加息是一种<strong>紧缩型货币政策</strong>，美联储通过加息来应对当前的经济，<strong>一般出现在经济过热、通胀严重时期</strong>。简单的来说加息可以提高银行利息，从而<strong>减少货币供应量</strong>、压抑消费、压抑通货膨胀、鼓励存款、减缓市场投机等，<strong>美元会升值，作为与美元同属避险资产的投资品，黄金市场资金势必减少，黄金价格将会承压</strong>。美元升值，也<strong>意味着相应的各国货币的贬值，国际资本开始回流到美国本土</strong>，增加美国市场的投资。</p><p>那么，各国如何应对？正常情况下，<strong>各国为了稳定币值，会采取同样的加息政策，而这会导致市场流通资金的减少，企业融资成本上升，不少企业会因为资金链断裂而出现危机</strong>，所以美国企业一般会利用这一机会收购其他国家的企业，强化对这些国家经济的控制能力。与此同时，<strong>各国央行为了稳定本国汇率，会大举抛售美债，致使美债收益率上涨</strong>。</p><p>对于投资活动来说，美联储加息和 Taper(缩减资产购买，退出 QE) 都会引起市场流动性收紧，导致各国外资流入减缓甚至加速流出，美股、美债、大宗商品等以美元计价的资产价格承压。高估值股票、依赖未来现金流的股票、资源股等价格可能会一并下跌，而银行股则可能因高利率受益。</p><blockquote><p><a href="https://wiki.mbalib.com/wiki/%E7%BE%8E%E8%81%94%E5%82%A8%E5%8A%A0%E6%81%AF" target="_blank" rel="noopener noreferrer">美联储加息</a></p></blockquote>]]></content:encoded>
            <category>金融与经济</category>
        </item>
        <item>
            <title><![CDATA[2017 年工作记录]]></title>
            <link>https://wang1212.github.io/Life/2017-work-record</link>
            <guid>/Life/2017-work-record</guid>
            <pubDate>Thu, 18 Jan 2018 14:47:00 GMT</pubDate>
            <description><![CDATA[现在已经 2018 年了，回过头去看看刚参加工作第一年也就是 2017 年的工作历程以及参与的项目，总结一下遇到的问题，解决方法以及自己的成果，做个简单的总结。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2018-01-18 14:47:00 </em></p></blockquote><p>现在已经 2018 年了，回过头去看看刚参加工作第一年也就是 2017 年的工作历程以及参与的项目，总结一下遇到的问题，解决方法以及自己的成果，做个简单的总结。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2017-年">2017 年<a class="hash-link" href="#2017-年" title="标题的直接链接">​</a></h2><p>今年，7 月份从学校毕业了，找到了自己还算满意并且喜欢的工作。自从 9 月 7 号入职以来，一直负责的是 Web 前端方面的工作，这也是当初自己选择并专攻的一个方向，四个多月的时间里断断续续参与了多个项目，回过头来从每个项目中都能感受到自己的成长。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="项目总结">项目总结<a class="hash-link" href="#项目总结" title="标题的直接链接">​</a></h2><p>接下来总结一下自己在这几个月内参与的各个项目的细节，并分析遇到的问题，解决方式，以及自己的收获。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="保护区巡护">保护区巡护<a class="hash-link" href="#保护区巡护" title="标题的直接链接">​</a></h3><p>刚进公司，第一个接触的就是这个项目。</p><ul><li><p>任务</p><p>起初是做一些界面优化的工作，随后参与了部分前端业务逻辑的实现。</p></li><li><p>过程</p><p>刚开始主要是花时间去看源码和文档，了解项目情况。本身是个小项目，因此很快的了解了项目的大概业务情况和开发情况。因为是新人，所以主要任务是界面优化工作，这个过程中发现公司由于缺少专门的前端工程师，所以响应式设计这块做的并不好，那么我的工作针对的优化方向也在此。后面的话，也写了一部分的业务逻辑。</p><p>在这个过程中，由于自己当时也学习了部分 Java Web 的知识，所以尝试独立实现了警报业务的前后端代码，后台代码参考已有的框架和代码来实现，最后也算完成了。</p></li><li><p>收获</p><p>作为新人，还算是一个好的开头。其次的话，这是我接触的第一个商业项目，对于从来没有接触过商业项目的我来说还是收获不少的。</p><ul><li>CSS、HTML 基础知识</li><li>前后端交互 Ajax、json</li><li>Web GIS 类库 OpenLayers</li></ul></li></ul><p>第一个问题就是 <code>CSS</code>、<code>HTML</code> 的基础知识，这里之所以没有 <code>JS</code> 是因为涉及的业务逻辑并不多，而且也不复杂。同时，因为使用了新的 Web API 技术 Canvas，基本不用再考虑 IE8 以下的兼容性，事实上抛开兼容性的话页面实现要简单一些，考虑的因素会少一些，只需要专注于快速实现。</p><p>以往，在学校自己学习前端知识的时候很少写过一个很大的系统或者多个完整的页面，大多时候都是写一些 <code>HTML</code> 代码片段，去使用 <code>CSS</code> 实现一个组件（下拉列表，复选框，导航）进行美化。面对这样一个大的系统，多个完整页面，并之间有一定的逻辑关系，理清这些还是耗费了不短的时间。从这里面认识到了，页面的设计架构特别的重要，尤其对于后期维护来说是很关键的。一个页面内部的架构设计，需要对基础的 <code>CSS</code> 布局定位知识有很深的理解才会做到很好，这时也领会到了当初学习 <code>CSS</code> 时强调的重点的重要性。这个项目实际上是一个 Web 应用，而非单纯的页面，以前了解过单页面应用（SPA）的知识，但还没有完整地应用过，不过此时能感受到如果这个项目设计成 SPA 架构用户体检会好很多。</p><p>第二个问题就是前后端的交互问题。实际上在自己学习前端知识的时候，基本上是没有和后台交互的，所以这方面的经验非常的欠缺；在这个项目中参与了一部分的前端业务逻辑实现，根据别人的示例以及自己查找资料，也算是对于前后端的交互有了基本的了解。现在的 Web 实现依赖于 Ajax 异步请求技术通过 Http 协议与后台服务器进行数据传送，并使用标准的统一数据格式 <code>JSON</code>。由于学习过一些基础的后端知识，和后台开发配合起来能相对容易一些，在后期独立实现了警报的前后端业务，不过感觉对于自己所学习的技术应用起来还是不那么的熟练。</p><p>第三个问题就是 Web GIS，接触一个新的行业领域。由于公司的业务主要是 GIS 领域的，参与的第一个项目就接触到了 Web GIS 的技术，这个项目使用的是 Openlayers 类库，刚开始接触时还是比较难的，尤其是一些 GIS 行业的术语不是很好理解，不过走的是技术先行的路，首要解决的是项目中要实现的业务，后面还会对 GIS 行业的知识进一步的学习。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="甘肃林校">甘肃林校<a class="hash-link" href="#甘肃林校" title="标题的直接链接">​</a></h3><p>这个项目基本上是从无到有的一个过程，而且也是公司的一个战略级大型项目，更重要的是时间也非常的紧，所以通过这个项目收获颇丰。</p><ul><li><p>任务</p><p>主导前端开发工作，对已有的代码进行优化。</p></li><li><p>过程</p><p>其实，现在也仅仅是进公司一个月的试用期，没想到接到这么重和相对来说比较难的任务，但是反过来想想这真是个绝佳的锻炼自己的机会。公司之前有一个女孩子做的前端工作，技术一般，所以这次项目由我来主导，并对她之前完成的一些代码做优化。</p><p>这个项目业务内容为一个门户网站和多个应用子系统。门户网站基本成型，只需要做一些优化，我的计划是采取 SPA 方案并做一定 SEO 优化，最终来看优化效果是相当明显的。应用子系统的话，当时也采取了 SPA 方案，毕竟开发一个应用的话这是前端目前主流的解决方案；但因为当时还没有学习过 React、Vue 这些框架，就利用组件化的思想自己简单实现了一个简陋的组件系统，所有的业务逻辑代码都是纯手写实现。</p><p>说到前端的开发，没有专门的 IDE，其实各种繁琐的流程还是比较复杂的和耗费时间的，但是因为时间紧迫以及技术欠缺的原因，就没有使用 grunt、gulp、webpack 这些自动化构建和模块打包工具。</p><p>最终，进度还算顺利，离预期的效果也比较接近。</p></li><li><p>收获</p><p>能在刚开始工作接到这么一个项目，还能自己主导前端的开发工作，虽然做的可能不够专业，但是收获真的是相当丰硕。</p><ul><li>项目文件层次结构</li><li>技术选型</li><li>优化方案</li></ul></li></ul><p>首先，一个项目的文件层次结构很重要，因为软件是需要不断的进行维护升级的，项目文件的层次结构不清晰的话，会导致后期维护升级时回过头来看代码时消耗大量时间去读懂代码。而且，前端没有专门的 IDE （集成开发环境），所以代码量一旦变大就很难维护；目前有一些自动化的构建工具以及模块化打包工具，不过上手难度还是挺高的，由于时间问题，所以选择手动编码，也算是练一练基本功。前端的项目文件层级结构通常有两种，一种是以文件类型进行分类，比如 <code>CSS</code>、<code>JS</code>、插件、库、字体文件等等，这种适合生产环境，以及没有自动化构建工具的环境；第二种则是以组件或者模块为划分依据，将同一个组件或者模块的 <code>CSS</code>、<code>JS</code> 等文件放在一块，这种适合使用了自动化构建工具的开发环境。因此，我选择了前者，事实上在这个过程中，文件结构的架构变动了三次，在这个过程中去感受文件结构层次的不合理是比提前选好要深刻的。</p><p>其次，技术选型也是很重要的，这个项目及涉及了门户网站，又涉及了应用系统，总结一下就是及有内容性网站，又有 Web 应用。为了增强用户的体验，门户网站采用了 SPA （单页面应用）架构，但是门户网站作为一个内容性的网站是需要对 SEO 进行优化的，最终采用了目前普遍的做法，将静态内容全部写到 <code>html</code> 文件中。其次还有个很重要的问题，由于这个项目使用了三维地图的类库 Cesium，技术选型与优化关系密切，三维地图太耗费性能，影响应用的使用体验，而且页面之间的数据管理传递问题也难以解决，在常规独立页面与 SPA 架构中最终决定先用 SPA 架构，最后发现三维的容器元素在 <code>display</code> 设置为 <code>none</code> 之后，页面明显不再卡顿，于是才知道 DOM 元素隐藏之后，浏览器就暂停了渲染；这是个令人高兴的事情，而且采用了 SPA 架构之后，页面之间的数据管理传递问题也随之解决。</p><p>在项目第一阶段完成上线后，其实发现了很多待优化的问题，一是因为当时时间紧迫没有做太多优化，二是确实当时在开发环境下没有预料到一些需要优化的问题。图片其实是个很奢侈的在线资源，尤其是一些首页的轮播大图当时没有进行压缩，有的单张图片竟达到了几个<strong>MB</strong>的大小，在对图片压缩后，整个门户网站的资源量达到了 30MB 多，而压缩后仅仅不到 10MB ，加载速度明显加快，效果还是很明显；这个过程中也学会了使用 Chrome 的开发工具进行网络模拟。对于 SPA 架构来说，是一次性将整个网站的资源加载完的，之后又采用了 LazyLoad （延迟加载）的技术将单次的资源加载量进一步缩减，基本只有 2MB 左右，网站浏览明显流畅了。由于这个项目需要的资源文件量特别大，其实有考虑过给静态资源专门弄一个服务器，但因为现在是第一阶段，所以就将整个计划延后了。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>3 个月的试用期，在第 2 个月的时候就提前转正了，这真是个意外之喜。虽然在毕业季没有找自己专业对口的工作，在找工作中也遭遇了很多挫折，但一切的付出总算有了还算满意的回报，坚持了自己喜欢的事情，以后只需要朝着自己的方向努力就好，未来可期！</p>]]></content:encoded>
            <category>生活</category>
            <category>工作</category>
            <category>记录</category>
        </item>
        <item>
            <title><![CDATA[金融与经济中的一些常用概念]]></title>
            <link>https://wang1212.github.io/Finance-Economics/financia-economicsl-concept</link>
            <guid>/Finance-Economics/financia-economicsl-concept</guid>
            <pubDate>Fri, 05 Jan 2018 02:05:00 GMT</pubDate>
            <description><![CDATA[一些与日常生活相关的金融与经济常用概念。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-03-12 00:50:00 </em></p></blockquote><p>一些与日常生活相关的金融与经济常用概念。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="金融与经济">金融与经济<a class="hash-link" href="#金融与经济" title="标题的直接链接">​</a></h2><p>金融经济其实是非常值得大家去了解的，在经济社会中，我们每个人都在从事着经济活动，而金融业属于社会中一个中流砥柱的行业，看似遥远，其实与我们的日常生活密切关联。所以，了解一下社会中时常发生的金融活动，政府调控手段，经济数据及事件是非常有用的。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="货币供应量指标">货币供应量指标<a class="hash-link" href="#货币供应量指标" title="标题的直接链接">​</a></h3><p>如何判断货币政策的松紧程度和经济发展趋势？货币供应量指标是一个值得关注的方面。</p><ul><li><a href="https://wiki.mbalib.com/wiki/M0" target="_blank" rel="noopener noreferrer">流通中现金（M0）</a>= 现金持有量</li><li><a href="https://wiki.mbalib.com/wiki/%E7%8B%AD%E4%B9%89%E8%B4%A7%E5%B8%81" target="_blank" rel="noopener noreferrer">狭义货币供应量（M1）</a>= M0 + 支票存款</li><li><a href="https://wiki.mbalib.com/wiki/%E5%B9%BF%E4%B9%89%E8%B4%A7%E5%B8%81" target="_blank" rel="noopener noreferrer">广义货币供应量（M2）</a>= M1 + 储蓄存款（活期 + 定期）</li></ul><p>以上，是国际上对于货币指标的大致划分，<strong>在我国 M1 = M0 + 单位活期存款，M2 = M1 + 单位定期存款 + 居民储蓄存款 + 其它存款证券等。</strong></p><p>M1 反映着经济中的现实购买力；M2 不仅反映现实的购买力，还反映潜在的购买力。<strong>若 M1 增速较快，则消费和终端市场活跃；若 M2 增速较快，则投资和中间市场活跃。</strong>中央银行和各商业银行可以据此判定货币政策。<strong>M2 过高而 M1 过低，表明投资过热、需求不旺，有危机风险；M1 过高 M2 过低，表明需求强劲、投资不足，有涨价风险。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="金融统计数据">金融统计数据<a class="hash-link" href="#金融统计数据" title="标题的直接链接">​</a></h3><p>除过通过货币供应量指标来观察经济发展趋势，还有一些比较重要的周期性统计的金融数据值得留意。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="社会融资规模">社会融资规模<a class="hash-link" href="#社会融资规模" title="标题的直接链接">​</a></h4><p>社会融资规模是我国政府提出的一个针对经济发展情况的监测指标，服务于宏观调控，指金融业对实体经济的年度新增融资总量，既包括银行体系的间接融资，又包括资本市场的债券、股票等市场的直接融资，是<strong>全面反映金融与经济关系，以及金融对实体经济资金支持的总量指标</strong>，该统计数据由央行按月周期性统计存量和增量变化情况进行发布。</p><p>社会融资规模统计数据关注的重点在于<strong>存量数据的增速同比、环比变化，其组成结构的占比变化，以及其各组成结构的增速变化</strong>。例如，社融规模存量的增速环比变化是降低还是增长，间接融资（如银行贷款）还是直接融资（如银行承兑汇票、非金融企业股票筹资及企业债的净发行）占比高，政府债券、企业债券与信托贷款余额等哪个主导着增长。</p><ul><li><a href="https://wiki.mbalib.com/wiki/%E7%A4%BE%E4%BC%9A%E8%9E%8D%E8%B5%84%E8%A7%84%E6%A8%A1" target="_blank" rel="noopener noreferrer">社会融资规模</a></li></ul><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="金融机构口径信贷数据">金融机构口径信贷数据<a class="hash-link" href="#金融机构口径信贷数据" title="标题的直接链接">​</a></h4><p>人民币贷款统计数据也是一个值得关注的金融机构口径信贷数据，一定程度上表现出了社会投资活跃度，该数据由央行按月周期性统计进行发布。</p><p>人民币贷款统计数据关注的重点在于<strong>增量、增速的同比、环比变化，居民中长期贷款、企业中长期贷款和票据融资的变化情况</strong>。例如，人民币贷款新增的数据同比增量是降低还是增加，增速环比是增长还是降低，居民中长期贷款是增是减，企业中长期贷款和票据融资是增是减。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="政府的货币政策工具">政府的货币政策工具<a class="hash-link" href="#政府的货币政策工具" title="标题的直接链接">​</a></h3><p>政府（一般是央行）通常通过货币政策工具来调控宏观经济发展，通过调整货币供应量、市场流动性、市场利率、贷款量来引导经济平稳有序地向政府规划的方向发展。其对象一般是商业银行和金融机构，但层层传导下来，最终会体现在失业率、贷款利率、通货膨胀、货币贬值等问题上，进而对我们的生活产生细微影响，而这些细微影响经过累加之后则可能改变我们的生活方式和习惯。</p><p>政府的货币政策工具：</p><ul><li><a href="https://wiki.mbalib.com/wiki/%E5%AD%98%E6%AC%BE%E5%87%86%E5%A4%87%E9%87%91%E7%8E%87" target="_blank" rel="noopener noreferrer">存款准备金率</a>（影响大，副作用大，不常用）</li><li><a href="https://wiki.mbalib.com/wiki/%E5%86%8D%E8%B4%B4%E7%8E%B0%E7%8E%87" target="_blank" rel="noopener noreferrer">再贴现率</a>（被动政策）</li><li><a href="https://wiki.mbalib.com/wiki/%E5%85%AC%E5%BC%80%E5%B8%82%E5%9C%BA%E4%B8%9A%E5%8A%A1" target="_blank" rel="noopener noreferrer">公开市场业务</a>（主动政策，最常用，例如<a href="https://wiki.mbalib.com/wiki/%E9%80%86%E5%9B%9E%E8%B4%AD" target="_blank" rel="noopener noreferrer">逆回购</a>、<a href="https://wiki.mbalib.com/wiki/%E4%B8%AD%E6%9C%9F%E5%80%9F%E8%B4%B7%E4%BE%BF%E5%88%A9" target="_blank" rel="noopener noreferrer" title="中期借贷便利">MLF</a>）</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="通货膨胀">通货膨胀<a class="hash-link" href="#通货膨胀" title="标题的直接链接">​</a></h3><p>我们生活中对于物价的波动是敏感的，在经济学上则通过以下概念来定义：</p><ul><li><a href="https://wiki.mbalib.com/wiki/%E9%80%9A%E8%B4%A7%E8%86%A8%E8%83%80" target="_blank" rel="noopener noreferrer">通货膨胀</a></li></ul><p>在经济学上，<strong>通货膨胀意指整体物价水平持续性上升</strong>。在某些场合，<strong>通货膨胀一词意为提高货币供给</strong>，此举有时会造成物价上涨。通货膨胀之反义为通货紧缩。<strong>稳定的小幅度通货膨胀一般会被认为对经济有益。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="物价指数">物价指数<a class="hash-link" href="#物价指数" title="标题的直接链接">​</a></h3><p>对于我们普通人来说，可以根据国家周期性公布的物价指数来了解消费市场的发展趋势和对未来的预期进行分析判断。</p><ul><li><a href="https://wiki.mbalib.com/wiki/Producer_Price_Index" target="_blank" rel="noopener noreferrer">生产者物价指数(PPI)</a></li><li><a href="https://wiki.mbalib.com/wiki/CPI" target="_blank" rel="noopener noreferrer">消费者物价指数(CPI)</a></li></ul><p>PPI 是用来衡量生产者在生产过程中，所需采购品的物价状况；因而这项指数包括了原料，半成品和最终产品等（美国约采用 3000 种产品）三个生产阶段的物价资讯。理论上来说，生产过程中所面临的物价波动将反映至最终产品的价格上，因此观察 PPI 的变动情形将有助于预测未来物价的变化状况，因此这项指标受到市场重视。</p><p>CPI（我国称之为<strong>居民消费价格指数</strong>）是反映与居民生活有关的产品及劳务价格统计出来的物价变动指标，通常作为观察<strong>通货膨胀</strong>水平的重要指标。CPI 追踪一定时期的生活成本以计算通货膨胀。如果 CPI 升幅过大，表明通货膨胀已经成为经济不稳定因素，央行会有紧缩货币政策和财政政策的风险，从而造成经济前景不明朗。</p><p><strong>根据价格传导规律，PPI 对 CPI 有一定的影响。PPI 反映生产环节价格水平，CPI 反映消费环节的价格水平。整体价格水平的波动一般先出现在生产领域，然后通过产业链向下游产业扩散，最后波及流通领域消费品。</strong></p><p>其次，还有一个指数值得注意：</p><ul><li><a href="https://wiki.mbalib.com/wiki/Purchase_Management_Index" target="_blank" rel="noopener noreferrer">采购经理人指数(PMI)</a></li></ul><p>PMI 是一项全面的经济指标，概括了一国整体制造业状况、就业及物价表现，是全球最受关注的经济资料之一。<strong>PMI 是以百分比来表示，常以 50% 作为经济强弱的分界点：当指数高于 50% 时，则被解释为经济扩张的讯号。当指数低于 50%，尤其是非常接近 40% 时，则有经济萧条的忧虑。一般在 40~50 之间时，说明制造业处于衰退，但整体经济还在扩张。</strong></p><p><strong>总的来说，PMI 及 PPI 是先行指标，CPI 是滞后指标，前两者对后者会有一定的传导性。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li><a href="https://wiki.mbalib.com/wiki/" target="_blank" rel="noopener noreferrer">MBA 智库·百科</a></li><li><a href="http://www.pbc.gov.cn/" target="_blank" rel="noopener noreferrer">中国人民银行</a></li><li><a href="http://www.stats.gov.cn/" target="_blank" rel="noopener noreferrer">国家统计局</a></li></ul>]]></content:encoded>
            <category>金融与经济</category>
        </item>
        <item>
            <title><![CDATA[Web 应用：单页面应用与路由]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/web-routing</link>
            <guid>/Computer-Technology/Web/web-routing</guid>
            <pubDate>Wed, 25 Oct 2017 00:51:00 GMT</pubDate>
            <description><![CDATA[现在，Web 技术不仅仅是局限于页面的开发技术，在应用的开发方面也是一种潮流，B/S 架构的技术是一种趋势。而像一般的管理型 Web 应用，不注重 SEO，非常适合单页面应用（SPA）的实现方式，而路由功能则是单页面应用的核心技术。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2017-10-25 21:56:00 </em></p></blockquote><p>现在，Web 技术不仅仅是局限于页面的开发技术，在应用的开发方面也是一种潮流，B/S 架构的技术是一种趋势。而像一般的管理型 Web 应用，不注重 SEO，非常适合单页面应用（SPA）的实现方式，而路由功能则是单页面应用的核心技术。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="spa">SPA<a class="hash-link" href="#spa" title="标题的直接链接">​</a></h2><p>单页面应用（Single page application, SPA）已经是目前实现 Web 应用的主流技术了，尤其是移动端的 Web 应用。SPA 使用 Ajax 技术异步加载页面内容，使用户能够在同一个页面流畅的进行交互，并将多个页面的内容根据需要在同一个页面在适当的时候进行展示。当然，SPA 技术采用动态加载 DOM 的方法，随之而来的就是 SEO 优化问题，搜索引擎不执行 JS 代码，页面内容无法被引擎检索到，也就不利于页面的排名和检索量提升。</p><p>当然，SPA 技术主要应用于比较重的管理型 Web 应用等等，它们对 SEO 的优化需求不那么强，或者说根本就没有。在门户类网站，页面内容是非常重要的，SEO 优化的需求很强，使用 SPA 技术来动态生成 DOM 结构并不合适。但是，我们可以将多个相似模块的 DOM 结构写在同一个页面上，仅仅利用路由功能来将他们与用户的交互操作联系起来适时的进行展示即可，这也是不错的方法。</p><p>单页面应用的业务逻辑要复杂得多，所以划分模块是很重要的，利于维护和管理。但如何来划分模块呢？我们通常实现单页面应用的方法是利用"锚点"，也就是 URL 后面的<code>#index</code>这一串字符。锚点的作用是将视角跳到当前页面中<code>name</code>值与锚点值相同的元素处，常见应用方式的就是点击导航跳转到页面某处。<strong>然而，更重要的是改变页面的锚点，页面并不会刷新，也就是说不会向服务器发送新的请求。</strong>而这正与我们实现单页面应用的需求相契合，锚点的信息则我们决定要展示什么内容。路由的功能则是帮助我们将某一模块的业务与锚点信息联系起来，进而实现交互。</p><p>事实上，实现单页面应用的方法不仅可以利用锚点<code>#</code>，还可以使用 html5 的新 API，<code>popState()</code>与<code>pushState()</code>，但锚点兼容性更好一些。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="路由">路由<a class="hash-link" href="#路由" title="标题的直接链接">​</a></h2><p>路由（Router）功能是实现单页面应用的核心技术，也是我们进行业务划分的基础。常见的前端框架基本都提供了路由功能，但我们通常使用框架的机会不多，而路由功能又是实现单页面应用的核心，所以在这里自己写了一个简单的路由功能帮助我们简单实现单页面应用的业务管理。</p><p>锚点值发生变化时，不会向服务器发送新的请求，但会触发<code>window.onhashchange()</code>事件，利用这个事件我们来将用户的交互操作与业务挂钩，路由则封装了这个事件，增加了一些工具方法，帮助我们管理代码，业务进行模块化划分。</p><p>其实，根据在写这个路由功能的过程中，可以明显的感受到我们只不过在前端做了类似 Tomcat 的 Filter、Servlet、Listener 等等要做的事情，然后使用 Ajax 异步的加载页面，这也许就是单页面应用的核心。而这个路由功能提供了基本的业务模块划分功能同时，还增加了<code>hash_url</code>模糊匹配功能，目的是让我们可以实现过滤器的功能，从而帮助我们将业务逻辑划分的更清晰一些；也提供了手动切换路由的功能。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="使用路由">使用路由<a class="hash-link" href="#使用路由" title="标题的直接链接">​</a></h3><p>将 js 文件引入页面后就可以使用路由来进行业务逻辑的模块化开发了。</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 引入 Router.js 后</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/*  路由注册（过滤）  */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">!</span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 根过滤</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">router</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'/*'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">content</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/*  路由注册（业务）  */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">!</span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 首页</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">router</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'/index'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">content</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 默认加载首页</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">switch_routing</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'/index'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>content</code>参数是页面中<code>id</code>为<code>content</code>的 DOM 元素，用来提供加载页面内容的容器，可在源码中修改其<code>id</code>值。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="routerjs">Router.js<a class="hash-link" href="#routerjs" title="标题的直接链接">​</a></h2><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Router</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// IE8 以下不支持的数组方法</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token class-name">Array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">prototype</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">forEach</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">prototype</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method-variable function-variable method function property-access" style="color:#d73a49">forEach</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">callback</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Object</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">prototype</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">call</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'[object Function]'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> length </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> length</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      callback</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">call</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token class-name">Array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">prototype</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">filter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">prototype</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method-variable function-variable method function property-access" style="color:#d73a49">filter</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">callback</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Object</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">prototype</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">call</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'[object Function]'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">callback</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">call</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">splice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    路由自动加载内容（单页面）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        ---content : 将页面容器标签的 id 设置为 content</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        ---使用方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            router(url, function(content){ }) : 注册对应 url 需要执行的回调方法，content 参数为页面中 ID 为 content 的元素，可重复注册</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            -- url</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">                单个模糊匹配 : "/*"  (可作为过滤器使用，回调执行顺序优先级 : 模糊匹配 &gt; 精确匹配)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">                单个精确匹配 : "/index"</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">                多个混合匹配 : ["/*", "/index"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        ---工具方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            switch_routing(url, callback) : 手动切换 url 并执行回调</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            get_hash_url() : 获取当前的 hash_url</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">            get_url_array(url) : 获取当前 hash_url 或者传入参数的 url 数组，例如 "/index/index1/index2/index3" =&gt; ["index", "index1", "index2", "index3"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 管理 root</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> routings </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fuzzy_match </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 容器（ID）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> content </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">document</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getElementById</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'content'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/* rooting 注册方法  */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">router</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">url</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 回调不存在</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// url 是否是多个数组元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Object</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">prototype</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">call</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'[object Array]'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> url</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">forEach</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">sub_url</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 递归</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">router</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sub_url</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 获取数据</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> routing </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> routings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 未注册的情况下</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">routing</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      routings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> callback </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">callback</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 如果存在模糊匹配的话，例如 /index/*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      url</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">match</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'\\*'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> fuzzy_match</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 已注册</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      callback </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> routings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/* 执行回调 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">apply_routing</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">url</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> routing </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 先遍历模糊匹配（可配置过滤器）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fuzzy_match</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">forEach</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">fuzzy_url</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      routing </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> routing</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">concat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        url</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">indexOf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fuzzy_url</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">slice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> routings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fuzzy_url</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 精确匹配 routing</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    routing </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> routing</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">concat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">routings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 回调</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    routing </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      routing</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">forEach</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        callback </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">callback</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">content</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/* 主动切换路由  */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">switch_routing</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">url</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 检测当前路由</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> now </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">location</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">hash</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">slice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> url</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 更改 hash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token dom variable" style="color:#36acaa">location</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">hash</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> url</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 手动执行回调</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    now </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">apply_routing</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 回调</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    callback </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">callback</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">content</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/* 获取当前 hash_url  */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_hash_url</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> hash_url </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">location</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">hash</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">slice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      query_index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hash_url</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">indexOf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'?'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 查询字符串存在的话</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hash_url </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> query_index </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> hash_url </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> hash_url</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">slice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> query_index</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> hash_url</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/* 检测自动加载  */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method-variable function-variable method function property-access" style="color:#d73a49">onhashchange</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 执行回调</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">apply_routing</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">get_hash_url</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 将路由注册方法暴露给全局</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">router</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> router</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 将路由切换方法暴露给全局</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">switch_routing</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> switch_routing</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 将获取当前 hash_url 方法暴露给全局</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">get_hash_url</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> get_hash_url</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/* 获取 hash_url 数组 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_url_array</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">url</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> url </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> url </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_hash_url</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 去掉空字符元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> url_array </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> url</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">split</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'/'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">filter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> url_array </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 将获取当前 url 数组方法暴露给全局</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">get_url_array</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> get_url_array</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>SPA</category>
            <category>路由</category>
        </item>
        <item>
            <title><![CDATA[监听器、过滤器、Servlet]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Java-Web/web-java-l-f-s</link>
            <guid>/Computer-Technology/Java-Web/web-java-l-f-s</guid>
            <pubDate>Thu, 31 Aug 2017 11:52:00 GMT</pubDate>
            <description><![CDATA[在 Java Web 开发过程中，监听器、过滤器、Servlet 这三大内容是很重要的组件，也是实现很多功能的根本所在。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2017-08-31 11:52:00 </em></p></blockquote><p>在 Java Web 开发过程中，监听器、过滤器、Servlet 这三大内容是很重要的组件，也是实现很多功能的根本所在。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="监听器">监听器<a class="hash-link" href="#监听器" title="标题的直接链接">​</a></h2><p>Web 监听器（Listener）是由 Servlet 规范提供一种特殊类，用于监听 ServletContext、HttpSession 和 ServletRequest 等域对象的创建与销毁事件，以及监听这些域对象中属性的创建、销毁、修改事件。</p><p>监听器可以在事件的发生前、发生后做一些必要的处理，一般可以用来统计在线人数和在线用户、统计网站访问量、系统启动时初始化信息等。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="分类">分类<a class="hash-link" href="#分类" title="标题的直接链接">​</a></h3><ul><li>按监听对象划分<ul><li>ServletContext ： Application 整个应用</li><li>HttpSession ： Session 一次会话</li><li>ServletRequest ： Request 一次请求</li></ul></li><li>按监听事件划分<ul><li>域对象自身的创建和销毁事件<ul><li>ServletContextListener</li><li>HttpSessionListener</li><li>ServletRequestListener</li></ul></li><li>域对象中属性的添加、删除、更改事件<ul><li>ServletContextAttributeListener</li><li>HttpSessionAttributeListener</li><li>ServletRequestAttributeListener</li></ul></li><li>绑定到 HttpSession 中对象的状态的变化事件<ul><li>HttpSessionBindingListener</li><li>HttpSessionActivationListener</li></ul></li></ul></li></ul><p>域对象自身的创建和销毁事件分别由相应接口的实现类来处理，实现接口中 <code>Initialized()</code> 和 <code>Destroyed()</code> 方法则可以完成监听域对象的创建和销毁。</p><p>域对象中属性的添加、删除和更改事件分别由相应接口的实现类来处理，实现接口中的 <code>attributeAdded()</code>、<code>attributeRemoved()</code> 和 <code>attributeReplaced()</code> 方法则可以完成监听属性的添加、删除和更改。</p><p>绑定到 HttpSession 中对象的状态变化由相应接口的实现类来处理，<code>HttpSessionBindingListener</code> 接口中规范了 <code>valueBound()</code> 和 <code>valueUnbound()</code> 方法完成监听对象的绑定和解除绑定；而 <code>HttpSessionActivationListener</code> 接口中规范了 <code>sessionWillPassivate()</code> 和 <code>sessionDidActivate()</code> 方法来完成监听对象的钝化和活化。所谓的钝化就是将对象序列化到存储设备中去，而活化则是将对象从存储设备中反序列化到内存当中去。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="注册">注册<a class="hash-link" href="#注册" title="标题的直接链接">​</a></h3><p>在创建好监听器类后，需要在项目中设置才能起作用，可以在<strong>web.xml</strong>中去设置，也可以使用 <code>@WebListener</code> 注解注册。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">package listener;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@WebListener  // 此处使用了注解注册该监听器</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class AppListener implements ServletContextListener {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override  // 销毁方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void contextDestroyed(ServletContextEvent arg0) { }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override  // 初始化方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void contextInitialized(ServletContextEvent arg0) { }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><hr><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;!-- 也可以在 web.xml 文件中注册该监听器 --&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;listener&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;listener-class&gt;listener.AppListener&lt;/listener-class&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/listener&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>由上面的 AppListener 监听器类可以看出，实现了 ServletContextListener 接口中 <code>Initialized</code> 和 <code>Destroyed</code> 方法，分别在 application 创建也就是应用启动时执行和在应用关闭时执行。HttpSessionListener 和 ServletRequestListener 监听器接口中同样也规定了这两个方法。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="启动顺序">启动顺序<a class="hash-link" href="#启动顺序" title="标题的直接链接">​</a></h3><p>如果是在 web.xml 中注册的多个监听器，则其启动顺序由注册顺序决定；如果使用的是注解注册，那么启动顺序将是不确定的。</p><p>如果 Web 项目中同时注册了监听器（Listener）、过滤器（Filter）和 Servlet，那么他们启动的优先级如下:</p><blockquote><p><strong>Listener &gt; Filter &gt; Servlet</strong></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="过滤器">过滤器<a class="hash-link" href="#过滤器" title="标题的直接链接">​</a></h2><p>Web 过滤器（Filter）也是一个服务器端的组件，可以截取客户端的请求与响应信息，并对这些信息过滤。过滤器一般用来实现登陆认证和编码转换等功能。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="工作原理">工作原理<a class="hash-link" href="#工作原理" title="标题的直接链接">​</a></h3><p>在用户发出请求之后，过滤器会首先将用户请求截取进行简单的处理，然后再将请求发送至 Web 资源，等待 Web 资源响应之后又会发送给过滤器，然后再次进行简单处理后发送给用户。</p><blockquote><p><strong>用户（发送请求）--&gt; 过滤器 --&gt; Web 资源（响应）--&gt; 过滤器 --&gt; 用户（接受响应）</strong></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="生命周期">生命周期<a class="hash-link" href="#生命周期" title="标题的直接链接">​</a></h3><p>应用启动时，根据配置首先实例化过滤器，然后执行其 <code>init()</code> 方法初始化，随后在用户发送请求后执行 <code>doFilter()</code> 方法进行过滤处理，待应用关闭时则会执行 <code>destory()</code> 方法进行销毁。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="分类-1">分类<a class="hash-link" href="#分类-1" title="标题的直接链接">​</a></h3><p>在 Servlet 2.5 中过滤器分为四类，Servlet 3.0 之后又加入一种异步处理的类型：</p><ul><li>Request ：用户直接访问和请求重定向时</li><li>Forward ：服务器端转发时</li><li>Include ：服务器端转发时</li><li>Error ：跳转到异常或错误页面时</li><li>Async ：异步处理时</li></ul><p>Request 类型的过滤器将在用户直接访问页面或者发生请求重定向（sendRedirect）时会被调用；而 Forward 和 Include 类型的过滤器对应服务器端请求转发（getRequestDispatcher）的 <code>forward()</code> 和 <code>include()</code> 方法，前者会直接转发到另一个页面，而后者会将转发页面的内容与原页面融合。另外，Async 类型的过滤器需要过滤器和 Servlet 开启支持异步处理时才有效。</p><p>所有类型的过滤器均是 <code>Filter</code> 接口的实现类。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="注册-1">注册<a class="hash-link" href="#注册-1" title="标题的直接链接">​</a></h3><p>在创建好过滤器类后，需要在项目中设置才能起作用，可以在<strong>web.xml</strong>中去设置，也可以使用 <code>@WebFilter</code> 注解注册。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">package filter;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 使用注解注册</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@WebFilter(filterName="firstFilter", urlPatterns={"/servlet/GetAndPost"},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dispatcherTypes={DispatcherType.REQUEST})</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class firstFilter implements Filter {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override  // 销毁方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void destroy() { }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override  // 过滤方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void doFilter(ServletRequest arg0, ServletResponse arg1, FilterChain arg2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 放行（必须）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        arg2.doFilter(arg0, arg1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override  // 初始化方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void init(FilterConfig arg0) { }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><hr><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;!-- 也可以在 web.xml 文件中注册该过滤器 --&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;filter&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;filter-name&gt;firstFilter&lt;/filter-name&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;filter-class&gt;filter.firstFilter&lt;/filter-class&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/filter&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;filter-mapping&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;filter-name&gt;firstFilter&lt;/filter-name&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;url-pattern&gt;/servlet/GetAndPost&lt;/url-pattern&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/filter-mapping&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>一个过滤器是可以映射多个路径的，只需在注解中多配置几个 <code>urlPatterns</code> 数组的元素或者在 web.xml 中多添加几组 <code>filter-mapping</code> 标签即可。</p><p><code>init()</code> 方法完成过滤器的初始化，可以用来读取 web.xml 文件中过滤器的参数；<code>doFilter()</code> 完成实际的过滤操作，当用户请求与过滤器相关联的 URL 时，Web 容器将先调用过滤器的该方法，其中 <code>FilterChain</code> 参数可以调用 <code>chain.doFilter()</code> 方法，将请求传递给下一个过滤器或目标资源；<code>destory()</code> 方法可以释放过滤器所占用的资源。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="过滤器链">过滤器链<a class="hash-link" href="#过滤器链" title="标题的直接链接">​</a></h3><p>当多个过滤器映射同一个路径的话就会形成过滤器链，其执行的顺序对应于在 web.xml 文件中注册顺序，如果使用注解注册则顺序是不确定的。</p><p>过滤器链中 <code>doFilter()</code> 代码的执行顺序遵循：依次执行 <code>chain.doFilter()</code> 前的代码，最后传递给 Web 资源，待响应后又反向依次执行 <code>chain.doFilter()</code> 之后的代码。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 第一个 doFilter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void doFilter(request, response, chain) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ... // 执行顺序：1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    chain.doFilter(request, response);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ... // 执行顺序：4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 第二个 doFilter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void doFilter(request, response, chain) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ... // 执行顺序：2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    chain.doFilter(request, response);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ... // 执行顺序：3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="servlet">Servlet<a class="hash-link" href="#servlet" title="标题的直接链接">​</a></h2><p>Servlet 是在服务器上运行的小程序，并且可以通过“请求-响应”编程模型来访问这个驻留在服务器内存中的 Servlet 小程序，其主要的功能在于可以动态的生成 Web 内容。</p><p>我们通常继承实现了 Http 协议的 <code>HttpServlet</code> 抽象类，通过重写 <code>doGet()</code> 与 <code>doPost()</code> 方法来处理用户的请求。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="生命周期-1">生命周期<a class="hash-link" href="#生命周期-1" title="标题的直接链接">​</a></h3><p>用户发送请求后，相应的 Servlet 开始实例化，并执行 <code>init()</code> 方法，完成初始化后开始执行<code>service()</code> 方法响应请求，待到服务器关闭时，将执行 <code>destory()</code> 方法销毁。</p><p>需要注意的是同一个 Servlet 只会在服务器内存中存在一份实例，当第二次请求发出后，不再实例化一个新的 Servlet，而是由第一次请求所得到的 Servlet 实例处理随后的请求。</p><p>另外，Servlet 不一定是在用户首次请求后才进行实例化，可以在注册时进行配置，当应用启动时就进行实例化。而且，当 Servlet 类文件被更改后，服务器会重新装载 Servlet，此时也会销毁原来的实例，重新实例化新的 Servlet 并初始化。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="注册-2">注册<a class="hash-link" href="#注册-2" title="标题的直接链接">​</a></h3><p>在创建好过 Servlet 类后，需要在项目中设置才能起作用，可以在 <strong>web.xml</strong> 中去设置，也可以使用 <code>@WebServlet</code> 注解注册。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">package servlet;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 使用注解注册</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@WebServlet(name="ServletLife", loadOnStartup=1, urlPatterns={"/servlet/ServletLife"},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            initParams={</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @WebInitParam(name="username",value="MrWang"),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @WebInitParam(name="password",value="1314")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">})</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class ServletLife extends HttpServlet {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override  // 初始化方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void init() { }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override  // 销毁方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void destroy() { }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    protected void doGet(request, response) { }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    protected void doPost(request, response) { }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><hr><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;!-- 也可以在 web.xml 文件中注册该 Servlet --&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;servlet&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;servlet-name&gt;ServletLife&lt;/servlet-name&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;servlet-class&gt;servlet.ServletLife&lt;/servlet-class&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/servlet&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;servlet-mapping&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;servlet-name&gt;ServletLife&lt;/servlet-name&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;url-pattern&gt;/servlet/GetAndPost&lt;/url-pattern&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/servlet-mapping&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>doGet()</code> 与 <code>doPost()</code> 方法由 service 方法自动调用，具体调用哪个取决于用户提交请求的方式。<code>load-on-startup</code> 标签或者注解中的 <code>loadOnStartup</code> 属性可以设置 Servlet 在应用启动时就加载，数字越小代表优先级越高。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 后端</category>
            <category>Java</category>
            <category>Listener</category>
            <category>Filter</category>
            <category>Servlet</category>
        </item>
        <item>
            <title><![CDATA[单元测试工具：Junit]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Tools/tools-junit</link>
            <guid>/Computer-Technology/Tools/tools-junit</guid>
            <pubDate>Wed, 30 Aug 2017 23:42:00 GMT</pubDate>
            <description><![CDATA[通常一个项目的代码量是比较大的，而且其中逻辑也较为复杂，在开发完成后再进行项目测试其实是比较耗费时间和精力的，因此边开发边测试是个很好的选择，而 JUnit 则为我们提供了这样的便利。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2017-08-30 23:42:00 </em></p></blockquote><p>通常一个项目的代码量是比较大的，而且其中逻辑也较为复杂，在开发完成后再进行项目测试其实是比较耗费时间和精力的，因此边开发边测试是个很好的选择，而 JUnit 则为我们提供了这样的便利。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="junit">JUnit<a class="hash-link" href="#junit" title="标题的直接链接">​</a></h2><p>JUnit 是一个用来对 Java 代码进行单元测试的框架，是 XUnit （一套基于测试驱动开发的测试框架）的一个子集，类似的还有 PythonUnit、CppUnit。</p><p>JUnit 可以帮助我们进行自动化的单元测试，而不需要我们去编写 <code>main</code> 方法逐一测试，同时其使用断言（assert）机制可以将我们预期的结果和程序运行得到结果进行比对，确保对结果的可预知性。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="使用-junit4">使用 JUnit4<a class="hash-link" href="#使用-junit4" title="标题的直接链接">​</a></h2><p>JUnit 目前已经更新到第 4 个版本，也就是 JUnit4，当然第 5 版也在筹备之中，这里我们使用 Junit4 即可。其实 eclipse 已经集成了 Junit 单元测试框架，我们可以直接使用，而不需要去下载 jar 包导入。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="导入-junit4">导入 JUnit4<a class="hash-link" href="#导入-junit4" title="标题的直接链接">​</a></h3><p>在 eclipse 中新建一个 Java 项目，然后<kbd>右键</kbd>项目，选择 <strong>Build Path -&gt; Add Libraries</strong> ,然后选择 Junit 即可将其添加到项目中。接下来我们创建一个被测试的类，然后再创建一个测试类用来使用 JUnit4 对被测试类进行单元测试。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="进行测试">进行测试<a class="hash-link" href="#进行测试" title="标题的直接链接">​</a></h3><p>Junit4 相对于第 3 个版本来说使用起来更为方便了，只需在测试类的测试方法前面加一个 <code>@Test</code> 注解即可。这里有一个 <code>assertEquals()</code> 方法很有用，其可以帮助我们对程序的期望结果和运行结果进行比对。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void testXXX(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * obj1 : 期望值（我们指定）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * obj2 : 运行值（调用被测试类）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    assertEquals(Object obj1, Object obj2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>测试代码编写完成后，<strong>Run As -&gt; JUnit Test</strong> 即可，只要出现绿色的状态条则代表我们的测试全部成功，如果为红色说明我们有部分测试失败，在状态条下方的测试结果列表中，每一项前面都会标记出来，测试成功的则为对号，失败的为叉。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="代码规范">代码规范<a class="hash-link" href="#代码规范" title="标题的直接链接">​</a></h3><p>需要注意的是，我们应该将测试类和项目被测试类代码分开放置，通常会在项目下 <strong>New -&gt; Source Floder</strong> 命名为 <strong>test</strong> 将测试类代码放入其中，测试类和被测试类的包名应一致，在项目部署时删除这个目录即可。</p><p>另外，测试类的命名应遵循被测试类名加 Test 后缀的规则；而测试类的方法命名应遵循以 test 为前缀加被测试方法名的规则，比如 <code>testXXX()</code>，这样更为规范一些。还有就是，测试方法是公有（public）、无返回值（void）的，并且测试方法之间是相互独立的。</p><p>这里有一个小技巧，通常被测试类的方法会很多，手动编写测试方法耗费时间，我们可以<kbd>右键</kbd>测试类，<strong>New -&gt; Other</strong> 然后选择 <strong>JUnit Test Case</strong>，选中要测试的方法，设置好文件路径即可自动生成一个包含指定测试方法的测试类。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="测试失败分析">测试失败分析<a class="hash-link" href="#测试失败分析" title="标题的直接链接">​</a></h3><p>JUnit 的测试结果是非常直观的，红色状态条代表我们测试失败，其中又分为两种失败类型，分别为 <code>Errors</code> 和 <code>Failures</code>。导致测试失败的原因我们可以在下方的消息栈中看到，其说明了引起测试失败的具体原因。</p><ul><li><p>Errors</p><p>是由于代码异常引起的，可能是测试代码本身的错误，也可能是被测试代码中的错误。</p></li><li><p>Failures</p><p>一般由单元测试的断言方法判断失败所引起的，也就是说程序的运行结果和我们的预期不一样。</p></li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="junit-运行过程">JUnit 运行过程<a class="hash-link" href="#junit-运行过程" title="标题的直接链接">​</a></h2><p>要使用好 JUnit4 这个测试工具，我们应该了解清楚其运行的过程。在 <strong>New -&gt; Other</strong> 新建一个 <strong>JUnit Test Case</strong> 类时，可以勾选四个自动生成的方法：</p><ul><li><p>setUpBeforeClass()</p><p><code>@BeforeClass</code> 标注的静态方法，测试类加载时运行一次，适合加载配置文件。</p></li><li><p>tearDownAfterClass()</p><p><code>@AfterClass</code> 标注的静态方法，所有测试方法执行完成时运行一次，适合清理资源，例如关闭数据库连接。</p></li><li><p>setUp()</p><p><code>@Before</code> 标注的实例方法，每个测试方法执行前运行一次。</p></li><li><p>tearDown()</p><p><code>@After</code> 标注的实例方法，每个测试方法执行后运行一次。</p></li></ul><p>以上四个方法可以帮助我们更好的进行单元测试，当然前提是这些方法运行的时机和作用我们应该知道。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="junit-常用注解">JUnit 常用注解<a class="hash-link" href="#junit-常用注解" title="标题的直接链接">​</a></h2><ul><li>@Test</li><li>@BeforeClass</li><li>@AfterClass</li><li>@Before</li><li>@After</li><li>@Ignore</li><li>@RunWith</li></ul><p><code>@Test</code> 注解标注一个方法为测试方法，除此之外我们还可以设置要捕获的异常和测试时间。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * expected : 表明我们预期会发生的异常，使其不影响测试结果，类似于 throws 关键字</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * timeout : 指定测试的时间（ms），可以用来测试程序性能</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Test(expected=ArithmeticException.class, timeout=2000)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>@Ignore</code> 注解标注一个测试方法被运行器忽略，同时可以标识一些忽略信息。<code>@RunWith</code> 注解用来更改测试运行器。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="junit-深入使用">JUnit 深入使用<a class="hash-link" href="#junit-深入使用" title="标题的直接链接">​</a></h2><p>会利用 JUnit 进行基本的单元测试或许已经满足了我们的需求，然而 JUnit 为我们提供了更加便利的工具。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="测试套件">测试套件<a class="hash-link" href="#测试套件" title="标题的直接链接">​</a></h3><p>测试套件是用来同时测试一整套测试类的，<strong>New -&gt; Other</strong> 然后 <strong>JUnit Test Suite</strong> 即可创建一个测试套件。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 测试套件类</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@RunWith(Suite.class)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@SuiteClasses({ taskTest1.class, taskTest2.class })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class AllTests { }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在创建测试套件时可以勾选需要包含进来的测试类或者测试套件，当然也可以在 <code>@SuiteClasses</code> 注解中手动添加。要注意的是测试套件类必须是一个空类，不能包含任何方法；其次要使用 <code>@RunWith</code> 注解将运行器修改为 <code>Suite.class</code>。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参数化设置">参数化设置<a class="hash-link" href="#参数化设置" title="标题的直接链接">​</a></h3><p>参数化设置可以帮助我们提高代码的重用度，减少类似的代码编写工作量。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">//被测试类</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class Calculate {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 除法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int divide(int a, int b){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return a/b;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 参数化设置的测试类</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@RunWith(Parameterized.class)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class ParameterTest {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 参数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int expected, input1, input2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 用来返回一组参数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Parameters</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static Collection&lt;Object[]&gt; params(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return Arrays.asList(new Object[][]{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            {1,2,2},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            {3,9,3},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            {25, 625, 25}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 构造器</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public ParameterTest(int expected, int input1, int input2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.expected = expected;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.input1 = input1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.input2 = input2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 测试方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void testDivide() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        assertEquals(expected, new Calculate().divide(input1, input2));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>参数化设置的测试类要使用 <code>@RunWith</code> 注解将运行器修改为 <strong>Parameterized.class</strong>。该类中要声明变量来存放预期值和结果值，声明一个 <code>@Parameters</code> 注解标注的返回值为 <code>Collection</code> 的公共静态方法来返回一组参数值，其次还要声明一个带参数的构造方法。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>工具</category>
            <category>测试</category>
            <category>单元测试</category>
            <category>Java</category>
            <category>JUnit4</category>
        </item>
        <item>
            <title><![CDATA[JSP 内置对象、指令与动作]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Java-Web/web-java-jsp</link>
            <guid>/Computer-Technology/Java-Web/web-java-jsp</guid>
            <pubDate>Fri, 11 Aug 2017 11:07:00 GMT</pubDate>
            <description><![CDATA[JSP 全称为 Java Server Page，即 Java 服务器页面，基于简化的 Servlet 设计，是一种建立动态网页的技术标准。JSP 有九个内置对象，可以不加声明和创建就可以在 JSP 页面脚本中直接使用，同时还提供了动作与指令元素，为开发提供了极大地便利。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2017-08-11 11:07:00 </em></p></blockquote><p>JSP 全称为 Java Server Page，即 Java 服务器页面，基于简化的 Servlet 设计，是一种建立动态网页的技术标准。JSP 有九个内置对象，可以不加声明和创建就可以在 JSP 页面脚本中直接使用，同时还提供了动作与指令元素，为开发提供了极大地便利。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="内置对象">内置对象<a class="hash-link" href="#内置对象" title="标题的直接链接">​</a></h2><p>内置对象（built-in object）是 JSP 技术自有的，供开发者在 JSP 页面中直接使用，简化开发过程，提高效率。JSP 提供了九个内置对象：</p><ul><li><p>out</p><p>javax.servlet.jsp.JspWriter，客户端输出。</p></li><li><p>request</p><p>javax.servlet.http.HttpServletRequest，请求信息。</p></li><li><p>response</p><p>javax.servlet.http.HttpServletResponse，响应信息。</p></li><li><p>session</p><p>javax.servlet.http.HttpSession，会话管理。</p></li><li><p>application</p><p>javax.servlet.ServletContext，全局应用管理。</p></li><li><p>pageContext</p><p>javax.servlet.jsp.PageContext，代表 JSP 上下文。</p></li><li><p>config</p><p>javax.servlet.ServletConfig，服务器配置信息。</p></li><li><p>page</p><p>java.lang.Object，代表 JSP 自身，类似 this。</p></li><li><p>exception</p><p>java.lang.Throwable，页面异常信息。</p></li></ul><p>接下来，将对 JSP 的内置对象进行详细的了解，其中有五个较为常用，需着重理解。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="out">out<a class="hash-link" href="#out" title="标题的直接链接">​</a></h3><p>out 对象是 JspWriter 类的实例，常用来向客户端页面输出信息，并且管理应用服务器上的输出缓冲区。在使用 out 对象输出数据时，可以对数据缓冲区进行操作，及时清除缓冲区中的残余数据，为其他的输出让出缓冲空间。待数据输出完毕后，要及时关闭输出流。</p><ul><li>void println() 向客户端打印字符串</li><li>void clear() 清除缓冲区内容，需在 flush() 之前调用</li><li>void clearBuffer() 清除缓冲区内容</li><li>void flush() 将缓冲区内容输出到客户端</li><li>int getBufferSize() 返回缓冲区字节大小</li><li>int getRemaining() 返回缓冲区剩余可用字节数</li><li>boolean isAutoFlush() 返回缓冲区满时，自动清空还是抛出异常</li><li>void close() 关闭输出流</li></ul><blockquote><p><strong>缓冲区</strong>：Buffer，一块用来保存临时数据的内存区域。</p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request">request<a class="hash-link" href="#request" title="标题的直接链接">​</a></h3><p>request 对象是 HttpServletRequest 类的实例，封装了客户端的请求信息，主要用于接受通过 HTTP 协议传送到服务器的数据（包括头信息、系统信息、请求方式以及请求参数等）。其作用域为请求的全过程，在服务器完成响应该请求之前均有效。</p><ul><li>String getParameter(String name) 返回 name 指定参数的值</li><li>String[] getParameterValues(String name) 返回包含参数 name 的所有值的数组</li><li>void setAttribute(String key, Object value) 存储此请求中的属性</li><li>object getAttribute(String key) 返回指定属性的属性值</li><li>String getContentType() 得到请求的 MIME 类型</li><li>String getProtocol() 返回请求用的协议类型及版本号</li><li>String getServerName() 返回接受请求的服务器主机名</li><li>void setCharacterEncoding(String name) 设置客户端的字符集编码</li></ul><p>使用表单提交数据时，会发生中文乱码问题，如果使用的是 Post 提交方式，可以在请求页面使用 <code>setCharacterEncoding()</code> 将字符集编码设置为与提交页面一致即可，推荐 <strong>utf-8</strong>。如果使用的是 URL 传参，也就是 Get 提交方式时，需在服务器配置页面进行设置。</p><blockquote><p><strong>Get 与 Post</strong> <br>
　　 Get 方法是以明文的方式通过 URL 提交数据，最多不超过 2KB，安全性较低，但效率高。而 Post 方法则是将提交的信息封装到 HTML Header 内，适合提交数据量大，且安全性较高的信息。</p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="response">response<a class="hash-link" href="#response" title="标题的直接链接">​</a></h3><p>response 对象是 HttpServletResponse 类的实例，包含了响应客户端请求的信息。其作用域为整个 Jsp 页面，其它页面无效。</p><ul><li>String getCharacterEncoding() 返回响应用的字符集编码</li><li>void setContentType(String type) 设置响应的 MIME 类型</li><li>PrintWriter getWriter() 返回可以向客户端输出字符的对象</li><li>sendRedirect(String location) 重定向客户端的请求</li></ul><p>需要注意的是，通过 <code>getWriter()</code> 得到的 <code>PrintWriter</code> 对象与内置 <code>out</code> 对象均可以向客户端输出字符，但前者总是早于后者输出；这其实是因为 out 对象会将内容先暂存在缓冲区，使用 <code>flush()</code> 方法则可以将其提前输出到客户端。</p><blockquote><p><strong>请求重定向与请求转发</strong> <br>
　　请求重定向，由 <code>response.sendRedirect()</code> 实现，从本质上讲等同于客户端发送了两次请求，第一次的请求信息会丢失，地址栏 URL 会改变，属于客户端行为。请求转发，由 <code>request.getRequestDispatcher().forward(req, resp)</code> 实现，从本质上讲客户端只发送了一次请求，请求信息会保存，地址栏的 URL 不会改变，属于服务器端行为。</p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="session">session<a class="hash-link" href="#session" title="标题的直接链接">​</a></h3><p>session 对象是 HttpSession 类的实例，代表客户端与服务器的一次会话，是由服务器自动创建的与用户请求相关的对象。服务器为每个用户都生成一个 session 对象，用于保存该用户的信息，跟踪用户的操作状态。</p><ul><li>long getCreationTime() 返回 session 创建的时间</li><li>public String getId() 返回 session 的 ID</li><li>public Object setAttribute(String name, Object value) 使用指定名称将对象绑定到此会话</li><li>public Object getAttribute(String name) 返回绑定到此会话的特定对象，没有则为 null</li><li>String[] getValueNames() 返回一个包含次 session 所有可用属性的数组</li><li>int getMaxInactiveInterval() 返回此 session 两次请求之间的超时时限</li><li>void setMaxInactiveInterval() 设置此 session 两次请求之间的超时时限</li></ul><p>从一个客户打开浏览器并连接到服务器开始，到客户关闭浏览器离开这个服务器结束，被称为一个会话。只要当前所有的页面没有全部关闭，此会话在未超时前仍然是有效的；如果当前所有页面全都关闭之后，此会话将会失效。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="application">application<a class="hash-link" href="#application" title="标题的直接链接">​</a></h3><p>application 对象是 ServletContext 类的实例，实现了用户间的数据共享，可存放全局变量。在服务启动时，该对象实例化，直到服务器关闭之前该对象均是有效可用的。</p><ul><li>public void setAttribute(String name, Object value) 设置保存一个属性</li><li>public Object getAttribute(String name) 获取指定属性的值</li><li>Enumeration getAttributeNames() 返回所有属性名的枚举</li><li>String getServerInfo() 返回 JSP(Servlet)引擎名及版本号</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="page">page<a class="hash-link" href="#page" title="标题的直接链接">​</a></h3><p>page 对象是 java.lang.Object 类的实例，指向当前 JSP 页面，类似于 this 指针。</p><ul><li>class getClass() 返回此 Object 的类</li><li>int hashCode() 返回此 Object 的 hash 码</li><li>boolean equals(Object obj) 判断此 Object 与指定的对象是否相等</li><li>void copy(Object obj) 把此 Object 拷贝到指定对象中</li><li>Object clone() 克隆此 Object 对象</li><li>String toString() 把此 Object 转换成 String 类的对象</li><li>void notify() 唤醒一个等待的线程</li><li>void notifyAll() 唤醒所有等待的线程</li><li>void wait(int timeout) 使一个线程处于等待直到 timeout 结束或被唤醒</li><li>void wait() 使一个线程处于等待直到被唤醒</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="pagecontext">pageContext<a class="hash-link" href="#pagecontext" title="标题的直接链接">​</a></h3><p>pageContext 对象是 pageContext 类的实例，提供了对 JSP 页面内所有的对象及名字空间的访问。</p><ul><li>JspWriter getOut() 返回当前客户端响应被使用的 JspWriter 流(out)</li><li>ServletRequest getRequest() 返回当前页的 ServletRequest 对象(request)</li><li>ServletResponse getResponse() 返回当前页的 ServletResponse 对象(response)</li><li>HttpSession getSession() 返回当前页中的 HttpSession 对象(session)</li><li>ServletContext getServletContext() 返回当前页的 ServletContext 对象(application)</li><li>Object getPage() 返回当前页的 Object 对象(page)</li><li>ServletConfig getServletConfig() 返回当前页的 ServletConfig 对象(config)</li><li>Exception getException() 返回当前页的 Exception 对象(exception)</li><li>void setAttribute(String name, Object obj, int scope) 在指定范围内设置属性及属性值</li><li>public Object getAttribute(String name) 取得指定属性的值</li><li>Object getAttribute(String name, int scope) 在指定范围内取属性的值</li><li>int getAttributeScope(String name) 返回某属性的作用范围</li><li>void forward(String relativeUrlPath) 使当前页面重导到另一页面</li><li>void include(String relativeUrlPath) 在当前位置包含另一文件</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="config">config<a class="hash-link" href="#config" title="标题的直接链接">​</a></h3><p>config 对象是 ServletConfig 类的实例，是在一个 Servlet 初始化时，JSP 引擎向它传递信息用的。</p><ul><li>ServletContext getServletContext() 返回含有服务器相关信息的 ServletContext 对象</li><li>String getInitParameter(String name) 返回初始化参数的值</li><li>Enumeration getInitParameterNames() 返回 Servlet 初始化所需所有参数的枚举</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="exception">exception<a class="hash-link" href="#exception" title="标题的直接链接">​</a></h3><p>exception 对象是 java.lang.Throwable 类的实例，是页面中异常对象。如果 JSP 页面要使用此对象，就必须设置 <code>isErrorPage="true"</code>，否则无法编译。如果在 JSP 页面中出现没有捕获到的异常，就会生成 exception 对象，并把 exception 对象传送到在 page 指令中设定的错误页面中，然后在错误页面中处理相应的 exception 对象。</p><ul><li>String getMessage() 返回描述异常的信息</li><li>String toString() 返回关于异常的简短描述消息</li><li>void printStackTrace() 显示异常及其栈轨迹</li><li>Throwable fillInStackTrace() 重写异常的执行栈轨迹</li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="指令">指令<a class="hash-link" href="#指令" title="标题的直接链接">​</a></h2><p>JSP 指令用来设置整个页面相关的属性，如网页的编码方式和所使用的脚本语言。JSP 内置了三大指令，下面就来一一介绍：</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="page-1">Page<a class="hash-link" href="#page-1" title="标题的直接链接">​</a></h3><p>Page 指令为容器提供当前页面的使用说明，如使用的脚本语言和所需要引入的类等，一个 JSP 页面可以包含多个 page 指令。其语法格式如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;%@ page attribute="" %&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>page 指令的常用属性有以下：</p><ul><li><p>language</p><p>指定页面所使用的脚本语言，默认为 Java</p></li><li><p>contentType</p><p>指定页面的 MIME 类型和字符编码</p></li><li><p>import</p><p>导入要使用的 Java 类</p></li><li><p>isErrorPage</p><p>指定当前页面是否可以作为另一个页面的错误处理页</p></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="include">Include<a class="hash-link" href="#include" title="标题的直接链接">​</a></h3><p>Include 指令用来在当前 JSP 页面包含其它文件，JSP、HTML、文本文件均可以。被包含的文件会在当前 JSP 页面编译期间执行，最终只转换成一个 Servlet，编译效率较低，但执行很快，可以称之为静态包含。语法格式如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;%@ include file="文件的相对 url 地址" %&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="taglib">Taglib<a class="hash-link" href="#taglib" title="标题的直接链接">​</a></h3><p>Taglib 指令是为了让用户可以引入自定义的标签库，其语法格式如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;%@ taglib uri="库文件的 uri 地址" prefix="标签库前缀" %&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="动作">动作<a class="hash-link" href="#动作" title="标题的直接链接">​</a></h2><p>JSP 动作元素是在请求阶段执行的，利用其可以动态的插入文件、重用 JavaBean 组件、页面重定向等。JSP 提供了多个动作元素，且每个动作元素都两个常用的属性，下面来看看：</p><ul><li><p>动作元素常见的共有属性</p><ul><li><p>id</p><p>动作元素的唯一标识，可以在 JSP 页面中通过 PageContext 来引用。</p></li><li><p>scope</p><p>用于定义动作元素的作用域范围，其取值可能为：page、request、session、application。</p></li></ul></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="include-1">include<a class="hash-link" href="#include-1" title="标题的直接链接">​</a></h3><p>include 动作元素的作用与 Include 指令一样，可以将 JSP、HTML、文本文件包含到当前页面中，不同的是后者在页面编译期间就将文件包含进去，生成一个 Servlet，而 include 动作则是在请求阶段才将文件包含到当前页面中，最终将会生成两个 Servlet，编译效率高，但执行较慢，可以称之为动态包含。其语法格式如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;jsp:include page="文件相对 url 地址" flush="是否刷新缓冲区" /&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="usebean">useBean<a class="hash-link" href="#usebean" title="标题的直接链接">​</a></h3><p>useBean 动作用来加载一个将在 JSP 页面中使用的 JavaBean，它使得我们可以发挥 Java 组件复用的优势。其语法格式为：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;jsp:useBean id="对象name" class="包含包名的完整类路径" /&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其等价为：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Object obj = new Object();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="setproperty">setProperty<a class="hash-link" href="#setproperty" title="标题的直接链接">​</a></h3><p>setProperty 动作用来设置已经实例化的 Bean 对象的属性，其语法格式如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;!-- 手动指定属性值 --&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;jsp:setProperty name="对象name" property="属性名" value="属性值" /&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;!-- 与请求参数匹配 --&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;jsp:setProperty name="对象name" property="属性名" param="参数名" /&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>需要注意的是，以上两种方式只能选择一种，不能同时出现 <code>value</code> 和 <code>param</code> 属性。如果 setProperty 动作作为 useBean 动作元素的子元素，只有在实例化一个新的 Bean 时才有效，引用已存在的 Bean 实例是无效的。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="getproperty">getProperty<a class="hash-link" href="#getproperty" title="标题的直接链接">​</a></h3><p>getProperty 动作用来获取已经实例化的 Bean 对象的属性，其语法格式如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;jsp:getProperty name="对象name" property="属性名" /&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="forward">forward<a class="hash-link" href="#forward" title="标题的直接链接">​</a></h3><p>forward 动作用来将请求转发到另一个页面，其本质为请求转发，而不是请求重定向。其语法格式为：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;jsp:forward page="相对URL" /&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其等价为：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">request.getRequestDispatcher("URL").forward(request, response);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="param">param<a class="hash-link" href="#param" title="标题的直接链接">​</a></h3><p>param 动作元素是用来传递属性的，常作为 forward 动作元素的子元素存在。示例如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;jsp:forward page="相对URL"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;jsp:param value="属性值" name="属性名" /&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/jsp:forward&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>传递的参数值可以使用 <code>request.getParameter(name)</code> 获取，也可以覆盖掉已有参数的值。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 后端</category>
            <category>Java</category>
            <category>JSP</category>
        </item>
        <item>
            <title><![CDATA[JavaScript 异步编程]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/JavaScript/web-js-async</link>
            <guid>/Computer-Technology/Web/JavaScript/web-js-async</guid>
            <pubDate>Wed, 22 Mar 2017 15:48:00 GMT</pubDate>
            <description><![CDATA[JavaScript 作为一门在 Web 开发中的主流语言，常常涉及到交互事件方面的应用，这不可避免的用到了异步编程的方法，而它本身则是单线程运行的。在以往的开发中，异步编程正变得越来越难管理，新的 Promise 标准 API 将使得异步编程更加方便、安全。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2018-06-03 13:46:00 </em></p></blockquote><p>JavaScript 作为一门在 Web 开发中的主流语言，常常涉及到交互事件方面的应用，这不可避免的用到了异步编程的方法，而它本身则是单线程运行的。在以往的开发中，异步编程正变得越来越难管理，新的 Promise 标准 API 将使得异步编程更加方便、安全。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="异步与并行">异步与并行<a class="hash-link" href="#异步与并行" title="标题的直接链接">​</a></h2><p>作为 Web 前端开发中的主流语言，JavaScript 需要实现诸多的交互动作，但是在宿主环境（例如 v8）中 JS 引擎只有一个主线程，所以多线程并行处理是不可能的。因此，异步编程显得尤为重要。</p><p>异步是时间顺序上的概念，代表着现在与未来某一时刻。最典型的就是发送 Ajax 请求：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$.ajax('', function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // do something</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">});</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>通常我们现在发送一个异步的 Ajax 请求，然后使用函数回调在未来某一时刻执行一些事情。<strong>而函数回调正是我们实现异步编程的一个重要途径。</strong></p><p>同时，并行又是一个重要的概念，它不同于异步，<strong>并行的意义在于同一时间发生什么</strong>。进程和线程独立运行，并可能同时运行，多个线程通常会共享单个进程的内存。这就意味着，具备多线程并发能力的话，同时也会带来诸多的问题。JS 的宿主环境浏览器仅提供了一个主线程，让 Web 开发的难度大大降低，不用考虑多线程并发所带来的诸多问题。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="任务队列">任务队列<a class="hash-link" href="#任务队列" title="标题的直接链接">​</a></h2><p>虽然，JS 没有多线程并发能力，但是并发却是非常有用的。在一个优秀的前端应用中，交互是非常流畅的，这得益于良好的编程能力所模拟出来的并发效果。</p><p>JS 在浏览器中执行的模式是一种任务队列的形式，多个任务排成队等待主线程调用 JS 引擎执行自己的代码。这并不会出现多线程中的竞争状态，但这也意味着糟糕的编程方式可能会因为一个任务而导致整个任务链被阻塞。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">function response(data){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // data 是一个大数组，并要进行遍历处理</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var temp = data;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    temp.map(function(val){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return val * 2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如果说 <code>data</code> 的大小在 1000 左右可以被瞬间处理完成，那么 <code>data</code> 的大小突然变成几十万呢？所以，这样的编程方式很容易因为单个任务导致其它任务被严重阻塞。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">function response(data){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 一次只处理 1000 个</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var temp = data.splice(0, 1000);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    temp.map(function(val){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return val * 2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 剩余的稍后继续处理</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if(data.length &gt; 0){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        setTimeout(function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            response(data);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }, 0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>经过特殊处理之后的程序，一次只处理一部分数据，将一个大任务分割成多个小任务来完成，就会避免阻塞任务链的情况。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="javascript-事件轮询机制">JavaScript 事件轮询机制<a class="hash-link" href="#javascript-事件轮询机制" title="标题的直接链接">​</a></h3><p>在 JS 引擎中，基于单线程采用了事件轮询（event loop）机制来实现高并发，与单核 CPU 处理多任务进程是相似的。<strong>主线程负责处理单个任务（macrotask）的所有流程（microtask），主线程会将同一个任务的所有流程处理完毕之后再去询问任务队列是否有新的任务需要执行，如果有则会将新的一个任务放到主线程去处理，如此往复循环。</strong></p><ul><li><p>macrotask</p><p>我们可以将一个 <code>macrotask</code> 看作一个任务，多个任务存放在任务队列中，等待主线程处理。</p></li><li><p>microtask</p><p>而对于一个任务，我们可以有更细粒度的划分，即多个流程，我们可以将一个 <code>microtask</code> 看作任务的一个流程。</p></li></ul><p><strong>在此基础上，我们可以理解为任务队列包含多个任务（macrotask），而单个任务又包含多个流程（microtask）。</strong>这样我们对业务逻辑的处理可以有更细粒度的掌控，同样地有以下 API 来为我们提供一些解决方案：</p><ul><li>macrotask 系<ul><li><code>setTimeout</code></li><li><code>setInterval</code></li><li><code>setImmediate</code></li><li>I/O</li><li>UI rendering</li></ul></li><li>microtask 系<ul><li><code>process.nextTick</code></li><li><code>Promise</code></li><li><code>MutationObserver</code></li></ul></li></ul><p>举个简单的例子：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">setTimeout(() =&gt; console.log(1));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Promise.resolve(true)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(() =&gt; console.log(2))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(() =&gt; console.log(3))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(() =&gt; console.log(4));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">setTimeout(() =&gt; console.log(5));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// console</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2 3 4 1 5</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>之所以输出顺序是 <code>2 3 4 1 5</code>，就是因为 <code>Promise</code> 属于 microtask 系，也就是说无论有多少个 <code>then</code> 回调，它们都属于同一个任务的不同流程，只有这些流程全部处理完，主线程才会处理下一个任务。</p><p>因此，明白 JS 的事件轮询机制以及任务队列模型，并保持良好的编程习惯会让 Web 应用更流畅。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="函数回调">函数回调<a class="hash-link" href="#函数回调" title="标题的直接链接">​</a></h2><p>函数回调是实现 JS 异步编程的重要途径，基本上绝大多数异步代码都使用了函数回调。当然，事件监听也是我们用来进行异步编程的一种方式，只不过前者更广泛一些。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 最典型的函数回调依然是 ajax 请求</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ajax('', function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // do something</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">});</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 事件也是一种异步编程的方式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$('#id').onclick = function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // do something</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="嵌套回调">嵌套回调<a class="hash-link" href="#嵌套回调" title="标题的直接链接">​</a></h3><p>但是，在较为复杂的应用中，非常有可能出现嵌套回调的情形，这时候代码维护会变的困难起来。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 嵌套回调</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$('#id').addEventListener('click', function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $.ajax('', function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        setTimeout(function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // do something</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }, 1000);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">});</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>也许，在我们当时写的时候会很顺畅，但以后回过头来看，代码维护的工作量会骤升。这里的程序可能还不够复杂，一旦变得更复杂一些，应用的安全将变的脆弱。</p><p>因此，嵌套的函数回调是非常严重的问题，我们期望有一种新的方式去改变这种现状，后面将会讲到 Promise API。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="信任问题">信任问题<a class="hash-link" href="#信任问题" title="标题的直接链接">​</a></h3><p>除此之外，函数回调还有一个非常隐秘的安全问题---信任问题。在这之前，我们假设所有的回调函数最终都会被调用，但事实真是如此吗？</p><p>还是以 jQuery 中 Ajax API 为例，我们都确信传入的回调函数最终会被调用，但这依然是作为 jQuery 团队的第三方来决定的。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 这是一个金融系统</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">function deal(userData, function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 执行交易</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">});</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们很难确保第三方提供的 <code>deal()</code> 方法会在将 <code>userData</code> 进行验证之后执行交易，也就是调用回调函数。万一回调函数被执行了多次，或者一次都没执行，这些都是我们不可预料的问题，但却是极易发生的。</p><p>也许我们每次都能去合理地解决它，但为何不寻找一种一劳永逸又安全的方式呢，新的 Promise API 正是为此而来。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="promise">Promise<a class="hash-link" href="#promise" title="标题的直接链接">​</a></h2><p>我们可以通过以下方式创建一个 Promise :</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">new Promise(function(resolve, reject){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (操作成功){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return resolve(value);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 操作失败</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    reject(error);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">});</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Promise 构造器接受一个方法，该方法有两个参数，一个为 <code>resolve</code> 表示完成，另一个为 <code>reject</code> 表示拒绝，在异步操作完成之后将会根据结果调用其中一个。</p><p>一个 Promise 对象通常会处于三个状态之中的一种：等待（Pending）、完成（Resolved）、拒绝（Rejected）。而且这种状态的改变取决于异步操作，<strong>一旦改变将无法再次被改变</strong>，所以是不可逆的。同样地，<strong>如果 Promise 一旦创建，异步操作就会开始，并且我们是无法中途去中断的</strong>。</p><p>Promise 本质上是一种异步编程的形式，运用的还是回调函数，只不过这种新的形式解决了单纯使用回调函数所存在的信任问题。将函数的调用权不再给予第三方，而是由我们自己来决定何时调用。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="基本-api">基本 API<a class="hash-link" href="#基本-api" title="标题的直接链接">​</a></h3><p>Promise 有几个基本的 API 用来简化我们的异步编程操作，而不需要每次都去使用构造函数创建新的 Promise 对象。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resolve-和-reject">resolve() 和 reject()<a class="hash-link" href="#resolve-和-reject" title="标题的直接链接">​</a></h4><p>如果仅仅是需要一个拒绝状态的 Promise，以下方式是等价的：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var p1 = new Promise(function(resolve, reject){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    reject('error');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">});</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var p2 = Promise.reject('error');</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>Promise.resolve()</code> 通常用来创建一个已完成的 Promise，可能失败也可能成功，根据传入的值来决定。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var p3 = Promise.resolve(value);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>传入的 <code>value</code> 如果是一个 Promise 对象，则它什么也不会做，只是简单的返回该 Promise 的状态值；但是，如果 <code>value</code> 是一个值，它会自动创建一个 Promise 对象并根据值做出决议，然后返回决议值。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="then-和-catch">then() 和 catch()<a class="hash-link" href="#then-和-catch" title="标题的直接链接">​</a></h4><p>前面我们说过，回调函数的嵌套是不利于代码维护的，那么 <code>Promise.then()</code> 则提供了链式的异步操作方式。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var p4 = new Promise(function(resolve, reject){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // do something</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">});</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p4.then(fulfilled, rejected).then(fulfilled, rejected);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>then()</code> 方法的两个参数类似于构造器中回调方法的两个参数，代表着完成和拒绝操作。我们之所以可以进行链式操作，是因为每一个 Promise 的 API 都会最终返回一个 Promise 对象，这样我们就可以更灵活的进行编码。</p><p>有时候，我们只希望单纯的进行错误处理，则可以使用以下的等价方式：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">p4.then(null, rejected);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p4.catch(rejected);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这样并非是没有接收完成状态的决议值，而是将其传入下层的 Promise 对象中。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="all-和-race">all() 和 race()<a class="hash-link" href="#all-和-race" title="标题的直接链接">​</a></h4><p>这两个 API 都是辅助性方法，它们都接受一个 Promise 对象数组作为参数。</p><p><code>Promise.all()</code> 则会在所有传入的 Promise 都处于完成（resolved）状态时，返回完成状态的 Promise，否则返回拒绝状态的 Promise。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var p1 = Promise.resolve(42),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p2 = Promise.resolve('Hello World'),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p3 = Promise.reject('Error');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Promise.all([p1, p2, p3])</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .catch(function(err){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.log(err);  // 'Error'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Promise.all([p1, p2])</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(function(msgs){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.log(msgs);  // [42, 'Hello World']</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    });</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>Promise.race()</code> 会在传入的所有 Promise 中第一个决议完成时，就返回该 Promise。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Promise.race([p1, p2, p3])</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(function(msg){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.log(msg);  // 42</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    });</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>前者若传入一个空数组，它会立即决议完成，而后者会永远处于等待状态。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="局限性">局限性<a class="hash-link" href="#局限性" title="标题的直接链接">​</a></h3><p>首先，Promise 链的决议结果是顺序传递地，也就是说如果其中发生错误或变为拒绝状态，直到遇到第一个 <code>rejected</code> 方法，该错误才会被捕获。同时，因为第一个 <code>rejected</code> 方法已将该错误捕获并处理，此时后续的 Promise 链将失去作用，这在某些情况下不是我们想要的结果。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var p = new Promise(function(resolve, reject){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // do something</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">})</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(step1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(step2)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(step3)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个 Promise 链中没有 <code>rejected</code> 方法，因此一旦发生错误或转变为拒绝状态，决议值将永远得不到处理。</p><p>每一个 Promise 只会产生一个决议值，所以我们应该遵循该规则，在需要返回多个值的程序中，我们尽可能的返回多个 Promise ，将其数组传入 <code>Promise.all()</code> 辅助方法会更好一些。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">function getY(x){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return new Promise(function(resolve, reject){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        setTimeout(function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            resolve(3 * x - 1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }, 100);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 在此返回多个 Promise</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">function foo(bar, baz){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var x = bar * baz;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Promise.resolve(x),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        getY(x)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 进行处理</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Promise.all(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    foo(10, 20)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(function([x, y]){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.log(x, y);  // 200 599</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    });</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里，在最后使用了一个 ES6 中数组解构赋值的特性，使得程序更为简洁。</p><p>在前面我们说过，一旦 Promise 的状态改变，就无法再进行改变了，Promise 是单决议的。这在很多时候有利于程序的安全，但在某些时候却是非常尴尬的，比如交互事件。<code>click</code> 事件每次触发都会进行响应，但 Promise 在第一次触发后就已经决议过，此后再也无法改变状态，这并不是我们想要的效果。</p><p>其次，Promise 一旦创建就无法被终止，我们通过外部来终止一个 Promise 是非常不安全的，因为这会影响其它 Promise 的决议结果。在某些情况下，比如一旦请求超时，我们希望能立即终止 Promise，但目前还没有更安全的方法来解决这个问题。</p><p>Promise 虽然相对于回调函数更方便、简单。安全一些，但其本质还是基于回调函数的，并且比回调函数要做的事情更多。这也就意味着 Promise 的性能可能并不比 回调函数高，但回过头来说，微小的性能损失与极大的便利和安全来说，相信后者是我们选择 Promise 的理由。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="fetch">Fetch<a class="hash-link" href="#fetch" title="标题的直接链接">​</a></h2><p>基于 Promise API，现在为我们提供了简单、方便的 Fetch API 作为一种异步获取数据的备选方案。Fetch 并不能完全替代 Ajax，Fetch 只是简单的提供了异步获取数据的功能，而 Ajax 则提供了一系列的事件机制来帮助我们更细粒度的掌控数据获取过程的情况。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ajaxxmlhttprequest">Ajax（XMLHttpRequest）<a class="hash-link" href="#ajaxxmlhttprequest" title="标题的直接链接">​</a></h3><p>大多时候我们使用的 Ajax API 都是其它辅助库（例如 jQuery）为我们封装好的，而原生的 Ajax 使用是这样的：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var xmlhttp;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (window.XMLHttpRequest){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    //  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    xmlhttp = new XMLHttpRequest();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">} else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // IE6, IE5 浏览器执行代码</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">xmlhttp.onreadystatechange = function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        document.getElementById("myDiv").innerHTML = xmlhttp.responseText;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">xmlhttp.open("GET", "/api/getData", true);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">xmlhttp.send();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看出来，原生的 Ajax 使用起来是比较麻烦的，但同样地，<code>XMLHttpRequest</code> 对象提供了许多事件来为我们提供一些实际需求的解决方案，例如进度显示。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="fetch-更简洁的备选方案">Fetch 更简洁的备选方案<a class="hash-link" href="#fetch-更简洁的备选方案" title="标题的直接链接">​</a></h3><p>然而，更多的场景下我们只是需要异步获取数据即可，不需要那么细粒度的控制，这时候使用 Ajax 反而显得非常麻烦了，于是出现了 Fetch 这种使用起来更简洁的备选方案。</p><p>Fetch 是基于 Promise 的，所以编码风格与其一致。来看看如何使用原生的 Fetch API 获取数据：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">fetch('/api/getData', { method: 'GET' })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(response =&gt; response.json() )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(json =&gt; console.log(json) )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .catch(err =&gt; alert(err.message) );</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>看起来，<code>fetch</code> 使用起来要简单不少，它是在客户端构造一个 <code>Request</code> 对象发送给服务器，然后服务器返回一个 <code>Response</code> 对象返回给客户端；而且也基于 Promise 解决了回调嵌套的问题。</p><p>在使用 Fetch API 的过程中仍然要注意一些问题。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="默认不携带-cookie">默认不携带 Cookie<a class="hash-link" href="#默认不携带-cookie" title="标题的直接链接">​</a></h4><p><strong>fetch 发送请求默认是不携带 Cookie 信息的，不管是同域还是跨域请求；因此，在需要使用 Session-Cookie 机制进行权限验证的场景下，务必配置 <code>credentials</code> 项</strong>：</p><ul><li><code>omit</code>：默认值，请求不携带 Cookie 信息；</li><li><code>same-origin</code>：允许同域请求携带 Cookie 信息，跨域请求则不允许；</li><li><code>include</code>：同域或跨域请求皆携带 Cookie 信息</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">fetch('/api/getData', { method: 'GET', credentials: 'same-origin' })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(response =&gt; response.json() )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(json =&gt; console.log(json) )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .catch(err =&gt; alert(err.message) );</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="仅在请求不能完成时-reject">仅在请求不能完成时 reject<a class="hash-link" href="#仅在请求不能完成时-reject" title="标题的直接链接">​</a></h4><p><strong>因为 fetch 是基于 Promise 的，而服务器响应的 <code>Response</code> 对象中封装的信息（例如响应状态码 200、403 等）不会作为 reject 的条件，而是仅在客户端与服务器端发生网络错误不能顺利完成请求时才会 <code>reject</code>。</strong></p><p>所以，这就需要在服务器返回 <code>Response</code> 对象时我们做一些简单的检验工作。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">fetch('/api/getData', { method: 'GET' })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(response =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // check status</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(response.status === 200){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return response.json();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            throw new Error(response.statusText);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(json =&gt; console.log(json) )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .catch(err =&gt; alert(err.message) );</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get-请求">GET 请求<a class="hash-link" href="#get-请求" title="标题的直接链接">​</a></h4><p>在发送 Get 请求时，参数一般就携带在 <code>url</code> 中。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">fetch('/api/getData?t=' + new Date().getTime(), { method: 'GET' })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(response =&gt; response.json() )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(json =&gt; console.log(json) )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .catch(err =&gt; alert(err.message) );</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="post-请求">POST 请求<a class="hash-link" href="#post-请求" title="标题的直接链接">​</a></h4><p><strong>在发送 Post 请求时，参数只能携带在 <code>body</code> 中，而且即便没有参数，<code>body</code> 也不能为空。</strong>参数通常使用 <code>FormData</code> 对象来构建。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">let formData = new FormData();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">formData.append('username', 'mrwang');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">formData.append('password', '123456');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fetch('/api/postData', {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    method: 'POST',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    body: formData</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">})</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(response =&gt; response.json() )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then(json =&gt; console.log(json) )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .catch(err =&gt; alert(err.message) );</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>更重要的是，现在（2018 年），<code>Fetch API</code> 已经在主流浏览器中获得了广泛的支持，所以不用太担心兼容问题。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《你不知道的 JavaScript》（中卷），<!-- -->[美]<!-- --> Kyle Simpson，单业 姜南 译</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>JavaScript</category>
            <category>异步编程</category>
        </item>
        <item>
            <title><![CDATA[使用 Git]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Tools/tools-git</link>
            <guid>/Computer-Technology/Tools/tools-git</guid>
            <pubDate>Sat, 31 Dec 2016 13:49:00 GMT</pubDate>
            <description><![CDATA[Git 是一个分布式的版本控制工具，类似的版本控制工具还有 SVN ；由于 GitHub 平台的盛行，也使得 git 更加受欢迎，在 Windows 平台使用 git 也是非常方便的。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2022-05-03 17:03:00 </em></p></blockquote><p>Git 是一个分布式的版本控制工具，类似的版本控制工具还有 SVN ；由于 GitHub 平台的盛行，也使得 git 更加受欢迎，在 Windows 平台使用 git 也是非常方便的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="git">Git<a class="hash-link" href="#git" title="标题的直接链接">​</a></h2><p>Git 是一个非常强大的版本控制工具，所谓的版本控制即就是对一个项目的更改进行记录，随后可以进行撤销、查看等功能。对于大型的开源项目，版本控制工具提供了非常大的便利，可以多人同时协作开发。Github 则提供了这样一个平台，使用 git 进行项目维护，世界上大多数的开源项目都在 github 仓库中进行展示。而 github 对程序员也是友好的，因为我们个人也可以使用免费的仓库，来维护自己的项目。</p><p>Git 源于 Linux ，但不仅仅限于 Linux 平台下的使用， Git for Windows 就是最好的选择：</p><blockquote><p><strong>Git for Windows：</strong><a href="https://git-scm.com/" target="_blank" rel="noopener noreferrer">https://git-scm.com/</a></p></blockquote><p>该网站的文档页面提供了很多有用的资源，例如 <a href="https://git-scm.com/book/" target="_blank" rel="noopener noreferrer">Git 相关的书《Pro Git》</a>、<a href="https://training.github.com/" target="_blank" rel="noopener noreferrer">常用 Git 命令备忘单</a>、<a href="https://ndpsoftware.com/git-cheatsheet.html" target="_blank" rel="noopener noreferrer">Git 命令可视化备忘单</a>等等有用的免费资源。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="git-bash">Git Bash<a class="hash-link" href="#git-bash" title="标题的直接链接">​</a></h2><p>Git 在 Windows 下提供了图形用户界面（Git GUI）和命令行（Git Bash）两种操作方式，不过我更推荐使用后者，命令行更快速、简单一些。</p><p>安装好后，我们打开 Bash 终端，可以在界面上 <strong>右键--&gt;Options--&gt;Text</strong>，更改字体大小和字符编码，推荐将字符编码改为 <strong>UTF-8</strong>。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="配置">配置<a class="hash-link" href="#配置" title="标题的直接链接">​</a></h3><p>我们首先可以对 Git 进行简单的配置，使用 SSH 来避免重复提交时每次都要输入密码。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="个人信息">个人信息<a class="hash-link" href="#个人信息" title="标题的直接链接">​</a></h4><p>进行用户名和邮箱的全局配置：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> config --global user.name </span><span class="token string" style="color:#e3116c">"wang1212"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> config --global user.email </span><span class="token string" style="color:#e3116c">"mrwang1212@126.com"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>查看配置信息：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> config --global -l</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ssh-密钥">SSH 密钥<a class="hash-link" href="#ssh-密钥" title="标题的直接链接">​</a></h4><p>安装 SSH 密钥可以在我们进行项目提交时避免重复输入用户名密码，也更安全。可以直接查看 GitHub 官方文档：</p><blockquote><p><strong>Help：</strong><a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="noopener noreferrer">https://help.github.com/articles/generating-an-ssh-key/</a></p></blockquote><p>检查是否已有 SSH 密钥文件：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">ls</span><span class="token plain"> -al ~/.ssh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如果不存在（或者想覆盖），可以生成一个新的 SSH 密钥文件：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ssh-keygen -t rsa -b </span><span class="token number" style="color:#36acaa">4096</span><span class="token plain"> -C </span><span class="token string" style="color:#e3116c">"wangyuan230@163.com"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里使用你的邮箱作为 SSH 密钥标签，该过程中直接全按回车即可。</p><p>得到 SSH 密钥文件后，接下来应该将该密钥添加到 ssh-agent ：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 启动 ssh-agent</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">eval</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable" style="color:#36acaa">ssh-agent -s</span><span class="token variable" style="color:#36acaa">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 添加 SSH</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ssh-add ~/.ssh/id_rsa</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>最后将 SSH 添加到你的 GitHub 账户即可，先将密钥文件复制到剪切板：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">clip </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> ~/.ssh/id_rsa.pub</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后，打开 <a href="https://github.com/login" target="_blank" rel="noopener noreferrer">GitHub</a> 网站登录你的帐户，右上角头像进入 <strong>Settings</strong>，左边导航选择 <strong>SSH and GPG keys</strong>，点击 <strong>New SSH key</strong>，自己命名一个 title，然后将 SSH 文件复制到 key 框中，然后需要输入你的 github 账户密码。</p><p>最后，可以测试一下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">ssh</span><span class="token plain"> -T git@github.com</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>回车后输入 <strong>yes</strong>，如果看到 <strong>Hi {你的用户名}</strong> 一串信息，就说明添加 SSH 密钥成功了。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="https">HTTPS<a class="hash-link" href="#https" title="标题的直接链接">​</a></h4><p>SSH 虽然安全方便，但配置略显复杂。自从大部分网站从 HTTP 升级到 HTTPS 协议后，信息传输安全性也大大提高了，GitHub 目前全站采用了 HTTPS 协议。因此，现在 GitHub 推荐我们使用 HTTPS，即便捷又安全。</p><p>在使用 HTTPS 协议进行一些 git 操作时，为了避免需要重复输入用户名和密码进行验证，git 提供了 <code>credential.helper</code> 配置项来使用第三方凭证管理工具保存用户名和密码，并在需要验证的时候自动进行调用。</p><p>在 Windows 平台安装 git 的时候，默认配置了 <code>credential.helper</code> 为 <code>manager</code>，在 Bash 命令行输入以下命令即可查看到该配置项：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> config --system --list</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">credential.helper</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">manager</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>该配置使得我们在进行 git 操作（push 等）时第一次输入用户名和密码，验证成功后，往后的所有操作不再需要进行重复的手动输入验证。在 Win 菜单搜索<strong>网络密码管理</strong>打开后即可看到保存的 git 服务的用户凭证；同时，登录你的 GitHub Web 客户端后，进入 <strong>Settings -&gt; Developer settings -&gt; Personal access tokens</strong> 即可看到这里增加了一个 token，在这里可以很方便的管理通过 HTTPS 验证的 PC。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="其它配置">其它配置<a class="hash-link" href="#其它配置" title="标题的直接链接">​</a></h4><p>除过以上必须的基本配置外，还有一些比较有用的可选配置。</p><ul><li><code>core.ignorecase=false</code>，开启文件名大小写检查。</li></ul><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> config --global core.ignorecase </span><span class="token boolean" style="color:#36acaa">false</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>由于多个平台（Win/Mac/Linux）对于文件是否相同判断机制不同，部分平台认为文件名大小写不同仍然是同一个文件，而 Linux 却认为是不同的文件，Git 为了兼容默认是忽略掉文件名大小写检查的，这就导致我们重命名（仅修改大小写）文件之后发现提交到远程仓库没有变化，重命名未生效，更改该配置即可。</p><ul><li><code>fetch.prune=true</code>，保持干净的本地分支列表。</li></ul><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> config --global fetch.prune </span><span class="token boolean" style="color:#36acaa">true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>通常，我们会在本地进行多分支开发，其中某些分支只是<strong>暂时的</strong>，后续会合并到其它分支（例如 <code>master</code>），尤其是一般提交的 PR 被合并后会自动删除远程仓库的被合并分支，那么对应的本地分支必须要手动删除，为了自动完成这一过程，保持本地分支列表干净可以配置此选项。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="使用-git">使用 Git<a class="hash-link" href="#使用-git" title="标题的直接链接">​</a></h2><p>下面来看看 git bash 中一些常用的 git 命令，介绍一下其简单的用法，利用 git 来管理我们的代码。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="初始化">初始化<a class="hash-link" href="#初始化" title="标题的直接链接">​</a></h3><p>在创建好一个新文件夹之后，进入该空白文件夹，我们在 git bash 中输入 <code>init</code> 命令即可初始化该文件夹为一个新的 git 仓库。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 初始化仓库</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> init</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>初始化完成后，该文件夹会出现一个隐藏的 <strong>.git</strong> 文件夹，可以使用 <code>ls</code> 命令查看是否已生成该文件夹：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 查看文件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">ls</span><span class="token plain"> -a</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>该文件夹为仓库管理文件，并且是隐藏，一般情况下不要修改其中的文件。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="添加与提交">添加与提交<a class="hash-link" href="#添加与提交" title="标题的直接链接">​</a></h3><p>Git 的工作状态有 3 个，分别为 <strong>工作区（working directory）</strong>、<strong>暂存区（staging index）</strong> 和 <strong>版本库（Repository）</strong>。我们在个人仓库（本地文件夹）中修改代码时，就处于工作区中；修改完成后，需要使用 <code>add</code> 命令将修改好的文件添加到暂存区中；随后，确认无误后我们可以使用 <code>commit</code> 命令将已添加到暂存区的文件提交到版本库中。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 第一步：添加文件到暂存区</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> file_name  </span><span class="token comment" style="color:#999988;font-style:italic"># 例如 git add index.html</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 第二步：将暂存区文件提交到版本库中</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> commit -m </span><span class="token string" style="color:#e3116c">"version_message"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 例如 git commit -m "1.0"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>另外地，为了方便我们可以一次性将当前文件夹（工作区）的所有文件都添加到暂存区中：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 添加工作区所有文件到暂存区</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> </span><span class="token builtin class-name">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当然了，我们还可以将添加与提交操作合二为一，跳过暂存区：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 一次性添加与提交工作区文件到版本库</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> commit -am </span><span class="token string" style="color:#e3116c">"version_message"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="调试技巧">调试技巧<a class="hash-link" href="#调试技巧" title="标题的直接链接">​</a></h4><p>这里有一个小技巧，通常为了测试一些 hook 事件程序（例如 <a href="https://typicode.github.io/husky" target="_blank" rel="noopener noreferrer">husky</a>），我们会做一下某些文件的细微改动然后提交来触发相应事件，但 <code>--allow-empty</code> 选项可以让我们更方便一些：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 直接执行即可，不用改动任何文件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> commit --allow-empty -m </span><span class="token string" style="color:#e3116c">'it works!'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="查看信息">查看信息<a class="hash-link" href="#查看信息" title="标题的直接链接">​</a></h3><p>如果能随时查看仓库中文件的修改情况以及与版本库中文件进行对比的结果可以方便很多，其实使用 <code>status</code> 和 <code>log</code> 命令即可查看所需要的信息。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 查看目前文件修改情况（是否已添加、提交）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> status</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 查看已提交的文件日志</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> log</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="撤销操作">撤销操作<a class="hash-link" href="#撤销操作" title="标题的直接链接">​</a></h3><p>当我们将文件修改后，如果发现更改并不恰当，需要回滚到修改之前的状态时，可以撤销我们的更改操作。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 撤销工作区改动，将暂存区文件覆盖到工作区</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> checkout -- file_name</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个命令所做的就是用暂存区中的文件来覆盖工作区已被修改的文件，从而实现撤销工作区的修改操作。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 撤销暂存区改动，将版本库文件覆盖到暂存区</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> reset HEAD -- file_name</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>而这个命令所做的则是用版本库中的文件来覆盖暂存区中已被修改的文件，从而实现撤销暂存区的修改操作。这里的 <strong>HEAD</strong> 指的是最近一次提交操作，可以将其更换为你需要撤销的提交操作的 ID 号，可以使用 <code>log</code> 命令查看提交信息中的 ID。</p><p>实际上，先撤销暂存区改动，再撤销工作区改动，就可以将版本库中的文件恢复到工作区中。另外，还可以撤销提交操作并重新进行提交，这个命令可以用来修改提交信息和内容。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 第一次提交</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> commit -m </span><span class="token string" style="color:#e3116c">"version 1.0"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 撤销上次提交修改提交信息并重新提交</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> commit --amend</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="删除操作">删除操作<a class="hash-link" href="#删除操作" title="标题的直接链接">​</a></h3><p>有时候我们可能把不需要添加到暂存区的文件给添加到了暂存区，这时候可以使用以下命令将其在暂存区中删除：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 仅删除暂存区中的文件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rm</span><span class="token plain"> --cached file_name</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当然，也有可能我们想直接删除掉工作区和暂存区中的文件：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 同时删除工作区与暂存区中的文件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rm</span><span class="token plain"> -f file_name</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>除此之外，还有一种情况就是我们在工作区将同一个文件重命名后，需要删除原有在暂存区中的文件，添加新的文件到暂存区中，但是它们的文件内容是相同的。所以，直接可以进行重命名操作：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">mv</span><span class="token plain"> old_filename new_filename</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="远程仓库">远程仓库<a class="hash-link" href="#远程仓库" title="标题的直接链接">​</a></h3><p>通常，我们会将代码库推送到远程的代码托管平台上进行管理，例如：</p><ul><li><a href="https://github.com/" target="_blank" rel="noopener noreferrer">Github</a></li><li><a href="https://about.gitlab.com/" target="_blank" rel="noopener noreferrer">Gitlab</a></li><li><a href="https://bitbucket.org/" target="_blank" rel="noopener noreferrer">BitBucket</a></li><li><a href="https://gitee.com/" target="_blank" rel="noopener noreferrer">Gitee（开源中国）</a></li></ul><p>在其它设备上就可以从远程仓库拉取代码：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 可指定文件夹名称，不指定的话与仓库同名</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> clone </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">rep_url</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">dir_name</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 查看本地仓库关联的远程仓库</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> remote -v</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 查看本地仓库分支关联的远程仓库分支</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> branch -vv</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">在本地仓库完成开发后，经过 </span><span class="token variable" style="color:#36acaa">`</span><span class="token variable function" style="color:#d73a49">add</span><span class="token variable" style="color:#36acaa">`</span><span class="token plain">、</span><span class="token variable" style="color:#36acaa">`</span><span class="token variable" style="color:#36acaa">commit</span><span class="token variable" style="color:#36acaa">`</span><span class="token plain"> 之后，即可推送到远程仓库进行同步：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 推送到远程仓库，默认为 origin 仓库，当前分支</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> push </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">origin</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">current_branch</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如果是通过 <code>git clone</code> 从远程仓库拉取到本地的，可以看到会有一个默认的 <code>origin</code> 远程仓库；但是，如果是在本地建立的仓库，没有与远程仓库关联，可以先添加一个远程仓库，然后在推送时指定一个远程仓库，或者将本地仓库与远程仓库关联：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 添加远程仓库</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> remote set-url </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">rep_url</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># or</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> remote </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">rep_url</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>在推送时指定一个远程仓库</li></ul><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> push --set-upstream </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">remote</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">remote_branch</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>将本地分支与远程分支关联</li></ul><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> branch --set-upstream-to</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">remote</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">/</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">remote_branch</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">local_branch</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="多仓库同步">多仓库同步<a class="hash-link" href="#多仓库同步" title="标题的直接链接">​</a></h3><p>鉴于一个平台可能存在风险，可以将代码托管在多个平台上，例如国外 Github，国内 Gitee，实现的具体方式就是将本地仓库同时与多个远程仓库关联，即可实现在 <code>push</code> 时给多个远程仓库同步推送更新：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 在某个 remote 下添加额外一个远程仓库</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> remote set-url --add </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">new_rep_url</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="分支管理">分支管理<a class="hash-link" href="#分支管理" title="标题的直接链接">​</a></h2><p>Git 是一个版本控制工具，可以实现多人协作处理同一个项目的代码，同时又互不发生冲突。而要实现多人协作互不发生冲突，团队成员就不能同时操作同一个文件，于是 Git 中有一个分支（branch）的概念需要我们弄清楚，因为就是它解决了这个关键的问题。</p><p>当首次提交文件到版本库时，会自动创建一个 <strong>主分支（master）</strong>，多人协作时我们不能同时在主分支上操作，因为会发生冲突。所以，我们可以从主分支（master）上分出多个副分支来，就像从一颗树的主干上长出多个分叉枝节一样，我们在这些副分支上进行修改操作。当修改完成后，我们再将副分支上的更改合并到主分支（master）上即可，这样就不会出现多人同时操作同一个文件的冲突。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="查看分支">查看分支<a class="hash-link" href="#查看分支" title="标题的直接链接">​</a></h3><p>在项目第一次提交到版本库时，会自动创建一个主分支（master），随后就可以创建副分支了。当我们想查看该项目的分支情况时，使用 <code>branch</code> 命令即可。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 查看项目分支</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> branch</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="创建分支">创建分支<a class="hash-link" href="#创建分支" title="标题的直接链接">​</a></h3><p>在 master 分支上我们可以创建多个副分支并自己命名，使用以下命令即可：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 创建新的分支，但不切换</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> branch branch_name  </span><span class="token comment" style="color:#999988;font-style:italic"># 例如 git branch dev</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="切换分支">切换分支<a class="hash-link" href="#切换分支" title="标题的直接链接">​</a></h3><p>切换分支就是 <code>checkout</code> 命令：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 切换到另一个分支上</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> checkout branch_name  </span><span class="token comment" style="color:#999988;font-style:italic"># 例如 git checkout dev</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其实，我们可以直接在创建新分支时切换到新分支上去：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 创建新的分支，并切换到新分支</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> checkout -b branch_name</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="重命名分支">重命名分支<a class="hash-link" href="#重命名分支" title="标题的直接链接">​</a></h3><p>可以使用以下命令来更改一个已有副分支（因为主分支是不能重命名）的名字：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 重命名已有的副分支</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> branch -m old_branchname new_branchname</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="删除分支">删除分支<a class="hash-link" href="#删除分支" title="标题的直接链接">​</a></h3><p>当我们想删除一个分支时，先切换到其它分支上去，再使用以下命令：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 删除已有的副分支，注意先切换到其它分支</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> branch -d branch_name</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="合并分支">合并分支<a class="hash-link" href="#合并分支" title="标题的直接链接">​</a></h3><p>当副分支上的工作完成后，就需要将副分支合并到主分支上去，此时应先切换到主分支上去，再使用 <code>merge</code> 命令：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 合并分支，注意先切换到主分支上去</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> merge branch_name</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="对比差异">对比差异<a class="hash-link" href="#对比差异" title="标题的直接链接">​</a></h3><p>很多时候我们需要查看工作区与暂存区、暂存区与版本库、分支与分支等等之间文件的具体改动的差异信息，使用 <code>diff</code> 命令即可：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 对比工作区与暂存区的文件差异</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">diff</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 对比暂存区与版本库的文件差异</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">diff</span><span class="token plain"> --staged</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 对比分支与分支的文件差异</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">diff</span><span class="token plain"> other_branchname</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>除此之外，还可以对比两次提交版本的文件差异，在 diff 命令后跟要对比的两次提交操作的 ID 号即可。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="保存工作区状态">保存工作区状态<a class="hash-link" href="#保存工作区状态" title="标题的直接链接">​</a></h3><p>当我们在一个分支上改动了工作区的文件，没有添加到暂存区并提交到版本库时，使用 <code>checkout</code> 切换分支时就会失败，因为这样会丢失工作区的更改。我们可以提交后再切换分支，当然也可以使用 <code>stash</code> 命令将此分支的工作区状态保存下来再切换到别的分支，之后回到该分支可以还原工作区的状态。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 保存当前分支工作区状态</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> stash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 查看所有分支已保存的工作区状态及其序号</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> stash list</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>保存了工作区状态之后，我们可以在任意分支下将保存的工作区状态与当前工作区状态合并，先查看保存的工作区状态序号：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 合并当前工作区与已保存工作区，不删除已保存状态</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> stash apply stash@</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">num</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 例如 git stash apply stash@{0}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>合并之后，可以删除掉已保存的工作区状态，同样地先查看保存的工作区状态序号：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 删除已保存的工作区状态</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> stash drop stash@</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">num</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当然，为了方便我们可以一次性完成合并工作区与删除已保存的工作区状态：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 合并工作区状态，并删除已保存的工作区状态</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> stash pop stash@</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">num</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考资料">参考资料<a class="hash-link" href="#参考资料" title="标题的直接链接">​</a></h2><p>以上是对使用 Git 最常见场景的一些指导，这里再记录一些非常好的学习资料，方便学习和查阅。</p><ul><li>Git 命令学习<ul><li><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener noreferrer">Learning Git Branching</a></li><li><a href="https://gitexplorer.com/" target="_blank" rel="noopener noreferrer">Git Command Explorer</a></li></ul></li><li>Git 工作流模型<ul><li><a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener noreferrer">Git Flow</a></li><li><a href="https://docs.gitlab.com/ee/topics/gitlab_flow.html" target="_blank" rel="noopener noreferrer">GitLab Flow</a></li><li><a href="http://githubflow.github.io/" target="_blank" rel="noopener noreferrer">GitHub Flow</a></li></ul></li><li>GUI 客户端<ul><li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener noreferrer">Sourcetree</a></li></ul></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>工具</category>
            <category>Git</category>
        </item>
        <item>
            <title><![CDATA[Ruby-元编程之类]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Ruby/ruby-meta-class</link>
            <guid>/Computer-Technology/Ruby/ruby-meta-class</guid>
            <pubDate>Thu, 08 Dec 2016 21:07:00 GMT</pubDate>
            <description><![CDATA[这篇文章讲述关于 Ruby 中类相关的知识，这也是面向对象语言的核心。事实上，有很多编程语言都具备元编程的能力，而 Ruby 则是将元编程发挥到极致的语言。元编程这个概念是模糊的，很多人都说是用代码生成代码的方式，不过我们不用去纠结这个概念。元编程最具有魅力的地方就是，原来我们还可以在程序运行时去操控代码。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-12-08 21:07:00 </em></p></blockquote><u>本文的代码均在 Ruby 2.3.0 环境下测试通过。</u><br><br><p>这篇文章讲述关于 Ruby 中类相关的知识，这也是面向对象语言的核心。事实上，有很多编程语言都具备元编程的能力，而 Ruby 则是将元编程发挥到极致的语言。元编程这个概念是模糊的，很多人都说是用代码生成代码的方式，不过我们不用去纠结这个概念。元编程最具有魅力的地方就是，原来我们还可以在程序运行时去操控代码。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="类">类<a class="hash-link" href="#类" title="标题的直接链接">​</a></h2><p>我们都知道在面向对象编程中，我们大多数时候都是用类（class）在封装方法和变量，而 Ruby 中的类继承自模块（Module），接下来应该深入到类（模块）中去了解对象模型。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="当前类">当前类<a class="hash-link" href="#当前类" title="标题的直接链接">​</a></h3><p>无论我们的程序运行到哪里，总会存在一个当前对象 <code>self</code>，而对象是所属类的实例，所以也就存在一个当前类。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">result = class A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    self</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p result  # ==&gt; A</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>特别的是，类也是一个对象，它是 <code>Class</code> 类的实例，充当当前对象 <code>self</code>；但此时的当前类我们更愿意定义为该 <code>self</code> 指向的类，而不是 <code>Class</code>，因为前者是有意义的。</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">result.class_eval do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def speak</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p result.instance_methods(false)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [:speak]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>除过使用 <code>class</code> 关键字打开一个类外，我们也可以使用类调用 <code>class_eval()</code> 方法打开一个类，不过后者并没有创建一个独立的作用域，而是块作用域，块中 <code>self</code> 指向类自身；它和 <code>instance_eval()</code> 方法是相似的。</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">result.class_exec(:speak) do |name|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    define_method(name) do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p result.instance_methods(false)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [:speak]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>class_eval()</code> 方法不允许传递块参数，而 <code>class_exec()</code> 方法会将方法参数传递给块参数。</p><p><strong>在类（类方法）定义中，<code>self</code> 指向当前对象，当前对象也是当前类；而在实例方法定义中，<code>self</code> 指向当前对象，当前类则是当前对象的所属类。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="类实例变量">类实例变量<a class="hash-link" href="#类实例变量" title="标题的直接链接">​</a></h3><p>类本身也是一个对象，所以我们可以在类中定义类实例变量，这和对象实例变量是一样的，是该类独有的。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @var1 = "class_instance_variable"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def initialize</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @var2 = "instance_variable"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p A.instance_variables</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [:@var1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p A.new.instance_variables</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [:@var2]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>也就是说，<strong>实例变量定义时是绑定在<code>self</code>指向的当前对象身上的，它是该对象独有的变量。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="类变量">类变量<a class="hash-link" href="#类变量" title="标题的直接链接">​</a></h3><p>Ruby 中还有一种变量叫做类变量，它不是属于某个类（对象）的变量。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @@var = "class_variable"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class B &lt; A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p A.class_variables</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [:@@var]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p B.class_variables</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [:@@var]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从该示例可以看出，我们定义在父类中的类变量被子类继承了，<strong>所以类变量不是单独属于某个类的变量，而是被类继承链共享的变量。</strong></p><p>所以在选择上来说，如果不希望子类继承父类的变量，我们应该选择类实例变量，这样大多时候更安全一些。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="类方法">类方法<a class="hash-link" href="#类方法" title="标题的直接链接">​</a></h3><p>类方法事实上是一种特殊的方法，Ruby 把它命名为单例方法（singleton_method）。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def self.new_method</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p A.singleton_methods</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [:new_method]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>单例方法定义时通常直接指定接受者，这样就会将该方法的调用权限限制在该接受者上，其他对象是无法调用该方法的。</strong>其实，所谓的单例也就是这个意思，即单个实例对象的方法；而这区别于一个类的所有实例化对象共同拥有类中实例方法。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def one_method</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">a = A.new</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">b = A.new</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">def b.other_method</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p a.public_methods(false)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [:one_method]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p b.public_methods(false)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [:other_method, :one_method]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>该示例说明了类中的实例方法 <code>one_method()</code> 是该类的所有实例对象共有的，而我们给其中一个对象定义了单例方法 <code>other_method()</code>，该方法则是该单个实例所有的。</p><p>单例方法是相当有用的，当我们要单独给某个对象增加一些方法时，就不需要去另外创建一个类了。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="类宏">类宏<a class="hash-link" href="#类宏" title="标题的直接链接">​</a></h3><p>Ruby 的对象默认是封装的，不允许外部直接访问对象的实例变量，所以就需要去定义 <code>getter()</code> 和 <code>setter()</code> 方法。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Person</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return @name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def name=(new_name)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @name = new_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其实，这一组读、写方法是没什么技术含量的，尤其是有多个需要外部访问的实例变量时，这样的写法反而使代码显得冗余。所以，我们需要更优雅的方式来解决这个问题。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Person</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    attr_accessor :name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这就是 Ruby 给我们提供的解决方案，这显得优雅多了。<code>attr_accessor()</code> 可接受多个参数，这些参数被作为实例变量的名称各创建一组读、写方法；同样地，<code>attr_reader()</code> 用来创建实例变量的读方法，<code>attr_writer()</code> 则用来创建实例变量的写方法。</p><p>对于多个实例变量我们只需使用同一个方法声明式地动态创建它们各自的读、写方法，这样的技术称之为类宏。<strong>类宏的意义在于，对于业务逻辑非常相似的行为，我们不需要自己去一个个实现，我们可以写一个通用的模版然后提供一个方法接口来动态实现。</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Person</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def self.attr_my_method(*variables)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        variables.each do |var|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            define_method(var) { instance_variable_get("@#{var}") }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            define_method("#{var}=") { |value| instance_variable_set("@#{var}", value) }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    attr_my_method :name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p Person.instance_methods(false)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [:name, :name=]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">a = Person.new</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p a.instance_variables  # ==&gt; []</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">a.name = "MrWang"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p a.name  # ==&gt; "MrWang"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p a.instance_variables  # ==&gt; [:@name]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>看吧，其实我们自己也可以实现一个类似的定义实例变量读、写方法的统一接口方法 <code>attr_my_method()</code>，类宏完美的诠释了动态生成代码的元编程能力。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="单例类">单例类<a class="hash-link" href="#单例类" title="标题的直接链接">​</a></h2><p>前面刚说过类方法其实是个单例方法（singleton_method），作为一个实例对象独有的方法，它肯定是不存在于该对象所属类中的，同时它也不可能存在于该对象身上，因为对象自身只存在实例变量，实例方法只不过是个引用而已。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def self.new_method</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p self.class</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    class &lt;&lt; self</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        p self.class</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        p self.instance_methods(false)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; Class</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; Class</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [:new_method]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>Test</code> 是 <code>Class</code> 类的实例对象，我们通过 <code>class</code> 关键字又创建了一个独立作用域，然后我们发现这也是个类，是一个匿名类，而且 <code>new_method()</code> 方法竟然是该类的实例方法。于是，我们大胆的想象 Test 真正的所属类并不是 Class 类，而是这个匿名类。</p><p>其实，对象的 <code>class()</code> 方法骗了我们，该方法刻意隐藏了对象真正的所属类，它返回的是我们期望的结果，但不是正确的结果。<strong>对象真正的所属类是一个单例类（singleton_class），它只有一个实例也就是该对象，单例方法是存在于该类中的，这也就解释了为什么单例方法只有该对象独有了。</strong>我们有时候也称之为特征类（eigenclass）、匿名类、元类（metaclass）。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">p Test.singleton_class.instance_methods(false)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [:new_method]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们可以调用对象的 <code>singleton_class()</code> 方法来获取到单例类的引用。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="继承链">继承链<a class="hash-link" href="#继承链" title="标题的直接链接">​</a></h3><p>单例类的存在似乎让 Ruby 的继承链变得更复杂了，现在我们深入到继承链中去看看。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">p Test.ancestors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [Test, Object, Kernel, BasicObject]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p Test.singleton_class.ancestors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [#&lt;Class:Test&gt;, &lt;Class:Object&gt;, #&lt;Class:BasicObject&gt;, Class, Module, Object, Kernel, BasicObject]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>ancestors()</code> 方法可以获取类的继承链，我们发现 <code>Test</code> 的继承链正是我们期望的，而 <code>Test.singleton_class</code> 的继承链也并没有与前者发生冲突，它们像是两条平行线。<strong>也就是说，一个类依次继承自超类，而该类的单例类也依次继承自超类的单例类，前者与后者的继承链是平行的。</strong></p><p>类方法是单例方法，但是子类却可以调用父类的类方法，从单例类的继承链可以很好的理解这是为什么。<strong>单例方法是单例类的实例方法，会随单例类继承链依次继承下来，所以子类可以调用父类的类方法也就不奇怪了。</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">p Test.new.singleton_class.ancestors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [#&amp;lt;Class:#&amp;lt;Test:0x00000002766d60&amp;gt;&amp;gt;, Test, Object, Kernel, BasicObject]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>而对于一个类的实例化对象来说，该实例的单例类继承自所属类的继承链，所以说实例对象的方法调用过程中，方法查找（Method Lookup）的起点并不是所属类而是单例类。</strong>因此，单例方法是会覆盖所属类中同名实例方法的。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="单例方法">单例方法<a class="hash-link" href="#单例方法" title="标题的直接链接">​</a></h3><p>下面，我们就来看看如何定义单例方法。大致的方法就两种，打开单例类定义与不打开单例类定义，但最终单例方法都是存在于单例类中的。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 打开单例类定义单例方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class &lt;&lt; obj</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def new_singleton_method</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以使用 <code>class &lt;&lt; 对象引用</code> 的方式打开单例类，在其中定义单例方法，这种方式会创建一个独立作用域。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 直接在对象上定义单例方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">def obj.new_singleton_method</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>也可以使用 <code>对象引用.方法名</code> 的方式直接定义对象的单例方法，前面一直演示的类方法就采用的这种方式。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 在对象上下文中定义单例方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obj.instance_eval do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def new_sinleton_method</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>instance_eval()</code> 与 <code>instance_exec()</code> 方法都会获取对象的上下文（作用域），在其中也可以定义单例方法。事实上，这也是打开了对象的单例类，我们打印块中的 <code>self</code> 就能明白。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="方法">方法<a class="hash-link" href="#方法" title="标题的直接链接">​</a></h2><p>我们通过对类（模块）深入的理解，了解了单例类和单例方法，对对象模型有了更深刻的认识。而方法又是类（模块）中的主角，下面来了解一下有关方法的新技术。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="对象扩展">对象扩展<a class="hash-link" href="#对象扩展" title="标题的直接链接">​</a></h3><p>Ruby 的类是不支持多继承的，但提供了 MixIn 这种优雅的解决方案，通过 <code>include()</code> 与 <code>prepend()</code> 方法就可以将模块中的实例方法包含进目标类中，实现多重继承。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">module MyModule</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def other_method</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class MyClass1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    include MyModule</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class MyClass2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    prepend MyModule</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p MyClass1.ancestors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [MyClass1, MyModule, Object, Kernel, BasicObject]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p MyClass1.instance_methods.include?(:other_method)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p MyClass2.ancestors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [MyModule, MyClass2, Object, Kernel, BasicObject]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p MyClass2.instance_methods.include?(:other_method)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>可以看出两个方法都是将模块加入了继承链中，不过 <code>include()</code> 方法将模块作为该类的超类，意味着该类中的方法则会覆盖掉模块中的同名方法；而 <code>prepend()</code> 方法将模块作为该类的子类，意味着模块中的方法会覆盖掉该类中的同名方法。</strong></p><p>不过，它实际上是将模块中的实例方法添加到了该类中，扩展了类的实例方法，因为类也是对象所以称为对象扩展，但为了区分实例对象，我们称之为<strong>类扩展</strong>。</p><p>类扩展是添加了实例方法，并没有扩展类对象本身；我们如果把类看做一个对象的话，在单例类中使用 <code>include()</code> 与 <code>prepend()</code> 方法，则会为类自身添加单例方法，我们称为 <code>对象扩展</code>。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class MyClass1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    class &lt;&lt; self</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        include MyModule</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p MyClass1.singleton_class.ancestors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [#&amp;lt;Class:MyClass1&amp;gt;, MyModule, #&amp;lt;Class:Object&amp;gt;, #&amp;lt;Class:BasicObject&amp;gt;, Class, ...]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p MyClass1.singleton_class.instance_methods.include?(:other_method)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>打开单例类反而显得繁琐，我们可以使用 <code>extend()</code> 方法实现同样的对象扩展的效果，它适用任何对象。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class MyClass1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    extend MyModule</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="钩子方法">钩子方法<a class="hash-link" href="#钩子方法" title="标题的直接链接">​</a></h3><p>我们知道调用方法其实是一个消息传递的过程，如果这个消息被传送给接受者时同时也被另一个方法捕获，那么这样的场景就是运行了钩子方法。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">module MyModule</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def self.included(mixIn_class)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        p "Me was mixed into #{mixIn_class}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class MyClass</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    include MyModule</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def self.inherited(sub_class)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        p "Me was inherited by #{sub_class}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; "Me was mixed into MyClass"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class SubClass &lt; MyClass</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; "Me was inherited by SubClass"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里的 <code>included()</code> 与 <code>inherited()</code> 方法就是两个钩子函数，它们在模块自身被混入的时候捕获混入类的信息，以及在类自身被子类继承的时候捕获子类信息。其实只要得到混入类和子类的引用可以干很多事，在这里只是简单的打印了一行消息。</p><p>当然，Ruby 里的钩子方法远不止这些，像我们定义一个方法时其实就是在给类添加方法，这时的钩子方法就为 <code>method_added()</code>，类似的还有很多，我们可以合理的运用钩子方法做一些特殊的处理。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="方法别名">方法别名<a class="hash-link" href="#方法别名" title="标题的直接链接">​</a></h3><p>如果我们的项目依赖于一个库，而该库中某个方法我们正好需要部分修改，但是我们又无法直接访问该库源文件，我们并不想直接覆盖重写，因为我们发现我们对该方法的内部实现细节并不知道。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Object</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 方法别名</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    alias :original_to_s :to_s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def to_s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "I will be changed to string --&gt; " + original_to_s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p Object.new.to_s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; "I will be changed to string --&gt; #&amp;lt;Object:0x0000000283c320&amp;gt;"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>使用 <code>alias</code> 关键字，以 <code>alias :new_name :old_name</code> 的形式即可将一个方法指定给两个不同的方法签名，然后我们可以重新定义旧的方法签名的实现，同时依然可以使用新方法签名去调用原来的方法。这样就解决了我们不清楚旧方法内部实现细节又想进行微修改的目的。</p><p><code>alias_method()</code> 方法具有相同的作用。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="删除方法">删除方法<a class="hash-link" href="#删除方法" title="标题的直接链接">​</a></h3><p>Ruby 中父类的所有实例方法都会被子类继承，使用 <code>public、protected、private</code> 关键字只不过是修改了方法调用权限而已。有时候，我们可能不想让一个子类继承父类的某些方法，但不能直接删除父类中的方法，否则会影响父类的其他子类继承该方法。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def a_method</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class B &lt; A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 删除继承自A的方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    undef :a_method</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def b_method</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class C &lt; A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def c_method</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p B.instance_methods.include?(:a_method)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p C.instance_methods.include?(:a_method)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>使用 <code>undef()</code> 或者 <code>undef_method()</code> 方法都可以将多个实例方法从类中删除。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《Ruby 元编程》，<!-- -->[意]<!-- --> Paolo Perrotta，廖志刚 译</li><li>《Ruby 基础教程》，<!-- -->[日]<!-- --> 高桥征义 后藤裕藏，何文斯 译</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Ruby</category>
            <category>元编程</category>
            <category>Class</category>
        </item>
        <item>
            <title><![CDATA[Ruby-元编程之代码块]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Ruby/ruby-meta-block</link>
            <guid>/Computer-Technology/Ruby/ruby-meta-block</guid>
            <pubDate>Mon, 05 Dec 2016 15:33:00 GMT</pubDate>
            <description><![CDATA[这篇文章讲述关于 Ruby 中代码块相关的知识，这也是 Ruby 的特色。事实上，有很多编程语言都具备元编程的能力，而 Ruby 则是将元编程发挥到极致的语言。元编程这个概念是模糊的，很多人都说是用代码生成代码的方式，不过我们不用去纠结这个概念。元编程最具有魅力的地方就是，原来我们还可以在程序运行时去操控代码。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-12-05 15:33:00 </em></p></blockquote><u>本文的代码均在 Ruby 2.3.0 环境下测试通过。</u><br><br><p>这篇文章讲述关于 Ruby 中代码块相关的知识，这也是 Ruby 的特色。事实上，有很多编程语言都具备元编程的能力，而 Ruby 则是将元编程发挥到极致的语言。元编程这个概念是模糊的，很多人都说是用代码生成代码的方式，不过我们不用去纠结这个概念。元编程最具有魅力的地方就是，原来我们还可以在程序运行时去操控代码。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="代码块">代码块<a class="hash-link" href="#代码块" title="标题的直接链接">​</a></h2><p>块（Block）在 Ruby 中是一大特色，在某些应用过程中能够实现闭包，而且其内部的迭代器（iterator）的实现大量使用了块，下面就来探究一下在 Ruby 中的代码块吧。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="定义块">定义块<a class="hash-link" href="#定义块" title="标题的直接链接">​</a></h3><p>块（Block）即代码段，相对于一个完整的方法来说，块强调的是一种过程。在 Ruby 中块的定义形式有两种，下面结合实例来说明：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[1, 2, 3].each { |item|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    puts item</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; 3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>块的第一种定义形式为：<code>block_name { |arguments| ... }</code>。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">["a", "b", "c"].each do |item|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    puts item</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; c</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>块的第二种定义形式为：<code>block_name do |arguments| ... end</code>。</p><p><strong>在 Ruby 中，块是依赖于方法存在的，没有方法就没有块，块必须在方法定义之后才能定义。而且 <code>{...}</code> 形式比 <code>do...end</code> 形式的优先级高。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="调用块">调用块<a class="hash-link" href="#调用块" title="标题的直接链接">​</a></h3><p>定义的块是不能自己自动执行的，我们需要主动调用才可以，调用的方式也有两种。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="yield-关键字">yield 关键字<a class="hash-link" href="#yield-关键字" title="标题的直接链接">​</a></h4><p>在方法内部我们可以使用 <code>yield</code> 关键字捕获关联块，并允许传入参数回调执行块。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 定义方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">def each(*a)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for element in a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # 捕获块，回调执行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        yield(element)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 定义块</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">each(1,2,3) do |item|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    puts item * 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; 4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; 6</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="-尾部参数捕获">&amp; 尾部参数捕获<a class="hash-link" href="#-尾部参数捕获" title="标题的直接链接">​</a></h4><p>其实，每个方法都有一个默认的带 <code>&amp;</code> 操作符的尾部参数，该参数可以用来捕获方法关联块，从而使用 <code>call()</code> 方法调用块。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 定义方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">def say(&amp;block)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    puts "Do you like dogs?"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 捕获块，回调执行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    block.call("yes")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    block.call("no")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    block.call()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 定义块</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">say do |answer|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if answer == "yes"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        puts "I like dogs."</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    elsif answer == "no"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        puts "I like cats than dogs."</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        puts "I don't know."</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; Do you like dogs?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; I like dogs.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; I like cats than dogs.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; I don't know.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>Ruby 中的块依赖于方法存在，块不是在定义的时候执行，而是被所关联方法用来回调执行，这也是比较重要的特性。</strong></p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="检测块">检测块<a class="hash-link" href="#检测块" title="标题的直接链接">​</a></h4><p>如果一个方法并没有定义关联块的话，在方法中去调用关联块则会发生运行时错误，此时我们可以使用 <code>block_given?()</code> 检测关联块是否已被定义。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">def test()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 检测块</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return yield if block_given?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    puts "no block"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test # ==&gt; no block</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test { puts "block is here" } # ==&gt; block is here</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="作用域">作用域<a class="hash-link" href="#作用域" title="标题的直接链接">​</a></h2><p>说到代码块，我们不得不来谈谈作用域，Ruby 拥有严格的作用域机制，而块并没有形成严格意义上的独立作用域，这使得块可以实现闭包，而这一特性是非常有用的。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="作用域机制">作用域机制<a class="hash-link" href="#作用域机制" title="标题的直接链接">​</a></h3><p>通常作用域都是对于局部变量来说的，下面来演示一下 Ruby 中的独立作用域机制。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 进入顶级独立作用域</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">local_variable = 'a';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">module Outter  # 进入模块独立作用域</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    local_variable = 'b';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    class Inner  # 进入类独立作用域</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        local_variable = 'c';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        def func  # 进入方法独立作用域</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            local_variable = 'd';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>该示例在四个作用域中定义了四个同名局部变量，但它们并不是相互覆盖的关系，而是各自独立的。</p><p><strong>在 Ruby 中，<code>module</code>、<code>class</code>、<code>def</code>（模块、类、方法）均会创建自己的独立作用域，所谓独立作用域即就是双向封闭的作用域，内外作用域不可相互直接访问。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="块的作用域">块的作用域<a class="hash-link" href="#块的作用域" title="标题的直接链接">​</a></h3><p><strong>一个代码块并不会创建独立作用域，它可以穿透（访问）自身定义时所处上下文的作用域，但是自身对外部作用域却是单向封闭的。</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">def test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    x = 100</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    puts "method_local_x=#{x}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    y = 1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    yield(y)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    puts "method_local_x=#{x}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">x =10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">puts "main_local_x=#{x}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test do |y|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    puts "block_x=#{x}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    x += y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">puts "main_local_x=#{x}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; main_local_x=10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; method_local_x=100</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; block_x=10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; method_local_x=100</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; main_local_x=1010</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>该示例中，块中访问的 <code>x</code> 本地变量是其定义上下文中的本地变量，而并非是回调执行块时方法中的本地变量；同时，在调用块时将方法中的 <code>y</code> 本地变量传入块，从而了达到了存在于两个不同独立作用域中本地变量交互的目的。</p><p>事实上，我们已经感受到了块作用域的具有吸引力的特性。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="扁平化作用域">扁平化作用域<a class="hash-link" href="#扁平化作用域" title="标题的直接链接">​</a></h3><p>在讨论完 Ruby 严格的作用域机制与块作用域之后，我们似乎可以干点什么。没错，利用块作用域来打破这种严格的作用域机制。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">local_variable = "a"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Outter = Module.new do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    puts "module-&gt;main:" + local_variable</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Inner = Class.new do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        puts "class-&gt;main:" + local_variable</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        define_method :func do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            puts "method-&gt;main:" + local_variable</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; module-&gt;main:a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; class-&gt;main:a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Inner.new.func()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; method-&gt;main:a</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>看见了吧，Ruby 严格的作用域机制被完全打破，整个作用域由里向外依次透明化，但块作用域是单向封闭的，所以由外向里又是封闭的。</p><p>也许你会觉得不可思议，这被称为扁平化作用域，官方名称则为<strong>嵌套文法作用域</strong>，我们可以利用该技术来共享作用域。</p><p>这里需要说明一下，方法也是一个 <code>Method</code> 对象，可以通过 <code>unbind()</code> 方法与所属对象解绑，再用 <code>bind()</code> 方法与其它所属同类的对象重新绑定。同时，方法可以调用 <code>to_proc()</code> 方法转化成一个 Proc 对象，也可以使用 <code>define_method()</code> 方法将块转化为一个方法，如示例中所示。<strong>方法绑定的作用域是所属对象的作用域，而块绑定的是定义块的作用域。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="上下文探针">上下文探针<a class="hash-link" href="#上下文探针" title="标题的直接链接">​</a></h3><p>当一个对象的实例变量没有提供外部接口时，我们可以访问和改变吗？答案是可以的。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Person</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def initialize(name,age)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @name = name;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @age = age;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p = Person.new("MrWang",18);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p.instance_eval do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    puts "#{@name} #{@age} 岁"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @age = 20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    puts "#{@name} #{@age} 岁"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; MrWang 18 岁</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; MrWang 20 岁</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>我们通过对象调用 <code>instance_eval()</code> 方法创建了一个块，该块内部作用域则是对象自身作用域，<code>self</code> 指向对象自身。</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">p.instance_exec(20) do |age|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    puts "#{@name} #{@age} 岁"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @age = age</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    puts "#{@name} #{@age} 岁"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>instance_eval()</code> 方法是不允许传递块参数的，而 <code>instance_exec()</code> 会将方法的参数传递给块参数。</p><p>这么做看起来像是破坏了对象的封装性，不过这些方法我认为是为程序员服务的，而不是用户。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="proc-对象">Proc 对象<a class="hash-link" href="#proc-对象" title="标题的直接链接">​</a></h2><p>我们一直说块是依赖于方法的，其实我们可以创建独立于方法的 <code>Proc</code> 可调用对象。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="procnew">Proc.new<a class="hash-link" href="#procnew" title="标题的直接链接">​</a></h3><p>我们可以创建不依赖于特定方法的块，并存储下来供合适的时候多次重复利用，而 <code>Proc</code> 对象就是一种可调用对象，事实上我们已经见过它了。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">inc = Proc.new { |x| puts x + 1 }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">add = proc { |a,b| puts a + b }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">inc.call(2);  # ==&gt; 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">inc.call(5);  # ==&gt; 6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">add.call(2,3)  # ==&gt; 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">add.call(4,3)  # ==&gt; 7</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>使用 <code>Proc.new()</code> 与 <code>proc()</code> 方法是等价的，Proc 对象使用 <code>call()</code> 方法调用传参。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">def test(&amp;block)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return block</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p = test { }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">puts p.class  # ==&gt; Proc</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其实与方法关联的块在使用尾部参数捕获后，去掉 <code>&amp;</code> 操作符就是一个 <code>Proc</code> 对象，加上 <code>&amp;</code> 又是一个块（可以传递给其他方法），这样可以相互转换。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="lambda-表达式匿名方法">lambda 表达式（匿名方法）<a class="hash-link" href="#lambda-表达式匿名方法" title="标题的直接链接">​</a></h3><p>还有一种方式可以创建 <code>Proc</code> 对象，也就是 <code>lambda()</code> 方法或者 <code>-&gt;()</code>（箭头方法）。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">inc = lambda { |x| x + 1 }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">add = -&gt;(a,b) { puts a+b }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">inc.call(2);  # ==&gt; 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">add.call(2,3);  # ==&gt; 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">puts inc.class  # ==&gt; Proc</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="区别">区别<a class="hash-link" href="#区别" title="标题的直接链接">​</a></h3><p>虽然说，前后创建的都是 <code>Proc</code> 对象，但它们还是有一些细微区别的。</p><ul><li><p>return</p><p>前者创建的 Proc 对象中如果使用 <code>return</code>，则意味着程序中断（结束）；而使用 <code>lambda()</code> 创建的 Proc 对象中使用 <code>return</code> 就像调用方法返回值一样，仅仅是调用的块执行结束。</p></li><li><p>参数检查</p><p>前者创建的 Proc 对象调用时参数可多可少，多的忽略，少的赋为 <code>nil</code>；而使用 <code>lambda()</code> 创建的 Proc 对象调用时会进行参数个数检查，必须对应，传入的参数不能多也不能少。</p></li></ul><p>看起来，<code>lambda()</code> 创建的 Proc 对象更像方法，我们称之为<strong>匿名方法</strong>。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="闭包">闭包<a class="hash-link" href="#闭包" title="标题的直接链接">​</a></h2><p>当一个方法执行完毕后，该方法的独立作用域会销毁，方法里面的局部变量自然也会随之销毁；但是基于块作用域的特性，我们可以实现闭包。</p><p><strong>若方法中存在一个独立于方法的块（非关联块），该独立块具备块作用域特性，可访问定义时上下文（单次方法调用）的外部作用域，该块被外部引用后，即便是所在方法执行完毕后，因为块的存在绑定了方法中的局部变量，因而不会随方法销毁，这就是闭包。</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">def closure(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    x = n</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return -&gt; {x *= 10; puts "block_local_x=#{x}"}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 获取方法内块的引用</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">closure_1 = closure(1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">closure_2 = closure(2)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">closure_1.call  # ==&gt; block_local_x=10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">closure_2.call  # ==&gt; block_local_x=20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">closure_1.call  # ==&gt; block_local_x=100</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">closure_2.call  # ==&gt; block_local_x=200</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">closure_1.call  # ==&gt; block_local_x=1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">closure_2.call  # ==&gt; block_local_x=2000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述示例表明，当外部获取方法内的块引用之后，方法内的局部变量便被块绑定，之后依然可以访问；同时，不同的外部引用的块绑定的是不同的局部变量，这是因为两个块定义上下文（作用域）不同。</p><p>从块作用域的特性来仔细分析，它不仅有吸引力让我们可以实现闭包，同时也存在内存泄露的风险。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>可以说块在 Ruby 中无处不在，合理的利用块可以省去不少代码，更能实现更强大的功能。块中需要注意的是，块不是定义时执行的，而是回调执行的；块作用域两大特点也非常重要。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《Ruby 元编程》，<!-- -->[意]<!-- --> Paolo Perrotta，廖志刚 译</li><li>《Ruby 基础教程》，<!-- -->[日]<!-- --> 高桥征义 后藤裕藏，何文斯 译</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Ruby</category>
            <category>元编程</category>
            <category>Block</category>
        </item>
        <item>
            <title><![CDATA[Linux-Vim 编辑器]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Linux/linux-cmd-vim</link>
            <guid>/Computer-Technology/Linux/linux-cmd-vim</guid>
            <pubDate>Fri, 28 Oct 2016 21:02:00 GMT</pubDate>
            <description><![CDATA[在 Linux 这样的命令行操作系统中，必须有一款功能强大的编辑器支持我们快速完成文本编辑，这就是 Vi 编辑器；通过对其加强和升级，Vim 编辑器比前者更为强大，拥有更多的功能和颜色高亮的特性，是程序员在 Linux 下编码的利器。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-10-28 21:02:00 </em></p></blockquote><p>在 Linux 这样的命令行操作系统中，必须有一款功能强大的编辑器支持我们快速完成文本编辑，这就是 Vi 编辑器；通过对其加强和升级，Vim 编辑器比前者更为强大，拥有更多的功能和颜色高亮的特性，是程序员在 Linux 下编码的利器。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="vim">Vim<a class="hash-link" href="#vim" title="标题的直接链接">​</a></h2><p>Vim 是基于 Linux 下 Vi 编辑器的升级版，经过多年来的不断更新，功能也越来越强大，Vim 除过具备常用文本编辑器的编辑操作以及颜色高亮特性外，还支持自动补全、多行批量操作、指定跳转等等功能，其中代码颜色高亮特性更利于我们在命令行中进行信息的阅览和查看。而且，Vim 支持大多数操作系统，只是我们经常在 Linux 下使用它而已。当然，在 Linux 下还有一款很著名的编辑器 Emacs 。</p><p>Vim 太过强大，导致学习曲线也是非常陡峭的，不过作为一个工具，我们首先只要掌握它的基本操作就行了，至于其他功能待我们在使用过程中去发掘就行了。首先，我们应该知道 Vim 有三种模式，即<strong>命令模式</strong>、<strong>插入模式</strong>、<strong>EX 模式</strong>。</p><ul><li><p>命令模式</p><p>此模式是 Vim 的默认模式，我们可以做一些非输入操作，例如删除、复制等等，在此模式下可以进入插入模式和 EX 模式。</p></li><li><p>插入模式</p><p>此模式就是编辑模式，我们主要进行输入操作。</p></li><li><p>EX 模式</p><p>此模式则是当我们完成编辑后，可以进行退出、保存等操作。</p></li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="常用命令">常用命令<a class="hash-link" href="#常用命令" title="标题的直接链接">​</a></h2><p>接下来，就介绍一些常用的命令，通过这些命令我们可以很方便的快速完成大多数常用操作。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="模式切换">模式切换<a class="hash-link" href="#模式切换" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 命令模式进入插入模式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">i  // 在当前字符前开始编辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">a  // 在当前字符后开始编辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">I  // 在当前行首开始编辑（Shift + I ，或者开启大写）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">A  // 在当前行尾开始编辑（Shift + A ，或者开启大写）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">o  // 在当前行下添加新行开始编辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">O  // 在当前行上添加新行开始编辑（Shift + O ，或者开启大写）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令模式进入EX模式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">:  // （Shift + ;）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 插入模式或EX模式返回到命令模式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Esc  // 至少按一次 Esc 即可返回命令模式</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="命令模式">命令模式<a class="hash-link" href="#命令模式" title="标题的直接链接">​</a></h3><p>命令模式是 Vim 的核心模式，大多数强大的功能命令都需要在此模式下完成，常用的命令则有复制、删除、粘贴、移动等等。<strong>而且，只有在命令模式下才能进入插入模式或者 EX 模式。</strong></p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="移动光标">移动光标<a class="hash-link" href="#移动光标" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">h  // 光标左移</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j  // 光标下移</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">k  // 光标上移</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">l  // 光标右移</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fx  // 移动光标到当前行的下一个 x（任意字母）处（; 重复上一个f命令）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Fx  // 移动光标到当前行的上一个 x（任意字母）处（; 重复上一个F命令）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tx  // 移动光标到当前行的下一个 x（任意字母）左边（; 重复上一个t命令）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Tx  // 移动光标到当前行的上一个 x（任意字母）左边（; 重复上一个T命令）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">w  // 光标后移一个单词到词首（W 也行）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">e  // 光标后移一个单词到词尾（E 也行）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">b  // 光标前移一个单词到词首（B 也行）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">*  // 向下匹配当前光标所在字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#  // 向上匹配当前光标所在字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">^  // 光标移动到行首（数字 0 也行）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$  // 光标移动到行尾</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">gg  // 光标移动到文件首行行首（ngg 第n行行首）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">G   // 光标移动到文件末行行首（nG 第n行行首）（Shift + G ，或者开启大写）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">`.  // 光标返回到上次编辑的位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">`a  // 光标移动到书签a处</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">%  // 光标在 ()、[]、{} 等符号之间左右移动</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">H  // 光标移动到当前屏顶端行首</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">M  // 光标移动到当前屏中部行首</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">L  // 光标移动到当前屏底部行首</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Ctrl + F  // 向下移动一屏</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Ctrl + D  // 向下滚动半屏</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Ctrl + B  // 向上滚动一屏</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Ctrl + U  // 向上滚动半屏</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="复制粘贴剪切删除">复制、粘贴、剪切/删除<a class="hash-link" href="#复制粘贴剪切删除" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 复制</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">yy  // 复制光标所在整行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nyy // 复制光标所在行开始向下 n 行，例如 2yy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 粘贴</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p   // 光标所在行下方添加一行并粘贴剪贴板或该行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">np  // 光标所在行下方添加 n 行并粘贴剪贴板或该行，例如 2p</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">P   // 光标所在行上方添加一行并粘贴剪贴板或该行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nP  // 光标所在行上方添加 n 行并粘贴剪贴板或该行，例如 2P</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 删除/剪切</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dd  // 删除/剪切光标所在整行，D 亦可</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ndd // 删除/剪切光标所在行开始向下 n 行，nD 亦可，例如 2dd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dgg // 光标所在行到文档开头之间全部删除/剪切</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dG  // 光标所在行到文档结尾之间全部删除/剪切</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dngg    // 光标所在行到第 n 行之间全部删除/剪切，dnG 亦可，例如 d2gg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">d+^ // 光标所在字符到行首之间全部删除/剪切</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">d+$ // 光标所在字符到行尾之间全部删除/剪切，D 亦可</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dw  // 删除光标所在处一个单词、符号</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">x   // 删除光标所在字符</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nx  // 删除光标所在字符开始向后 n 个字符，例如 2x</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nX  // 删除光标所在字符开始向前 n 个字符，例如 2X</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="撤销恢复">撤销、恢复<a class="hash-link" href="#撤销恢复" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">u   // 撤销</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Ctrl+r   // 恢复</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="插入模式">插入模式<a class="hash-link" href="#插入模式" title="标题的直接链接">​</a></h3><p>插入模式其实就是我们所说的编辑模式，输入模式，进行字符输入操作。在该模式下，可以按 <kbd>Esc</kbd> 即可退回到命令模式。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ex-模式">EX 模式<a class="hash-link" href="#ex-模式" title="标题的直接链接">​</a></h3><p>EX 模式可以在我们编辑完之后，进行一些保存、退出操作；也可以在我们编辑中途进行一些额外的操作。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">:w  // 保存当前修改</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">:q  // 退出</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">:q!  // 强制退出，不保存修改</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">:x  // 保存并退出（等价 :wq）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">:set nu // 显示行号（全写 :set_number）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">:set nonu // 隐藏行号（全写 :set_nonumber）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">:! [命令]  // 执行一个命令并显示结果</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">:sh  // 切换到命令行，使用 Ctrl+D 切换回 vim</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="配置">配置<a class="hash-link" href="#配置" title="标题的直接链接">​</a></h2>]]></content:encoded>
            <category>计算机技术</category>
            <category>操作系统</category>
            <category>Linux</category>
            <category>Vim</category>
        </item>
        <item>
            <title><![CDATA[Linux-常用 Shell 命令]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Linux/linux-cmd-shell</link>
            <guid>/Computer-Technology/Linux/linux-cmd-shell</guid>
            <pubDate>Fri, 21 Oct 2016 21:02:00 GMT</pubDate>
            <description><![CDATA[Linux 是一个优秀的开发环境，大多数服务器都在上面部署。作为一个程序员，熟悉Linux 系统的常用操作也是很必要的。在 linux 内核外，shell 提供了我们程序员（用户）与内核之间的交互媒介，shell 可以说是一个命令解释器，当然它也负责将内核输出信息翻译给程序员。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2018-10-14 13:00:00 </em></p></blockquote><p>Linux 是一个优秀的开发环境，大多数服务器都在上面部署。作为一个程序员，熟悉Linux 系统的常用操作也是很必要的。在 linux 内核外，shell 提供了我们程序员（用户）与内核之间的交互媒介，shell 可以说是一个命令解释器，当然它也负责将内核输出信息翻译给程序员。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shell">Shell<a class="hash-link" href="#shell" title="标题的直接链接">​</a></h2><p>Linux 是一个基于命令行的操作系统，提供了一个命令解释器，即 Shell（壳）。Shell 是一个软件，是操作系统的用户界面，用户通过在 Shell 中输入命令，然后命令解释器解释完成后将指令送往内核中执行，来实现对 Linux 系统的操作。</p><p>Linux 中的 Shell 也有不同的版本：Bourne Shell（贝尔实验室开发）、Bash（GNU 开发）、C shell（Sun 公司开发）、Z shell（集成了前几种 shell 的优点）等等，我们目前最常用的就是 Bash。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="常用命令">常用命令<a class="hash-link" href="#常用命令" title="标题的直接链接">​</a></h2><p>下面将是一些常用的 Shell 命令的总结，熟悉这些命令能帮助我们更快的适应 Linux 系统的环境。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="目录文件">目录、文件<a class="hash-link" href="#目录文件" title="标题的直接链接">​</a></h3><p>文件与目录是系统中最常见的基本单位，这里介绍一些常用的文件、目录操作。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 文件属性与权限（总共10位）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[-][---][---][---]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 第1位：-表示文件；d表示目录；l表示软链接</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 第2-4位：rwx 所有者（user）用户权限</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 第5-7位：rwx 所属组（group）用户权限</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 第8-10位: rwx 其他用户权限</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">r （可读） w （可写） x （可执行）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 示例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x # 这是一个文件，所有者可读可写可执行，所属组与其他用户可读可执行但不可写</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pwd  # 查看当前路径</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd  [目录]  # 切换到目标目录</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="创建">创建<a class="hash-link" href="#创建" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 目录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mkdir [目录]  # 创建一个空目录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mkdir -p [目录/子目录/]  # 创建一个多层嵌套目录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">touch [文件]  # 创建一个文件，或者更新已有文件时间</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="删除">删除<a class="hash-link" href="#删除" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 命令格式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm [选项] [目录文件]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令选项</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-i  # 删除时提示</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-r  # 允许删除目录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-f  # 忽略提示警告</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令示例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm -rf ./tmp  # 删除当前目录下的tmp文件或目录，忽略提示警告</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rmdir [目录]  # 删除一个目录（只能删除空目录）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="查看">查看<a class="hash-link" href="#查看" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 目录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令格式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ls [选项] [目录]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令选项</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-d  # 查看目录属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-a  # 查看目录内所有文件和子目录，包括隐藏的</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-l  # 显示文件、子目录详细信息</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-h  # 显示文件、子目录大小（带单位）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-i  # 显示文件、子目录 inode</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-R  # 递归显示目录（显示子目录的子目录路径）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令示例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ls -a  # 查看当前目录所有文件、子目录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ls -lh /root/  # 查看root目录内所有文件、子目录并显示详细信息和大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cat [文件]  # 查看文件内容</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">file [文件]  # 查看文件类型</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">head [-n] [文件]  # 显示文件内容开始n行（默认10行）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tail [-n] [文件]  # 显示文件内容末尾n行（默认10行）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-f  # 持续更新文件末尾内容（方便查看更新的日志）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">more [文件]  # 翻页显示文件内容（只能向下翻页）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">less [文件]  # 翻页显示文件内容（上下翻页）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="复制">复制<a class="hash-link" href="#复制" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 命令格式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cp [选项] [源目录文件] [目标目录]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令选项</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-r  # 允许复制目录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-p  # 同时复制文件属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-d  # 若源文件是链接文件，则复制链接属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-a  # 相当于 -pdr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-v  # 显示详细信息</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令示例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cp -r ./tmp1 ./tmp/  # 将当前目录下的tmp1目录或文件复制到当前目录下tmp目录内</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="剪切">剪切<a class="hash-link" href="#剪切" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mv [源目录文件] [目标目录]  # 剪切目录或文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mv [旧目录文件名] [新目录文件名]  # 重命名</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="搜索">搜索<a class="hash-link" href="#搜索" title="标题的直接链接">​</a></h3><p>由于命令行的界面给我们查看系统文件带来了视觉上的不便，所以学会使用命令去搜索文件会给我们了解系统中存放的文件情况带来方便。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="locate">locate<a class="hash-link" href="#locate" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 搜索某个目录、文件的所在路径</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">locate [文件]  # 在后台数据库中搜索，速度快；但是最近新建的不能找到，需执行 updatedb 更新数据库</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="find">find<a class="hash-link" href="#find" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 搜索某个目录、文件的所在路径，以及详细信息等</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令格式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">find [搜索范围] [选项] [搜索目标]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令选项</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-name  # 按目录或文件名搜索</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-user  # 按用户名搜索</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-nouser  # 搜索没有用户的目录、文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-mtime  # 按内容修改时间搜索</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-atime  # 按内容访问时间搜索</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-ctime  # 按属性修改时间搜索</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-size  # 按目录、文件大小搜索</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-inum  # 按目录、文件 inode 搜索</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令示例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">find ./ -name tmp  # 在当前目录下搜索名字为tmp的目录和文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">find / -nouser  # 在根目录下搜索没有用户的目录和文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">find ./ -mtime +10 # 在当前目录下搜索10天前修改的目录和文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">find ./ -size 25k  # 在当前目录下搜索大小为25KB的目录和文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">find ./ -size +25k -a -size -50k # 在当前目录下搜索大小为25KB到50KB的目录和文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">find ./ -inum 262  # 在当前目录下查找inode是262的目录和文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 执行多条命令（后一条命令接受前一条命令的结果）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">find [搜索范围] [选项] [搜索目标] -exec [命令] [选项] {} \;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令示例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">find ./ -size 25k -exec ls -lh {} \;  # 搜索当前目录下大小是25KB的目录和文件并显示详细信息</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="whereis">whereis<a class="hash-link" href="#whereis" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 搜索命令所在路径及帮助文档</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令格式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">whereis [选项] [命令]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令选项</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-b  # 只查找可执行文件（命令）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-m  # 只查找帮助文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令示例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">whereis ls  # 查找 ls 命令可执行文件所在路径及帮助文档所在路径</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="which">which<a class="hash-link" href="#which" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 搜索命令所在路径以及别名</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">which [命令]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="grep">grep<a class="hash-link" href="#grep" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 搜索文件内容</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令格式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">grep [选项] [搜索内容] [文件]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令选项</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-v  # 结果取反</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-i  # 忽略大小写</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令示例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">grep "Hello" hello.sh  # 搜索 hello.sh 文件内包含Hello字符串的地方</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="帮助">帮助<a class="hash-link" href="#帮助" title="标题的直接链接">​</a></h3><p>事实上，Linux 下的 shell 命令大概有三千左右个，而且常用的也非常多，我们不可能去死记硬背，学会适当的时候去查看命令的帮助文件也是很好的。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="man">man<a class="hash-link" href="#man" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 命令格式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">man [选项] [级别] [命令]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令选项</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-f  # 查看命令所有级别（等价于 whatis ）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-k  # 查看所有相关命令（等价于 apropos ）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令示例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">man ls  # 查看 ls 命令详细帮助</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="help">help<a class="hash-link" href="#help" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[命令] --help  # 查看 shell 外部命令的详细帮助，如 ls</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">help [命令]  # 查看 shell 内部命令的详细帮助，如 cd（可用 whereis 判断是否内部命令）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="info">info<a class="hash-link" href="#info" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 命令格式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">info [命令]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 帮助页面命令</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- 回车  # 进入子帮助页面</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- u  # 进入上层页面</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- n  # 进入下一个帮助小节</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- p  # 进入下一个帮助小节</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- q  # 退出帮助页面</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="压缩解压">压缩、解压<a class="hash-link" href="#压缩解压" title="标题的直接链接">​</a></h3><p>Linux 系统下的多数应用软件都是以源代码的方式打包，而解压缩则是安装应用软件的常用操作。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="zip-格式">.zip 格式<a class="hash-link" href="#zip-格式" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 压缩</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">zip [压缩文件名] [源文件]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">zip -r [压缩文件名] [源目录]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 解压</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">unzip [源目录文件]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="gz-格式">.gz 格式<a class="hash-link" href="#gz-格式" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 压缩</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">gzip [源文件]  # 直接压缩源文件，源文件消失</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">gzip -c [源文件] &gt; [压缩文件名]  # 本质是写入一个压缩文件，源文件不消失</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">gzip -r [源目录]  # 只会压缩源目录内源文件，源文件消失</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 解压</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">gzip  -d [源文件]  # 源文件消失</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">gunzip [源文件]  # 源文件消失</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">gunzip -r [源目录]  # 源目录内源文件解压，源文件消失</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="bz2-格式">.bz2 格式<a class="hash-link" href="#bz2-格式" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 压缩（不能压缩目录）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bzip2 [源文件]  # 源文件消失</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bzip2 -k [源文件]  # 保留源文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 解压</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bzip2 -d [源文件]  # 源文件消失</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bzip2 -dk [源文件]  # 保留源文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bunzip2 [源文件]  # 源文件消失</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bunzip2 -k [源文件]  # 保留源文件</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="tar-包格式">.tar 包格式<a class="hash-link" href="#tar-包格式" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 打包、解包</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tar [选项] [包文件名] [源文件]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令选项</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-c  # 打包</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-x  # 解包</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-t  # 查看包内文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-v  # 显示过程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-f  # 指定打包后文件名</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令示例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tar -cvf bag.tar bag  # 打包一个目录或文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tar -xvf bag.tar  # 解包</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tar -tvf bag.tar  # 查看包内文件</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="targztarbz2-格式">.tar.gz，.tar.bz2 格式<a class="hash-link" href="#targztarbz2-格式" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 压缩</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tar -zcvf [压缩文件名] [源目录文件]  # 保留源目录文件（-z 为 .gz 格式）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tar -jcvf [压缩文件名] [源目录文件]  # 保留源目录文件（-j 为 .bz2 格式）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 解压</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tar -zxvf [源文件名]  # 保留源文件（-z 为 .gz 格式）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tar -jxvf [源文件名]  # 保留源文件（-j 为 .bz2 格式）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="命令历史">命令历史<a class="hash-link" href="#命令历史" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">history  # 所有曾经执行过的命令</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-c  # 清空历史命令</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-w  # 把缓存中的历史命令保存在文件中 ./bash_history</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">!!  # 执行上一条命令</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">!u  # 执行曾经以u开头的命令</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">!12  # 执行曾经第12命令</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">!-n  # 执行曾经第前n个命令</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">!?name  # 执行曾经包含name的命令</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Ctrl+R  # 搜索曾经执行过的命令</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#  按 ESC 后再按 . 会增加上一个命令的选项</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="命令别名">命令别名<a class="hash-link" href="#命令别名" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">alias  # 查询所有别名</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">alias ls="ls --color=never" # 设置别名</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">unalias ls  # 删除别名</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 用户目录下的 bashrc ，设置别名永久生效</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">source .bashrc  # 让文件立即执行，别名立即生效</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="io">IO<a class="hash-link" href="#io" title="标题的直接链接">​</a></h3><p>这里简单介绍一些输入、输出重定向的命令。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="输出重定向">输出重定向<a class="hash-link" href="#输出重定向" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 标准输出重定向</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[命令] &gt; [文件] # 以覆盖的方式，把命令的正确输出到指定文件或者设备中去</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[命令] &gt;&gt; [文件]  # 以追加的方式，把命令的正确输出到指定文件或者设备中去</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 标准错误输出重定向</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[错误命令] 2&gt;[文件]  # 以覆盖的方式，把命令的正确输出到指定文件或者设备中去（注意&gt;后无空格）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[错误命令] 2&gt;&gt;[文件]  # 以追加的方式，把命令的正确输出到指定文件或者设备中去（注意&gt;&gt;后无空格）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 标准正确和错误输出同时保存</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[命令] &gt; [文件] 2&gt;&amp;1  # 覆盖方式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[命令] &gt;&gt; 文件 2&gt;&amp;1  # 追加方式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[命令] &amp;&gt;[文件]  # 覆盖方式（注意&gt;后无空格）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[命令] &amp;&gt;&gt;[文件]  # 追加方式（注意&gt;&gt;后无空格）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[命令]&gt;&gt;[文件1] 2&gt;&gt;[文件2]  # 正确输出保存到文件1，错误输出保存到文件2（注意&gt;&gt;后无空格）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="输入重定向">输入重定向<a class="hash-link" href="#输入重定向" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">wc  # 输入内容，输入完成后Ctrl+D</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-c  # 统计字节数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-w  # 统计单词数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-l  # 统计行数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wc &lt; [文件]  # 将文件内容输入</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wc &lt;&lt; [定界符]  # 结束定界符</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="管道符">管道符<a class="hash-link" href="#管道符" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[命令1] | [命令2]  # 命令1的正确输出作为命令2的操作对象</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="系统命令">系统命令<a class="hash-link" href="#系统命令" title="标题的直接链接">​</a></h2><p>这是一些涉及到系统权限或者说有关系统信息的命令，应谨慎操作。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="关机重启">关机、重启<a class="hash-link" href="#关机重启" title="标题的直接链接">​</a></h3><ul><li><p>shutdown</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  # 命令格式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  shutdown [选项] [时间]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # 命令选项</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -h  # 关机</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -r  # 重启</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -c  # 取消前一个关机、重启命令</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # 命令示例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  shutdown -h now  # 立即关机</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  shutdown -r 20:20 &amp;  # 20:20时重启（&amp; 为后台运行）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>其他命令</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  reboot  # 立即重启</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  poweroff  # 立即关机</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  logout  # 退出登录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # 非安全命令</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  init 0  # 0 关机</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  init 6  # 6 重启</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # （0 关机 1 单用户 2 不完全多用户，无NFS 3 完全多用户 4 未分配 5 图形界面 6 重启）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  runlevel  # 查看当前运行级别</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  [命令] &amp;  # 该命令在后台执行</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="用户密码">用户、密码<a class="hash-link" href="#用户密码" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">su [用户名] # 切换到目标用户，默认是 root 用户</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo [命令] # 以 root 权限执行该条命令</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#  添加用户</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">useradd [选项] [用户名]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-d  # 指定用户目录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-g  # 指定用户群组</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">passwd [用户名] # 更改目标用户密码，默认当前用户</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="登录日志">登录日志<a class="hash-link" href="#登录日志" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">w  # 查看系统中用户登录情况，资源情况</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">who  # 查看系统中用户登录情况</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">last  # 查看系统中用户登录日志</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lastlog  # 查看系统中所有用户最后一次登陆时间</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="日期时间">日期、时间<a class="hash-link" href="#日期时间" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">date  # 查看当前系统时间</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">date -s "20:00:00"  # 修改当前时间</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">date +%Y--%m--%d  # 格式化显示</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="进程管理">进程管理<a class="hash-link" href="#进程管理" title="标题的直接链接">​</a></h3><p>通常使用<code>ps</code>命令来查看系统运行的进程信息。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 显示在当前 shell 终端运行的进程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ps [选项]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-[A|e]  # 显示所有进程信息</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-l      # 显示长列表信息</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 示例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ps -ef  # 查看系统中所有运行进程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 实时显示系统进程信息</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">top</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 杀死进程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kill [PID]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">killall [进程名]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="磁盘管理">磁盘管理<a class="hash-link" href="#磁盘管理" title="标题的直接链接">​</a></h3><p>下面是一些用于对磁盘信息进行查看或者统计的命令。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 查看磁盘分区使用情况</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">df [选项] [路径]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-l  # 仅显示本地磁盘（默认选项）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-a  # 显示所有文件系统的磁盘使用情况</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-h  # 以1024进制自动换算合适的单位显示磁盘容量</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-H  # 以1000进制自动换算合适的单位显示磁盘容量</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-T  # 显示磁盘分区类型</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-t  # 显示指定类型文件系统的磁盘分区（比如EXT4）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-x  # 不显示指定类型文件系统的磁盘分区</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 统计磁盘上的文件大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">du [选项] [路径]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-b  # 以byte为单位统计文件（四舍五入）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-k  # 以KB为单位统计文件（四舍五入）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-m  # 以MB为单位统计文件（四舍五入）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-h  # 以1024进制自动换算合适的单位统计文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-H  # 以1000进制自动换算合适的单位统计文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-s  # 指定统计路径（默认是当前路径）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="文件系统">文件系统<a class="hash-link" href="#文件系统" title="标题的直接链接">​</a></h3><p>仅仅分区之后，磁盘还是不能使用的，必须创建文件系统才能使用，此时也会首先格式化硬盘。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 创建文件系统</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mke2fs [选项] [文件系统格式] [磁盘目录]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-t  # 指定文件系统格式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-b  # 指定文件系统块大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-L  # 指定卷标</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-j  # 建立文件系统日志</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令示例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mke2fs -t ext4 /dev/sda3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 简写操作命令</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mkfs.[文件系统格式] [磁盘目录]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令示例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mkfs.ext4 /dev/sda3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 查看文件系统的详细信息</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dumpe2fs [磁盘目录]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 命令示例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dumpe2fs /dev/sda2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 查看文件系统标签</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">e2label [磁盘目录]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 设置文件系统标签</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">e2label [磁盘目录] [标签名]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 检查目标磁盘文件系统是否损坏（已卸载）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fsck [磁盘目录]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-y  # 不提示直接修复</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-t  # 指定修复的文件系统格式</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="挂载卸载">挂载、卸载<a class="hash-link" href="#挂载卸载" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mount  # 查看系统中已经挂载的设备</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mount -a   # 按配置文件 /etc/fstab 的内容，自动挂载</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mount -t  [文件系统] -o [特殊选项] [设备文件名] [挂载点]  # 挂载指定设备</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">umount [挂载点或设备文件名]  # 卸载设备文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fdisk -l   # 查看系统中已经识别的硬盘</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fdisk -t vfat [设备文件名] [挂载点]  # 以 fat32 文件格式挂载U盘（linux 默认不支持 ntfs 文件系统）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="端口">端口<a class="hash-link" href="#端口" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">netstat -anp | grep 177  # 查看指定端口进程</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="系统服务">系统服务<a class="hash-link" href="#系统服务" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">service [服务名称] [选项]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">service * start   # 启动服务</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">service * stop    # 停止服务</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">service * status  # 服务状态</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">service * restart # 重启服务</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="系统信息">系统信息<a class="hash-link" href="#系统信息" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 操作系统信息</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">uname [选项]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-a  # 所有信息，包含操作系统名称，计算机名、内核、架构</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-m  # 系统架构（32/64）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">hwclock  # 查看硬件时钟时间（等价 clock 命令）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">uptime  # 查看系统运行时间</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lspci  # 查看PCI设备</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-v  # 详细信息</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lsusb  # 查看USB设备</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-v  # 详细信息</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lsmod  # 查看加载的模块（驱动）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="应用安装">应用安装<a class="hash-link" href="#应用安装" title="标题的直接链接">​</a></h2><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">dpkg -L [应用名称]  # 查看已安装应用相关路径</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dpkg --get-selections | grep [应用名称]  # 查看已安装应用相关所有包</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="快捷键">快捷键<a class="hash-link" href="#快捷键" title="标题的直接链接">​</a></h2><p>下面是一些在 Bash 终端界面的快捷键。</p><ul><li><kbd>Ctrl + C</kbd> 强制终止命令</li><li><kbd>Ctrl + L</kbd> 清屏命令 clear</li><li><kbd>Ctrl + A</kbd> 光标移动到行首</li><li><kbd>Ctrl + E</kbd> 光标移动到行尾</li><li><kbd>Ctrl + U</kbd> 删除整行</li><li><kbd>Ctrl + Z</kbd> 把命令放入后台</li><li><kbd>Ctrl + R</kbd> 在历史中搜索命令</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>操作系统</category>
            <category>Linux</category>
            <category>Shell</category>
        </item>
        <item>
            <title><![CDATA[Web 前端性能优化：工具与技巧]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/web-performance-optimize-skill</link>
            <guid>/Computer-Technology/Web/web-performance-optimize-skill</guid>
            <pubDate>Sat, 20 Aug 2016 19:06:00 GMT</pubDate>
            <description><![CDATA[Web 前端的性能优化是非常迫切的，客户端的资源非常有限，而且层次不齐，很容易造成一些性能问题从而影响到最终给用户所呈现的数据信息结构的不完整。为了增强用户体验，我们必须在各个方面进行优化，同时也可以节省服务器成本。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-08-20 19:06:00 </em></p></blockquote><p>Web 前端的性能优化是非常迫切的，客户端的资源非常有限，而且层次不齐，很容易造成一些性能问题从而影响到最终给用户所呈现的数据信息结构的不完整。为了增强用户体验，我们必须在各个方面进行优化，同时也可以节省服务器成本。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="页面优化">页面优化<a class="hash-link" href="#页面优化" title="标题的直接链接">​</a></h2><p>首先，也是最重要的我们需要关注页面级的优化。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="减少-http-请求数">减少 HTTP 请求数<a class="hash-link" href="#减少-http-请求数" title="标题的直接链接">​</a></h3><p>HTTP 协议是基于 TCP 连接的，我们都知道 TCP 连接要经过三次握手、四次挥手的过程才能完成数据信息的传输，所以过多的 HTTP 请求会导致网页响应过慢。虽然浏览器是支持 HTTP 请求并发的，但并发数量也是有限的。</p><ul><li><p>合理设置 HTTP 缓存</p><p>如果我们的页面是极其复杂的，而且客户端首次加载页面所需要的所有资源是必须的；这个时候我们可以对后续加载进行优化，即合理设置 HTTP 缓存，当客户端再次加载该页面时，大多数 HTTP 请求所需要的资源都已缓存在本地，所以 HTTP 请求的数量会大幅降低。</p></li><li><p>资源合并压缩</p><p>我们在项目上线时，应尽可能将 JavaScript/CSS/Imagines 这些静态资源进行合并与压缩。js 与 css 代码都有其相应的合并压缩工具，同时服务器端基本都支持 Gzip 压缩；而多个小图片（图标等）则可以利用 <strong>CSS Sprites</strong> 技术合并后将它们嵌入页面。</p></li><li><p>内联图片（inline imagines）</p></li></ul><p>图片经过转码之后，可以使用 <code>data：URL scheme</code> 进行加载而不需要 HTTP 请求，但这种方式不会缓存，而且过大的图片也会体积变大，IE8 以下也不支持。通常背景图片将使用这种方式来进行加载。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="css-置顶js-沉底">CSS 置顶，JS 沉底<a class="hash-link" href="#css-置顶js-沉底" title="标题的直接链接">​</a></h3><p>我们应该将样式文件在 <code>&lt;head&gt;</code> 中就引入，这样不会因为 CSS 的载入而页面重新渲染；同样的，尽可能将 js 代码在 <code>&lt;/body&gt;</code> 尾部引入，这样页面的渲染不会因为加载 js 而阻塞。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="延迟异步加载-js">延迟/异步加载 JS<a class="hash-link" href="#延迟异步加载-js" title="标题的直接链接">​</a></h3><p><code>script</code> 标签是支持 <code>defer</code> 和 <code>async</code> 属性的，前者会将 JS 脚本推迟到 <code>&lt;/html&gt;</code> 标签关闭前才加载，而后者会进行异步加载 js 脚本，不会阻塞页面其它资源的加载。（IE10 才支持 async）</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="按需加载lazy-load">按需加载（Lazy load）<a class="hash-link" href="#按需加载lazy-load" title="标题的直接链接">​</a></h3><p>网页中占用资源的一般都是图片，对于单页面设计，通常我们只需要用户在刚载入页面看到第一屏的图片即可，其他的图片则可以随着用户向下滚动页面的动作异步加载。这样的话，虽然 HTTP 请求数依然是不变的，但我们的页面响应速度明显就变快了。</p><p>随着各种 js 框架的出现和越来越强大，它们的体积也变得越来越大，后来为了加载速度又将框架的核心代码与功能模块分离，这样我们只需要在刚开始加载核心代码即可，功能模块代码在需要的时候加载即可。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cdn内容分发网络">CDN（内容分发网络）<a class="hash-link" href="#cdn内容分发网络" title="标题的直接链接">​</a></h3><p>CDN（内容分发网络）将负载分配到不同地域的不同服务器上，可以使不同地区的用户就近获得服务器上相同的资源，可以很好的解决网络拥堵问题，提高用户访问网站的速度。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="启用-http2">启用 HTTP/2<a class="hash-link" href="#启用-http2" title="标题的直接链接">​</a></h3><p>我们现在使用的 HTTP/1.1 协议已经持续了十多年了，它在性能和安全方面已经显现出了不足，新的 HTTP/2 协议不仅性能上更胜一筹，信息安全方面也值得我们关注。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="优化数据库查询">优化数据库查询<a class="hash-link" href="#优化数据库查询" title="标题的直接链接">​</a></h3><p>事实上，前端是需要与后台进行大量数据交互的，而后台的数据库查询相当的耗费时间，利用索引可以大幅提高数据库查询速度，这对于前端页面的体验也是很大程度上的改善。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="代码优化">代码优化<a class="hash-link" href="#代码优化" title="标题的直接链接">​</a></h2><p>前端开发是一个很头疼的过程，由于不同浏览器的 js 引擎性能不一，虽然谷歌的 V8 引擎很快；CSS 兼容性的不一，在面对前端资源匮乏且复杂的环境下，代码编写的优化也是值得关注的。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="js-优化">JS 优化<a class="hash-link" href="#js-优化" title="标题的直接链接">​</a></h3><p>下面先讲一些 JS 编码过程中的优化方法。</p><ul><li><p>缓存 DOM 节点</p><p>DOM 操作是相当耗费性能的，因为每次查找一个节点就需要遍历整个 DOM 树，所以当我们要对同一个节点进行多项操作时最好能先用一个变量将其缓存起来；事实上，Jquery 的链式操作正是解决了这一问题。</p></li><li><p>不要遍历节点集合</p><p>我们通常获取的是一个节点集合，而且是实时的，如果我们对其进行遍历则是相当低效的，所以我们最好将其转换为数组后再遍历。</p></li><li><p>不要使用 eval()</p><p><code>eval()</code> 方法是一个相当耗费性能的方法（因为它必须先将字符串进行分析转换成 js 代码，然后才去执行），而且非常不安全，我们应尽可能少的去使用它。</p></li><li><p>减少作用链查找</p><p>当我们在函数内部要对外部变量或者对象进行频繁操作时，我们最好先在函数内部使用一个局部变量将其保存起来，最后在退出函数时将局部变量的值再赋值给目标外部变量。这么做的原因是，当我们频繁操作一个变量时，每次都会从作用域链中去查找该变量，而外部变量查找就会更深一些。</p></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="css-优化">CSS 优化<a class="hash-link" href="#css-优化" title="标题的直接链接">​</a></h3><p>下面则是一些 CSS 书写规则上的优化方式。</p><ul><li><p>选择器不宜复杂</p><p>CSS 样式的选择器不应该嵌套过深，或者组合太复杂，页面无时无刻都在高速进行 CSS 计算，选择器太过复杂的话会严重影响 CSS 的计算速度的。</p></li><li><p>选择器计算顺序（从右到左）</p><p>浏览器对 CSS 选择器的计算顺序是从右到左的，所以我们不能以从左到右的书写顺序去思考这个问题。</p></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="html-优化">HTML 优化<a class="hash-link" href="#html-优化" title="标题的直接链接">​</a></h3><p>对于很复杂的页面，页面 HTML 结构设计也是很重要的，HTML 结构不应该嵌套过深，否则不利于 SEO 排名，我们通常建议选择扁平化的页面结构设计方案。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="varvy">Varvy<a class="hash-link" href="#varvy" title="标题的直接链接">​</a></h2><p>Varvy Tools 是一个国外的在线 Web 优化检测工具，并提供了全面的 SEO 优化、Web 加速、移动端优化的方案。</p><blockquote><p><strong>Varvy：</strong><a href="https://varvy.com/" target="_blank" rel="noopener noreferrer">https://varvy.com/</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>其实前端的优化方案是很细化的，也是繁多的，为了用户体验，我们应该竭力去优化一切能优化到的地方。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>性能优化</category>
            <category>技巧</category>
        </item>
        <item>
            <title><![CDATA[Web 前端跨域访问]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/web-cross-domain</link>
            <guid>/Computer-Technology/Web/web-cross-domain</guid>
            <pubDate>Wed, 10 Aug 2016 15:18:00 GMT</pubDate>
            <description><![CDATA[为了用户的安全，浏览器通常都会限制跨域（Cross-domain）访问，也就是默认不允许不同域名下页面之间进行资源的传递和信息交互，但很多时候我们又有跨域请求资源的需求。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-08-10 15:18:00 </em></p></blockquote><p>为了用户的安全，浏览器通常都会限制跨域（Cross-domain）访问，也就是默认不允许不同域名下页面之间进行资源的传递和信息交互，但很多时候我们又有跨域请求资源的需求。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="同源策略">同源策略<a class="hash-link" href="#同源策略" title="标题的直接链接">​</a></h2><p>我们要在地址栏中正确输入“协议”、“域名”、“端口”、“文件路径”才能访问一个页面，其中任意一个不正确就不会达到我们期望的结果。所谓的跨域就是当<strong>协议</strong>、<strong>域名</strong>、<strong>端口</strong>这三者有一个不同时即称为跨域访问，这时候浏览器为了用户安全就会限制 JavaScript 的跨域行为，这也叫做同源策略（由网景公司提出）。</p><p>通常一个公司（组织、团队）会申请一个主域名，然后根据服务类型分出多个二级域名，在某些涉及到敏感信息的页面又会采用 HTTPS 协议加密，或许还有更多的类似需求，这些需求大多都需要跨域共享资源才能实现用户的定制服务。所以，跨域访问不是个能避免的问题，在不破坏浏览器安全性的前提下我们需要去解决它。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="实现跨域访问">实现跨域访问<a class="hash-link" href="#实现跨域访问" title="标题的直接链接">​</a></h2><p>我们的跨域访问需求是多样化的，因此解决方法也是多样化的，下面就介绍一些常用的方法。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="响应头标识">响应头标识<a class="hash-link" href="#响应头标识" title="标题的直接链接">​</a></h3><p>随着 Ajax 技术的大量使用，Ajax 跨域请求的需求日益增多，我们可以在服务器端很简单的解决这个问题，即在相应文件中添加响应头标识。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 在服务器端的文件中加上以下响应头（允许所有域名跨域访问该资源）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">header('Access-Control-Allow-Origin: *');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 只允许指定的域名跨域访问该资源</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">header('Access-Control-Allow-Origin: http://www.163.com');</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如果要指定多个域名，相互之间用逗号隔开就可以了。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="jsonp">jsonp<a class="hash-link" href="#jsonp" title="标题的直接链接">​</a></h3><p>json 是一种很简单的数据格式，鉴于它的简单性以及 script 标签可跨域的特性，我们采用 jsonp 的方式跨域访问资源。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="客户端代码">客户端代码<a class="hash-link" href="#客户端代码" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 在全局创建一个回调函数（result 参数为跨域访问到的资源）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    function callback(result){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 在这里处理跨域访问到的资源（也可以保存在全局变量中）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 最后销毁全局的回调函数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        window.callback = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 移除动态创建的 script</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        document.body.removeChild(document.getElementById('nScript'));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 自执行，避免污染全局空间</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    (function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 动态创建 script 插入DOM树，实现跨域访问资源</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var nScript = document.createElement('script');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nScript.id = "nScript";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nScript.src = "http://www.163.com/info.php?call=callback";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        document.body.appendChild(nScript);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    })(window);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>注意这个回调函数必须在全局空间内，否则无法被新创建的 <code>&lt;script&gt;</code> 标签调用，该回调函数是在新创建的 script 标签的 <code>src</code> 属性值中以参数方式发送给服务器端的。</strong>该函数执行完毕后，我们也可以自己销毁它，避免污染全局空间；当然，如果我们给动态创建的 script 标签指定一个 id 的话，我们也可以移除该 <code>script</code> 元素。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="服务器端代码">服务器端代码<a class="hash-link" href="#服务器端代码" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;?php</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    header('Content-type: application/json');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取回调方法名(注意与客户端参数名对应)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $call = htmlspecialchars($_GET['call']);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 要返回的 json 格式数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $data = "['Name','Sex','Age']";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    echo $call."({$data})";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> ?&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>事实上，所谓的 jsonp 就是通过客户端将回调函数名发送给服务器端，服务器端再把要返回的 json 数据当作参数与方法名拼接成一段 JavaScript 代码返回给客户端，客户端执行得到的 js 代码表达式（调用回调方法）就实现了跨域访问资源。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="windowname">window.name<a class="hash-link" href="#windowname" title="标题的直接链接">​</a></h3><p><strong>在浏览器中只要处于同一个窗口下，无论页面如何跳转，所有在该窗口下的页面都共享（同步）<code>window.name</code>属性（包括获取、修改操作）。</strong>所以，我们可以将需要跨域访问的资源保存在该属性中共享即可。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="客户端代码-1">客户端代码<a class="hash-link" href="#客户端代码-1" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;sctipt&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 自执行，避免污染全局空间</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    (function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 动态创建 iframe 插入DOM树，实现跨域访问资源</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var nIframe = document.createElement('iframe');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nIframe.style.cssText = 'display: none';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nIframe.src = 'http://www.163.com/info2.html';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nIframe.onload = function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 修改 src 到同源域名下（空白页）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            this.src = 'about:blank';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            this.onload = function() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                // 取得跨域访问资源，移除该 iframe</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                var data = JSON.parse(this.contentWindow.name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                document.body.removeChild(this);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                // 接下来就可以处理得到的资源了</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        document.body.appendChild(nIframe);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    })(window);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>我们只是使用了一个 <code>&lt;iframe&gt;</code> 作为代理获取到跨域资源，但是 <code>&lt;iframe&gt;</code> 之间也是不允许跨域访问的，所以我们再次把它的 <code>src</code> 修改为同源页面或者空白页就可以获取到 <code>window.name</code> 的属性了，也就是我们需要的资源。</strong>同样地，我们也可以在最后移除创建的 <code>iframe</code> 元素。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="资源页面代码">资源页面代码<a class="hash-link" href="#资源页面代码" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    window.name = '["Name","Sex","Age"]';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>由于资源页面仅仅是为了传递数据，我们通常在动态创建 <code>iframe</code> 时设置 CSS 样式为 <code>display：none</code>，避免它影响客户端页面的布局。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="documentdomain">document.domain<a class="hash-link" href="#documentdomain" title="标题的直接链接">​</a></h3><p><strong>即便是同一个页面的 <code>&lt;iframe&gt;</code> 也是有跨域限制的，若多个 <code>&lt;iframe&gt;</code> 载入的页面恰好是跨子域的话（主域名相同），我们可以将它们各自的 <code>document.domain</code> 设置为它们共有的主域名即可实现跨域访问。</strong>下面举个例子，简单的说明一下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// iframe1 ： www.163.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.domain = "163.com";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// iframe2 ： study.163.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.domain = "163.com";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这样设置好之后，我们则可以在全局范围内完成两个 <code>iframe</code> 跨子域的数据访问。</p><p>同理，我们依然可以动态创建一个 <code>iframe</code> 去完成跨子域的数据访问，具体实现我们可以参考上面共享 <code>window.name</code> 时动态创建 <code>iframe</code> 的方法。<strong>需要注意的是，资源页面的 <code>document.domain</code> 属性要提前设置好，否则在客户端页面是无法跨域去修改资源页面的属性的。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="html5-postmessage-api">HTML5 postMessage API<a class="hash-link" href="#html5-postmessage-api" title="标题的直接链接">​</a></h3><p><strong>在 HTML5 中，实现了一个安全便捷的跨域消息传递方案，也就是 <code>postMessage()</code> 方法，它有两个参数：第一个参数为发送的数据，绑定到 <code>event</code> 事件对象的 <code>data</code> 属性上；第二个参数为数据接受者限制域。在接受者页面还需要一个 <code>message</code> 事件供我们监听是否有数据发送过来配合使用。</strong></p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="客户端代码-2">客户端代码<a class="hash-link" href="#客户端代码-2" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 注册 message 事件准备接受数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    window.onmessage = function(e){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 可以先判断发送源再处理，保证安全</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // if e.origin == "http://study.163.com"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 获取跨域访问的数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var data = JSON.parse(e.data);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 处理数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 销毁该事件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.onmessage = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 移除该 iframe</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        document.body.removeChild(nIframe);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var nIframe = document.createElement('iframe');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nIframe.style.cssText = "display: none";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nIframe.src = "http://domain1.com:8081/info2.html";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.body.appendChild(nIframe);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在进行数据接收和处理之前，我们可以使用 <code>event.origin</code> 来判断发送源是否已知，保证页面安全。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="资源页面代码-1">资源页面代码<a class="hash-link" href="#资源页面代码-1" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    window.top.postMessage('["Name","Sex","Age"]', 'http://www.163.com');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>第二个参数规定了数据接受者的域限制，这个也是为了保证敏感数据不会发送给未知页面，确保数据安全。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>事实上，跨域访问是个很常用的需求，而许多解决方法也都异曲同工，也不只有这些方法才能实现跨域访问，采用什么方法都是按实际需求来选择的。而我们使用跨域访问技术，是违背了浏览器默认行为的，所以更应该确保安全性。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>安全</category>
            <category>跨域</category>
        </item>
        <item>
            <title><![CDATA[Ruby-元编程之方法]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Ruby/ruby-meta-method</link>
            <guid>/Computer-Technology/Ruby/ruby-meta-method</guid>
            <pubDate>Mon, 08 Aug 2016 12:56:00 GMT</pubDate>
            <description><![CDATA[这篇文章讲述关于 Ruby 中方法相关的知识。事实上，有很多编程语言都具备元编程的能力，而 Ruby 则是将元编程发挥到极致的语言。元编程这个概念是模糊的，很多人都说是用代码生成代码的方式，不过我们不用去纠结这个概念。元编程最具有魅力的地方就是，原来我们还可以在程序运行时去操控代码。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-08-08 12:56:00 </em></p></blockquote><u>本文的代码均在 Ruby 2.3.0 环境下测试通过。</u><br><br><p>这篇文章讲述关于 Ruby 中方法相关的知识。事实上，有很多编程语言都具备元编程的能力，而 Ruby 则是将元编程发挥到极致的语言。元编程这个概念是模糊的，很多人都说是用代码生成代码的方式，不过我们不用去纠结这个概念。元编程最具有魅力的地方就是，原来我们还可以在程序运行时去操控代码。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="方法method">方法（Method）<a class="hash-link" href="#方法method" title="标题的直接链接">​</a></h2><p>在 OOP（面向对象编程）思想中，对象之间通过消息传递来进行交互，其实所谓的消息就是方法。当我们调用了一个对象的某个方法时，意味着当前对象给目标对象发送了一条消息。所以说，方法也是一个很重要的概念。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="修饰符">修饰符<a class="hash-link" href="#修饰符" title="标题的直接链接">​</a></h3><p><strong>Ruby 中的实例方法有三种修饰符，<code>public</code>、<code>protected</code>、<code>private</code>，修饰符只是限制了实例方法的调用权限，并不影响继承，所有的超类方法都会被子类继承。</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 声明形式修饰方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 这里定义公共方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    protected</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 这里定义保护方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 这里定义私有方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 标记形式修饰方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    class Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def method1 ; end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def method2 ; end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def method3 ; end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 标记，可接受多个方法名参数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    protected :method2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private :method3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其中 <code>public</code> 是默认的修饰符，代表方法是允许外部调用的；而 <code>private</code> 修饰的方法是不允许外部调用的，只允许在对象内部调用且不需要显式指出接受者，默认为 <code>self</code>，否则会报错。</p><p>另外需要注意的是，<code>protected</code> 修饰的方法比较特殊，必须遵循：<strong>接受者与发送者均为同一个类或者具有继承关系的两个类的实例。</strong>其实，就是说保护方法只能在实例方法中调用，在其它地方是不能调用的。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class SuperClass</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def m1(obj)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # 保护方法只能在实例方法中调用</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        obj.m</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    protected</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def m</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        p "1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class SubClass &lt; SuperClass</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 同一个类的不同实例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SuperClass.new.m1(SuperClass.new)  # ==&gt; 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 超类与子类实例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SuperClass.new.m1(SubClass.new)  # ==&gt; 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SubClass.new.m1(SuperClass.new)  # ==&gt; 1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>用 Ruby 来编程的话，我们大多数时候写的都是公共方法，只要能分辨出不同方法的调用权限即可，而且无论什么方法都是会被子类继承的。</p><p>现在可以学习一些元编程的技巧了。下面有一个这样的场景：我们从图书馆办卡、借书、还书的时候都需要机器或者图书管理员作为中介帮助我们进行这些操作，而不能自己直接去操作图书馆数据库。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Library</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def get_card(name,book_id=nil)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        puts "#{name}办卡"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def check_out(name,book_id)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        puts "#{name}借书#{book_id}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def return_book(name,book_id)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        puts "#{name}还书#{book_id}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class Manager</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def initialize</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @library = Library.new</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        puts "现在受理业务"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def controller(type,name,book_id=nil)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        case type</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        when "get_card"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            @library.get_card(name)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        when "check_out"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            @library.check_out(name,book_id)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        when "return_book"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            @library.return_book(name,book_id)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return puts "操作失败"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        puts "操作成功"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 模拟管理员业务</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">manager = Manager.new</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; 现在受理业务</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">manager.controller("get_card","小王")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; 小王办卡</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; 操作成功</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">manager.controller("check_out","小明",222)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; 小明借书222</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; 操作成功</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">manager.controller("return_book","小李",111)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; 小李还书111</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; 操作成功</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="动态派发">动态派发<a class="hash-link" href="#动态派发" title="标题的直接链接">​</a></h3><p>Manager 类代理了读者的各种业务操作，并在其中可以进行相应过滤，保证图书馆数据安全。不过，我们可以看到 <code>Manager</code> 中 <code>controller()</code> 方法是通过 <code>case...when</code> 来代理读者业务的，如果 <code>Library</code> 增加了新业务，那么该方法似乎又要添加新的 <code>when</code> 子句，业务如果很多呢？ <code>controller()</code> 方法似乎会变得臃肿，却实际上都在进行无聊的重复。</p><p>下面我们要介绍的就是<strong>动态派发</strong>技术。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Manager</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def controller(type,name,book_id=nil)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # 动态派发</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @library.send(type,name,book_id)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        puts "操作成功"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>所有的 <code>case...when</code> 只需要一句 <code>send()</code> 方法代替即可实现同样的业务，并且不再担心 <code>Library</code> 增加业务的情况，是不是很强大呢。</p><p><strong>动态派发：</strong>我们可以使用目标对象的<code>send()</code>方法来给其发送一条消息，也就是实现方法调用，该方法第一个参数为方法名称（可以是字符串或者符号），后续参数为传入方法的参数，最后一个参数为方法的块。不过，我们需要强调一下动态的意义，所谓动态就是我们只有在运行时才会知道调用哪个方法，另一个角度来说我们根本不需要在乎调用哪个方法。</p><p><strong>注意：<code>send()</code> 方法会无视 <code>private</code> 权限而调用私有方法，如果有需要可以这么做；否则请用 <code>public_send()</code> 方法代替，从而避免调用目标对象的私有方法。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="动态定义">动态定义<a class="hash-link" href="#动态定义" title="标题的直接链接">​</a></h3><p>现在图书馆外面引进了大量的机器，无需办卡就可以免费阅览部分书籍，并定期更新。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Machine</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def initialize</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        puts "今天可以免费阅览部分书籍了"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def book11</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        puts "欢迎阅览本书，编号11"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        #...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        #return content</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def book22</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        puts "欢迎阅览本书，编号22"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        #...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        #return content</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def book33</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        puts "欢迎阅览本书，编号33"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        #...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        #return content</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 模拟免费阅览业务</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">machine = Machine.new</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">machine.book11</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">machine.book22</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">machine.book33</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>该机器提供了具体的方法让读者免费阅览相应的书籍，而且 <code>book11()</code>、<code>book22()</code>、<code>book33()</code>方法内部业务逻辑相似，更重要的这些可供免费阅览的书籍是定期更新的，那么这些相似的方法也就需要重新去写，这是一个多么枯燥的造轮子的过程。</p><p>下面我们要介绍的就是<strong>动态定义</strong>技术。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Machine</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @@free_id = [11,22,33]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def initialize</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @@free_id.each do |id|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            # 动态定义</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            define_singleton_method("book#{id}") do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                puts "欢迎阅览本书，编号#{id}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                #...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                #return content</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        puts "部分书籍今天可以免费阅览了"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们将提供免费阅览的书籍的编号存进一个类变量，然后在实例化时通过 <code>define_singleton_method()</code> 方法动态的定义该对象的单例方法，以后定期更新类变量中的编号即可，不用手动去删除类中原来的实例方法，也不用手动去定义新添加的实例方法。</p><p><strong>动态定义：</strong>使用 <code>define_singleton_method()</code> 方法即可为当前对象定义一个单例方法(singleton_method)，也就是该对象独有的方法；该方法接受一个参数也就是方法名，块中也可以指定多个参数作为将被定义的方法的参数。<code>define_method()</code> 方法类似的可以用来在类、模块或者类方法内部用来动态定义当前类、模块的实例方法。</p><p><strong>注意：<code>define_singleton_method()</code> 方法定义的是当前对象的单例方法；而 <code>define_method()</code> 方法定义的是当前类、模块的实例方法。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="幽灵方法">幽灵方法<a class="hash-link" href="#幽灵方法" title="标题的直接链接">​</a></h3><p>当我们调用一个不存在的方法时，Ruby 会报错，而报错之前 Ruby 都干了些什么呢？这是一个神秘的过程。我们都知道首先会沿对象的继承链去寻找这个方法，当没有找到时就会报错吗？其实不是的，Ruby 的 Kernel 模块中定义了一个私有实例方法 <code>method_missing()</code>，在没有找到对象的方法时，会将方法名转换成符号类型作为参数传进该方法进一步处理，然后才会报错。</p><p><strong>我们将 <code>method_missing()</code> 方法称为幽灵方法，因为它只有在找不到我们定义的方法时才出现，借助它我们可以做很多原来不可能完成的事情；它的首个参数就是符号类型方法名，其余参数捕获的则是传入该方法的参数。</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def method_missing(name, *args)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        puts "#{name} 方法没有找到，参数为#{args}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这是个空类，我们调用该类实例对象的任何方法都不会报错。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class TestObject</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def initialize</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @collect = {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def method_missing(key, value=nil)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        key = key.to_s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if key =~ /=$/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            @collect.store(key.chop, value)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            @collect[key]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obj = TestObject.new</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obj.a = 123</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obj.a  # ==&gt; 123</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obj.b  # ==&gt; nil</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这样我们就创建了一个可自由设置和访问属性的对象，是不是有点像 JavaScript 中的对象呢。</p><p><strong>注意：<code>method_missing()</code> 实例方法是非常耗性能的，因为要查找整个继承链该方法才会起作用。类似的，在一个类、模块中，<code>const_missing()</code> 类方法用来处理引用一个不存在的常量时的情况。前者为实例方法，后者为类方法。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="响应询问">响应询问<a class="hash-link" href="#响应询问" title="标题的直接链接">​</a></h3><p>我们说了方法就是一个消息，在发送消息之前我们可以询问目标是否会有响应，也就是说要调用的方法是否存在，可以通过 <code>respond_to?()</code> 方法来完成。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def test1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def test2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def test3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">t = Test.new</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">t.respond_to?(:test1)  # ==&gt; true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">t.respond_to?(:test2)  # ==&gt; true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">t.respond_to?(:test3)  # ==&gt; false</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>注意：该方法默认只询问 <code>public</code> 公有方法，若同时要询问保护方法和私有方法，需给定第二个参数为 <code>true</code>；而且私有方法调用时是不需要显式指出接受者的，否则会报错。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="方法参数">方法参数<a class="hash-link" href="#方法参数" title="标题的直接链接">​</a></h2><p>Ruby 中的方法参数目前支持<strong>位置参数</strong>、<strong>关键字参数</strong>、<strong>Array/Hash 参数（可变参数）</strong>、<strong>块参数</strong>。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="位置参数">位置参数<a class="hash-link" href="#位置参数" title="标题的直接链接">​</a></h3><p>特点：数量固定，必须按顺序传入值，可以有默认值。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">def test(a, b)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p a: a, b: b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test(1, 2)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; {:a=&gt;1, :b=&gt;2}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>位置参数可以带有默认值，不传入值时采用默认值，否则覆盖默认值；多个默认值参数位置必须连续，Ruby 会首先填充没有默认值的参数。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">def test(a, b='b', c='c', d)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p a: a, b: b, c: c, d: d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test(1, 2)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; {:a=&gt;1, :b=&gt;"b", :c=&gt;"c", :d=&gt;2}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test(1, 2, 3)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; {:a=&gt;1, :b=&gt;2, :c=&gt;"c", :d=&gt;3}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test(1, 2, 3, 4)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; {:a=&gt;1, :b=&gt;2, :c=&gt;3, :d=&gt;4}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="关键字参数">关键字参数<a class="hash-link" href="#关键字参数" title="标题的直接链接">​</a></h3><p>特点：数量固定，必须显式指出关键字，不传入值时采用默认值，否则覆盖默认值。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">def test(a:, b:'b', c:)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p "#{a} #{b} #{c}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test(a:1, c:3)  # ==&gt; "1 b 3"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test(a:1, b:2, c:3)  # ==&gt; "1 2 3"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="arrayhash-参数">Array/Hash 参数<a class="hash-link" href="#arrayhash-参数" title="标题的直接链接">​</a></h3><p>特点：数量可变，方法内部通过数组索引和键值访问；必须位于参数表末尾。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">def test(a, *b)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p a: a, b: b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test(1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; {:a=&gt;1, :b=&gt;[]}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test(1, 2)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; {:a=&gt;1, :b=&gt;[2]}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test(1, 2, 3)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; {:a=&gt;1, :b=&gt;[2, 3]}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><hr><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">def test(**a)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test()  # ==&gt; {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test(a:1)  # ==&gt; {:a=&gt;1}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test(a:1,b:2)  # ==&gt; {:a=&gt;1, :b=&gt;2}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>属于数组参数的还有一种对应赋值参数，就是把多个参数看为一个整体参数进行对应赋值。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def a(a, (b, c), d)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        p a: a, b: b, c: c, d: d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">A.new.a(1, 2, 3)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; {:a=&gt;1, :b=&gt;2, :c=&gt;nil, :d=&gt;3}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">A.new.a(1, [2, 3], 4)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; {:a=&gt;1, :b=&gt;2, :c=&gt;3, :d=&gt;4}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">A.new.a(1, [2, 3, 4], 5)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; {:a=&gt;1, :b=&gt;2, :c=&gt;3, :d=&gt;5}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>要注意的是，这几种参数可组合在一起，但应符合：</p><ul><li>位置参数是按传入顺序匹配；关键字参数是按关键字匹配，与顺序无关，但必须指定关键字；</li><li>当位置参数与关键字混合使用时，所有位置参数必须放在任意关键字参数前面；</li><li>可变参数（Array 或 Hash）应该放在参数表末尾。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="块参数">块参数<a class="hash-link" href="#块参数" title="标题的直接链接">​</a></h3><p>事实上，每个方法还有一个隐藏的块参数，默认在参数表末尾，并用 <code>&amp;</code> 操作符表示，用来捕获该方法的块。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Array</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def every(&amp;block)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.each(&amp;block)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[1, 2, 3].every { |value| puts value }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; 3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们捕获到块之后就可以将块传入另一个方法，如果不需要将块传给其它方法则直接采用 <code>yield</code> 关键字调用块更方便，性能更好。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>这下是不是见识到了元编程的能力呢？用你写的代码来动态生成更多的代码供我们所使用，也许这就是所谓的生成代码的代码。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《Ruby 元编程》，<!-- -->[意]<!-- --> Paolo Perrotta，廖志刚 译</li><li>《Ruby 基础教程》，<!-- -->[日]<!-- --> 高桥征义 后藤裕藏，何文斯 译</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Ruby</category>
            <category>元编程</category>
            <category>Method</category>
        </item>
        <item>
            <title><![CDATA[Ruby-元编程之对象模型]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Ruby/ruby-meta-object</link>
            <guid>/Computer-Technology/Ruby/ruby-meta-object</guid>
            <pubDate>Mon, 01 Aug 2016 18:39:00 GMT</pubDate>
            <description><![CDATA[这篇文章讲述关于 Ruby 中对象模型相关的知识。事实上，有很多编程语言都具备元编程的能力，而 Ruby 则是将元编程发挥到极致的语言。元编程这个概念是模糊的，很多人都说是用代码生成代码的方式，不过我们不用去纠结这个概念。元编程最具有魅力的地方就是，原来我们还可以在程序运行时去操控代码。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-08-01 18:39:00 </em></p></blockquote><u>本文的代码均在 Ruby 2.3.0 环境下测试通过。</u><br><br><p>这篇文章讲述关于 Ruby 中对象模型相关的知识。事实上，有很多编程语言都具备元编程的能力，而 Ruby 则是将元编程发挥到极致的语言。元编程这个概念是模糊的，很多人都说是用代码生成代码的方式，不过我们不用去纠结这个概念。元编程最具有魅力的地方就是，原来我们还可以在程序运行时去操控代码。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="对象模型">对象模型<a class="hash-link" href="#对象模型" title="标题的直接链接">​</a></h2><p>Ruby 是一个纯面向对象的语言，之所以这么说，是因为 Ruby 的设计哲学将面向对象（OO）这个思想完美的展现出来。接下来我们就要了解一个很重要的概念，对象模型。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="类class">类（Class）<a class="hash-link" href="#类class" title="标题的直接链接">​</a></h3><p>Ruby 的代码是简洁明了的，每一个对象都是相应类的一个实例，目前来看 Ruby 的类并没有什么特色。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 这里定义一个类</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class B &lt; A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 该类（B）继承自类A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong><code>class</code> 关键字声明了一个类，并使用 <code>&lt;</code> 符号标识继承关系。</strong>要特别注意的是，Ruby 的类并没有所谓的构造方法和析构函数，当然这并不意味着一个实例化对象在创建之后我们才能对其进行修改。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 每一个实例化对象在创建时都会自动调用这个方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def initialize</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @a = 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">a = A.new</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong><code>initialize()</code> 方法是对象实例化时默认调用的，于是我们可以在此方法内部完成一些事情（初始化变量，调用方法等），该方法是可以传递参数的。</strong>看见了吧，Ruby 在创建实例对象时的方式也是不同的，是通过调用 <code>new()</code> 方法来完成的，这么做自有它的道理。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="打开类open-class">打开类（Open Class）<a class="hash-link" href="#打开类open-class" title="标题的直接链接">​</a></h3><p>Ruby 中有许多内置类，例如 Object、String、Array、Hash 等等，这些类中都定义了许多内置方法供我们使用。但是，Ruby 允许我们自己去修改这些内置类，这在某些方面来说是很重要的。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class String</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def say</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        p "Hello，World！"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"a".say  # ==&gt; "Hello，World！"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们给 String 类添加了一个实例方法，这时所有的字符串都拥有这个 <code>say()</code> 方法了。<strong><code>class</code> 关键字的另一个作用就是，打开已经存在的一个类对其进行修改。</strong>这是 Ruby 的特色，很方便我们开发者，但是我们不要频繁的打开类，因为到处打开同一个类并不方便我们进行后期维护，而且打开类很容易覆盖内建方法，极有可能导致 Ruby 崩溃。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="对象object">对象（object）<a class="hash-link" href="#对象object" title="标题的直接链接">​</a></h3><p>一个实例化对象拥有什么呢？所属类（class）、超类（superclass）、方法（methods）、实例变量（instance_variables），这些都是一个对象所拥有的属性或者说特征。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def speak</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class B &lt; A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def initialize(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @a = n</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def say</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obj = B.new(5)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obj.class  # ==&gt; B</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obj.methods  # ==&gt; [:speak,:say...]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obj.instance_variables  # ==&gt; [:@a]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">B.class  # ==&gt; Class</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">B.superclass  # ==&gt; A</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>一个对象拥有自己的实例变量，这些变量存放在对象自身中，由对象自己独立修改，不影响其他对象；同一个类中不同的实例对象共享类中定义的实例方法，这些方法存放在类中，各个对象不过是对这些方法存放着一个引用，这样更节省内存。</p><p>我们可以看出来，不仅仅类的实例化对象是对象，其实类自身也是一个对象，每一个类都是从 Class 类中实例化出来的一个对象。<strong>在 Ruby 中任何东西都是对象，包括数字、true、nil，甚至连一段代码都是一个对象。</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">B.ancestors  # ==&gt; [B, A, Object, Kernel, BasicObject]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们可以使用类对象的 <code>ancestors</code> 属性获得自身的继承链，<code>BasicObject</code> 类是所有类的根节点。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="模块module">模块（Module）<a class="hash-link" href="#模块module" title="标题的直接链接">​</a></h3><p>Ruby 中的类也是不支持多重继承的，因为多重继承会引发很多严重的问题，但是多重继承却具有很大的作用，于是 Ruby 用更优雅的方式解决了多重继承的问题，也就是模块（Module）。<strong>当然，模块的作用不仅仅局限于解决多重继承的问题，它还提供了命名空间（namespace）。</strong>将不同的代码分别放在不同的模块中，不仅解决了变量名，方法名容易重复的问题，代码结构也更加清晰，更便于以后代码的维护。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Class.superclass  # ==&gt; Module</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然而，我们会发现所有类对象的所属类（Class）竟继承自 Module，其实根本不用惊讶，我们只需接受这个事实即可。至于为什么，这可能是一个更复杂的问题，不过它并不影响我们理解对象模型。</p><p>由此看来，一个类也只不过是增强的模块，为什么会这么说呢？<strong>因为模块是不允许实例化的，而类可以拥有实例化对象。</strong>我们可以在类中通过 <code>include</code> 方法引入多个模块，从而实现多重继承。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">module M</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def say</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class C</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    include M</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">c = C.new</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">c.methods  # ==&gt; [:say,...]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="常量constant">常量（Constant）<a class="hash-link" href="#常量constant" title="标题的直接链接">​</a></h3><p>常量是相对于变量来说的，一旦定义就不可改变。不过， Ruby 中的常量却是可以改变的，解释器会发出警告但不会阻止，所以我们要格外注意。不过，话说回来我们既然定义的是常量，就没有理由去修改它。常量是以大写字母开头的，是为了和变量进行区分；常量的作用域也和变量不同。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">module M</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    CONST = "out"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    class C</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        CONST = "in"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Module.nesting</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ==&gt; [M::C, M]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">M::CONST  # ==&gt; "out"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">M::C::CONST  #==&gt; "in"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>模块与类就像文件目录系统，在不同目录下可以拥有相同文件；同样地，在不同的类（模块）中可以有命名相同的常量，当然这样我们就不能直接通过常量名访问了。</strong>我们通过 <code>Module.nesting()</code> 方法来获取当前所在类（模块）的常量路径，然后通过这些路径我们就可以在任何位置访问到相应常量。其实，类名、模块名也都是普通常量。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="方法查找method-lookup">方法查找（Method Lookup）<a class="hash-link" href="#方法查找method-lookup" title="标题的直接链接">​</a></h3><p>在面向对象编程中，子类可以覆盖父类中的同名方法，同时子类也可以继承自己没有而父类中有的方法。所以说，当我们在调用一个方法时，方法查找（Method Lookup）过程却是很关键的。<strong>通常来说，方法查找遵循就近原则，先从所属类中查找，如果没找到会从父类中继续查找，依次沿着继承链的顺序直至根节点为止。</strong>我们可以通过 <code>ancestors</code> 方法得到一个类对象的继承链。</p><p>在这里我们需要明白的是，继承链是对于类来说的，而不是类中实例对象，为什么这么说呢？因为我们说过，<strong>只有实例变量是存在于实例对象自身的，而方法是存在于其所在类中的。事实上，方法查找（Method Lookup）的起点并非是其所属类，而是对象自身的单例类（singleton_class），单例类中所有的东西都是对象自身独有的。</strong>单例类也称为特征类、元类，这个概念还是比较复杂的，需单独详细介绍，但这并不影响我们去理解方法查找的大致过程。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="self">self<a class="hash-link" href="#self" title="标题的直接链接">​</a></h3><p>在面向对象编程中，对象之间是通过消息传递来实现交流的，而我们所谓的方法调用其实就是消息传递的过程。所在当前对象就是消息发送者（sender），而接受者（receiver）则是被调用对象，那么方法就是消息了。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def say</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        p "Hello!"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class B</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    a = A.new</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    a.say</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在以上示例中，发送者就是类 B，接受者就是类 A 的实例对象 a，而消息则是 say()方法。<strong>在 Ruby 中，接受者（receiver）会用 <code>self</code> 关键字代替，也就是说 <code>self</code> 永远指向当前消息的接受者，其实它与其他面向对象语言中的 this 关键字很像，但也不完全相同。</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def initialize(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @a = n</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def say</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        p @a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obj1 = A.new(10)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obj2 = A.new(20)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obj1.say  # ==&gt; 10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obj2.say  # ==&gt; 20</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当我们处于一个消息的上下文中时，所有没有指出引用对象的实例变量都是属于 <code>self</code> 所引用对象的实例变量，所以说两个不同的对象被调用同一个方法时，并不会因为实例变量而发生冲突。</p><p><strong>我们还需要知道的是，当我们没有在方法中，而是在一个类（模块）中时 <code>self</code> 指向当前类（模块）；当我们既没有在类（模块）中，也没有在方法中时，self 指向顶级对象 <code>main</code>。</strong>如何理解这句话，我们可以用定义类方法的形式来很形象的说明。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def A.say</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def self.say</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其实这两种形式都是定义了同一个类方法 <code>say()</code>，由此可以看到 <code>self</code> 其实指向的就是类 A。所以，在开发过程中我们更推荐使用 <code>self</code> 来指定类方法，因为若改变类名我们就不需要做任何改变。</p><p><strong>私有方法是默认接受者为 <code>self</code> 的，如果显式指出则会报错，也就是说私有方法调用时直接使用方法名即可，若加上接受者就会报错。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>我们可以简单的将对象模型总结为以下几点：</p><ul><li>对象是由类实例化所得到的，所有的类其实都是从 Class 类实例化得到的，Ruby 中所有的东西都是对象，包括方法。</li><li>class 关键字不仅声明了一个类，并且可以打开一个已存在的类进行修改。</li><li>对象自身只保存实例变量，其方法都存在于所属类及其继承链中，这些方法对于类来说都是实例方法。</li><li>类是一个增强的模块，模块不可以被实例化，模块可以实现多重继承，添加新的命名空间。</li><li>常量的作用域类似于文件目录系统，不同的文件目录中可以存在相同常量但不会冲突。</li><li>所有类对象都有其继承链，可以通过 ancestors 方法查询，根节点是 BasicObject 类。</li><li>方法查找（Method Lookup）的过程遵循就近原则，沿继承链向上查找直至根节点为止。</li><li>self 关键字指向接受者，或者当前类（模块），没有明确指出接受者的实例变量、方法，均默认为 self 所属。</li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《Ruby 元编程》，<!-- -->[意]<!-- --> Paolo Perrotta，廖志刚 译</li><li>《Ruby 基础教程》，<!-- -->[日]<!-- --> 高桥征义 后藤裕藏，何文斯 译</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Ruby</category>
            <category>元编程</category>
            <category>Object</category>
            <category>Module</category>
        </item>
        <item>
            <title><![CDATA[块级格式化上下文（BFC）]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/CSS/css-bfc</link>
            <guid>/Computer-Technology/Web/CSS/css-bfc</guid>
            <pubDate>Fri, 22 Jul 2016 16:35:00 GMT</pubDate>
            <description><![CDATA[在进行页面布局时，通常有流式布局、定位布局、浮动布局这三种形式。而在布局过程中，各元素之间的影响却是一个很关键的问题。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-07-22 16:35:00 </em></p></blockquote><p>在进行页面布局时，通常有流式布局、定位布局、浮动布局这三种形式。而在布局过程中，各元素之间的影响却是一个很关键的问题。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="bfc">BFC<a class="hash-link" href="#bfc" title="标题的直接链接">​</a></h2><p>BFC（Block Formatting Context，块级格式化上下文）是 CSS 2.1 中的一个规范，在 CSS 3 中也称为 Flow Root。首先，BFC 是<strong>块级元素</strong>身上的一个特性，通常它是隐藏不生效的，但某些情况下它会显现出来：</p><ol><li><code>float</code> 不为 <code>none</code></li><li><code>position</code> 不为 <code>static</code>、<code>relative</code></li><li><code>overflow</code> 不为 <code>visible</code></li><li><code>display</code> 不为 <code>table-cell</code>、<code>table-caption</code>、<code>inline-block</code>、<code>flex</code>、<code>inline-flex</code></li></ol><p>只要满足上述任一条件，该块级元素身上的 BFC 特性即会显现出来。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="bfc-特性">BFC 特性<a class="hash-link" href="#bfc-特性" title="标题的直接链接">​</a></h2><p>BFC 特性所展现出来的效果可以通俗的总结为，<strong>BFC 特性导致块级元素成为一个容器盒子，将会把容器内的元素与容器外的元素相互隔离（也就是说容器内外的元素之间不再发生相互作用）。</strong>于是乎，我们就可以说该容器内的所有元素都处在了同一个块级格式化上下文中，只有它们之间才会发生相互作用。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="清除-margin-重叠">清除 margin 重叠<a class="hash-link" href="#清除-margin-重叠" title="标题的直接链接">​</a></h3><p>最典型的相互作用就是两个相邻的块级元素垂直方向上的 <code>margin</code> 值会发生重叠并取最大值。当我们为其中一个元素包裹一个 div 元素并使该元素的 BFC 显现（例如 <code>overflow:hidden</code>）时，我们会发现原先两个元素在垂直方向上的 <code>margin</code> 值已不再重叠，这也就是说明它们之间已不存在相互作用。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="清除-float-覆盖">清除 float 覆盖<a class="hash-link" href="#清除-float-覆盖" title="标题的直接链接">​</a></h3><p>当一个元素 <code>float</code> 设置不为 <code>none</code> 时，该元素将会浮动起来脱离文档流，导致它后面的非浮动元素前移，从而自己覆盖在前移的元素上。这时候，当我们使它后面的非浮动元素 BFC 特性显现（例如 <code>overflow:auto</code>）时，我们就会发现这些元素不会前移了。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="float-包含">float 包含<a class="hash-link" href="#float-包含" title="标题的直接链接">​</a></h3><p>同样地，当父元素的高度没有设置，子元素浮动起来后，父元素的 <code>height</code> 依然为 <code>0</code>。这时候，我们使父元素的 BFC 特性显现（例如 <code>float:left</code>）时，我们会发现父元素的高度被浮动的子元素撑起来了，也就是父元素将浮动子元素包含了起来。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="清除文字环绕">清除文字环绕<a class="hash-link" href="#清除文字环绕" title="标题的直接链接">​</a></h3><p>当一个浮动元素后面跟了个 <code>&lt;p&gt;</code> 元素且内部有大量文字，这些文字会产生环绕效果，也就是环绕在浮动元素周围。我们可以使该 p 元素的 BFC 特性显现（例如 <code>overflow:hidden</code>），然后我们就可以看到文字全部显示在了侧边，而不会再环绕在该浮动元素上下方，也就是类似评论功能中头像与评论文字两侧布局的效果。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>事实上，BFC 特性还有许多其它的妙用，我们在开发过程中可以多尝试，挖掘它新的技巧。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>CSS</category>
            <category>BFC</category>
        </item>
        <item>
            <title><![CDATA[HTTP 协议]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Protocol/protocol-http</link>
            <guid>/Computer-Technology/Protocol/protocol-http</guid>
            <pubDate>Fri, 24 Jun 2016 14:59:00 GMT</pubDate>
            <description><![CDATA[随着 Internet 的发展，使用 Web 浏览器获取网络数据信息已经成为一种习惯标准，而 HTTP 协议也因此成为了网络体系中最重要的应用层协议。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2018-05-27 17:45:00 </em></p></blockquote><p>随着 Internet 的发展，使用 Web 浏览器获取网络数据信息已经成为一种习惯标准，而 HTTP 协议也因此成为了网络体系中最重要的应用层协议。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="http">HTTP<a class="hash-link" href="#http" title="标题的直接链接">​</a></h2><p>HTTP（HyperText Transfer Protocol，超文本传输协议）是一种通用的、无状态（Stateless）的、与传输数据无关的，应用于分布式、协同式、超媒体信息系统的应用层协议。除了应用于 WWW（World Wide Web，万维网）服务器与 Web 浏览器之间的超文本传输外，它也可以应用于像名称服务器和分布对象管理系统这样的系统。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="http-协议运行机制">HTTP 协议运行机制<a class="hash-link" href="#http-协议运行机制" title="标题的直接链接">​</a></h3><p>HTTP 协议是基于 TCP 连接的，以请求/响应（Request/Response）模式来实现客户端（Web 浏览器）和服务器之间通信的。具体过程如下：</p><ol><li><p>客户端和服务器建立 TCP 连接</p><p>HTTP 服务器运行在某个端口（默认为 80）上进行侦听，等待连接请求。客户端打开一个套接字（Socket）向服务器发出连接请求。</p></li><li><p>客户端向服务器发送 HTTP 请求报文</p><p>客户端与服务器建立 TCP 连接后，发送一个请求报文给服务器。请求报文包括请求方法、URI（统一资源标识符）和协议版本号，以及一个类 MIME 消息。这个类 MIME 消息又包括请求修饰符、客户端信息和可能的报文主体内容。</p></li><li><p>服务器向客户端发送 HTTP 响应报文</p><p>服务器接收到客户端的请求报文后，向其返回响应报文。响应报文提供一个状态行和一个类 MIME 消息。状态行包含报文的协议版本号和成功、出错的状态码，类 MIME 消息包含服务器信息、实体元信息，以及可能的实体内容。</p></li><li><p>关闭 TCP 连接</p><p>当服务器响应了客户端的请求后便会关闭 TCP 连接，直到接收到下一个请求后重新建立连接。我们现在使用的 1.1 版本的 HTTP 协议，可以在服务器响应过后，维持该连接一段时间，此时间段内客户端可以继续发送请求而不必重新建立连接。</p></li></ol><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="http-协议的主要特点">HTTP 协议的主要特点<a class="hash-link" href="#http-协议的主要特点" title="标题的直接链接">​</a></h3><p>概述一下 HTTP 协议的主要特点：</p><ul><li><p>简单协议</p><p>与其他协议相比，HTTP 协议更简单，它的通信速度很快，可以有效的处理大量请求。客户端与服务器建立连接后，HTTP 协议要求客户端必须传送的信息只是请求方法和路径。该协议虽然定义了多种请求方法，但是实际上常用的只有其中的三种：GET、HEAD 和 POST。</p></li><li><p>无连接协议</p><p>客户端与服务器间通信是基于 TCP 连接实现的，而且每次只处理一个请求，客户端收到服务器响应后会立即断开连接。1.1 版本的 HTTP 协议也只是短暂维持连接。</p></li><li><p>无状态协议</p><p>这种无状态性使得客户端与服务器连接通信运行速度非常快，但是无状态意味着对事务处理没有记忆，即每一次的请求都是独立的。</p></li><li><p>基于元数据的协议</p><p>HTTP 协议对所有事务处理都加了首部，即在主要数据前面加一部分信息，称之为元数据，即关于信息的数据。用户可以利用元数据进行有条件的请求，或者报告一次事务处理是否成功等。</p></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="统一资源标识符">统一资源标识符<a class="hash-link" href="#统一资源标识符" title="标题的直接链接">​</a></h3><p>URI（统一资源标识符）是统一资源定位符（URL）和统一资源名称（URN）的组合。就 HTTP 而言，统一资源标识符只是通过名称、地址或其他任何特征识别资源的格式化字符串。使用 URI 是为了唯一的标识网络上的某个目标资源；URL 就是我们通常所说的网页地址，它不仅提供了网络上目标资源的标识，而且也提供了我们访问该资源的方式。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="请求方法">请求方法<a class="hash-link" href="#请求方法" title="标题的直接链接">​</a></h3><p>HTTP 协议定义了八种请求方法：</p><ul><li>GET：获取由请求 URI 指定的信息。</li><li>HEAD：与 GET 方法一致，用来测试超文本链接的有效性、可访问性以及最近的改变。</li><li>POST：从客户端向服务器提交数据，例如表单信息。</li><li>PUT：请求服务器将包含的实体存储在请求 URI 所指示的资源中。</li><li>DELETE：请求源服务器删除请求 URI 制定的资源。</li><li>TRACE：用来进行对客户端请求的测试和调试。</li><li>CONNECT：保留给 SSL 隧道使用。</li><li>OPTIONS：表示请求由 URI 指定的请求/响应链上可得到的通信选项信息。</li></ul><p>实际上，常用的只有其中三种方法：GET、HEAD 和 POST。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="响应状态码">（响应）状态码<a class="hash-link" href="#响应状态码" title="标题的直接链接">​</a></h3><p>状态码（HTTP Status Code）是服务器针对客户端请求做出响应的由 3 位十进制数组成的结果码，其中第一位代表了响应类别。状态码有以下几种类别：</p><ul><li>1xx：表示信息，请求收到继续处理。</li><li>2xx：表示成功，服务器对客户端发出请求的接受、理解和处理已成功完成。</li><li>3xx：表示重定向，为完成请求所要求采取的操作，客户端需要重新提出请求。</li><li>4xx：表示客户端错误，请求中有语法错误或不能被执行。</li><li>5xx：表示服务器错误，服务器错误的执行了一个正确的请求。</li></ul><p>大多数时候，我们客户端发出的请求都能被服务器成功处理，并返回 200（ok）；当我们访问一个页面在地址栏输入网址时在末尾不加斜杠 <strong>/</strong>，服务器会有一次重定向行为并返回 301；当我们访问一个不存在的页面时，服务器则会返回 404。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cookiesession">Cookie、Session<a class="hash-link" href="#cookiesession" title="标题的直接链接">​</a></h3><p>由于 HTTP 协议是一个无状态的协议，每一次请求都是相互独立的，这就会导致一些资源会重复下载，因而造成性能严重下降以及其他问题。例如，当我们访问一个论坛时，登录信息若不能保存下来，我们的每次操作都要进行重复登录。而 Cookie 和 Session 这两种机制则是为了解决这个问题而引入的，他们都是用来保存客户端状态信息的。</p><p><strong>通常，当客户端第一次发起请求时，服务器接收到请求后会在内存中创建一个 Session 对象，并利用响应头标识 <code>Set-Cookie</code> 来将 <code>Sessionid</code>（Session 对象的唯一标识）返回给客户端，并存储在 Cookie 中（域名与 sessionid 对应，确保不同域名之间 Session 相互独立）。随后，客户端再次发送请求时，浏览器默认会将 Cookie 中的信息附加到请求信息中，服务器就可以利用客户端发送来的 Cookie 信息判断是否已被服务器授权，以此来实现状态保持。</strong></p><p>Cookie 与 Session 的区别：</p><ul><li>Cookie 将状态保存在客户端；Session 将状态保存在服务器上。</li><li>Cookie 在客户端本地以文本形式存在，伴随每次请求发送给服务器；Session 则由服务器指定一个 SessionID 对每次请求进行验证。</li><li>Session 相对于 Cookie 来说较为安全一点。</li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="https">HTTPS<a class="hash-link" href="#https" title="标题的直接链接">​</a></h2><p>HTTPS（Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的 HTTP 通道。它的实现是在 HTTP 与 TCP 之间加入 SSL（TSL）协议来进行加密认证，从而保证数据传输的安全性。</p><p>HTTP 与 HTTPS 的区别：</p><ul><li>HTTPS 协议需要申请 SSL 证书，且需要一定的费用。</li><li>HTTP 是明文传输信息，而 HTTPS 则是加密传输信息。</li><li>HTTP 使用的端口号是 80，而 HTTPS 使用的端口号是 443。</li><li>HTTP 连接简单、快速，而 HTTPS 需要进行加密认证，会消耗一定时间。</li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>对于 HTTP 协议的报文格式、请求头、响应头，我们均可以使用 HttpWatch 插件（IE 浏览器），或者 Wireshark 软件来进行监测，会有一个直观地、全面地了解。现在的浏览器开发者工具中也带有检测 HTTP 请求的功能。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>协议</category>
            <category>HTTP</category>
        </item>
        <item>
            <title><![CDATA[IP 协议]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Protocol/protocol-ip</link>
            <guid>/Computer-Technology/Protocol/protocol-ip</guid>
            <pubDate>Thu, 23 Jun 2016 18:02:00 GMT</pubDate>
            <description><![CDATA[作为 TCP/IP 协议栈中最核心的协议，IP 协议为网络数据传输和网络互联提供最基本的服务。IP 协议有 IPv4 和 IPv6 两个版本，我们只讨论 TPv4 版本的 IP 协议。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-06-23 18:02:00 </em></p></blockquote><p>作为 TCP/IP 协议栈中最核心的协议，IP 协议为网络数据传输和网络互联提供最基本的服务。IP 协议有 IPv4 和 IPv6 两个版本，我们只讨论 TPv4 版本的 IP 协议。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ip-协议">IP 协议<a class="hash-link" href="#ip-协议" title="标题的直接链接">​</a></h2><p>网络层是网络体系中通信子网的最高层，对于 TCP/IP 来说，网络层是其核心所在。该层包含 5 个协议：IP、ARP、RARP、ICMP、IGMP，其中最主要的 IP 协议负责生成发往目的地的数据报以实现逻辑寻址，完成数据从网络上一个节点向另一个节点的传输。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ip-协议定义">IP 协议定义<a class="hash-link" href="#ip-协议定义" title="标题的直接链接">​</a></h3><p>IP（Internet Pcotocol，网际协议）是 TCP/IP 协议栈中网络层的协议，也是最为核心的协议，提供无连接的 IP 数据报投递服务。IP 协议是为了在分组交换（Packer-switching，又称包交换）计算机通信网络的互联系统中使用而设计。IP 层（网络层）只负责数据的路由和传输，在源节点与目的节点之间传送数据报，但并不处理数据内容。数据报中有目的地址等必要内容，使每个数据报经过不同的路径也能准确到达目的地，在目的地重新组合还原成原来发送的数据。IP 协议使用以下 4 个主要的机制来提供服务：</p><ul><li>服务类型（Type of Service）</li><li>用来指示要求的服务质量。</li><li>生存时间（Time of Live）</li><li>数据报生存时间的上限。</li><li>选项（Operation）</li><li>提供某些情况下需要或有用的控制功能。</li><li>首部校验和（Header Checksum）</li><li>提供对 IP 首部内容进行出错检测的功能。</li></ul><p>IP 层通过 IP 地址实现了物理地址的统一，通过 IP 数据报实现了数据帧的统一。IP 层通过对以上两个方面的统一达到了向上屏蔽底层差异的目的。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ip-协议的基本功能">IP 协议的基本功能<a class="hash-link" href="#ip-协议的基本功能" title="标题的直接链接">​</a></h3><p>IP 协议的主要目的是通过一个互联的网络传输数据报，涉及两个最基本的功能。</p><ul><li><p>寻址（Addressing）</p><p>IP 协议根据数据报首部中包括的目的地址将数据报传送到目的节点，这就涉及传送路径的选择，即路由功能。IP 协议使用 IP 地址来实现路由。</p></li><li><p>分片（Fragmentation）</p><p>IP 协议还提供对数据大小的分片和重组，以适应不同网络对数据包大小的限制。如果网络只能传送小数据包，IP 协议将对数据报进行分段并重新组成小块再进行传送。</p></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ip-协议的特性">IP 协议的特性<a class="hash-link" href="#ip-协议的特性" title="标题的直接链接">​</a></h3><p>IP 协议是一个无连接的、不可靠的、点对点的协议，只能尽力传送数据，不能保证数据的到达。具体地讲，主要有以下特性：</p><ul><li>IP 协议提供无连接的数据报服务，各个数据报独立传输，可能沿着不同的路径到达目的地，也可能不会按序到达目的地。</li><li>IP 协议不含错误检测或错误恢复的编码，属于不可靠的协议。位于上一层（传输层）的 TCP 协议则提供了错误检测和恢复机制。</li><li>作为一种点对点协议，虽然 IP 数据报携带源 IP 地址和目的 IP 地址，但进行数据传输时的对等实体一定是相邻设备（同一网络）中的对等实体。</li><li>IP 协议的效率非常高，实现起来非常简单。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="数据报分片">数据报分片<a class="hash-link" href="#数据报分片" title="标题的直接链接">​</a></h3><p>数据报分片（Fragmentation）是 IP 协议的基本功能中的一个功能，实现数据报分片的意义和作用我们接下来将会讨论。IP 数据报最大长度可达 65535（2^16-1）字节，但很少有底层的物理网络能够封装如此大的数据包，因此将 IP 数据报分片传输，目的主机将分片重组还原为一个数据报。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="最大传输单元mtu">最大传输单元（MTU）<a class="hash-link" href="#最大传输单元mtu" title="标题的直接链接">​</a></h4><p>底层物理网络能够封装的最大数据长度称为该网络的最大传输单元（Maximum Transmission Unit，MTU）。当数据报封装成帧时，数据报的长度必须小于 MTU。对于不同的物理网络协议，MTU 的值也是不同的。物理网络的 MTU 是由硬件决定的，通常网络的速度越高，MTU 也就越大。</p><p>IP 数据报在从源节点到目的节点的传输过程中往往要经过多个不同的网络，而各个物理网络的 MTU 可能不同。将一个数据报封装在具有较大 MTU 的物理网络帧中发送时，可能在穿过较小 MTU 的物理网络时无法正常传输。此时解决这个问题有两种方案：一是将数据报按照从源节点到目的节点的最小 MTU 进行封装，但这种方案不能充分利用网络的传输能力，传输效率较低；二是将数据报先以源节点所在网络的 MTU 进行封装，在传输过程中再根据需要对数据报进行动态分片。</p><p>TCP/IP 协议采用的是第二种方案，即数据报分片。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="分片与重组">分片与重组<a class="hash-link" href="#分片与重组" title="标题的直接链接">​</a></h4><p>当 IP 层要传送的数据大于物理网络的最大传输单元时，必须将 IP 数据包分片传输。分片是将一个数据报划分成若干个更小的单元，以适应底层物理网络的 MTU。分片必须满足两个条件：一是分片尽可能大，但必须能够为帧所封装；二是分片中数据的大小必须为 8 字节的整数倍，否则 IP 无法表达其偏移量。</p><p>同一数据报各个分片到达目的地，必须被重组为一个完整的数据报。目的主机在进行分片重组时，采用一组重组定时器。开始重组时即启动定时器，如果重组定时器超时仍然未能完成重组（由于某些分片没有及时到达目的主机），源主机的 IP 层将丢弃该数据报，并产生一个超时错误，报告给源主机。</p><p>分片可以在源主机或传输路径上的任何一台路由器上进行，而分片的重组只能在目的主机上进行。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ip-寻址与地址解析">IP 寻址与地址解析<a class="hash-link" href="#ip-寻址与地址解析" title="标题的直接链接">​</a></h2><p>IP 地址是 TCP/IP 中的一个非常重要的概念，在网络层实现了底层网络地址的统一，使 TCP/IP 网络层地址具有全局唯一性和一致性。<strong>IP 地址是 TCP/IP 网络的寻址机制（逻辑寻址），是 TCP/IP 网络进行寻址和选择路由的依据。</strong>IP 数据包最终需要物理网络来处理，当 IP 数据包交付给物理网 络之后，物理网络就需要它自己的寻址机制来处理，即 MAC 寻址（物理地址）。这就涉及两种地址的转换，具体由地址解析协议（ARP）和反向地址解析协议（RARP）来实现。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ip-地址">IP 地址<a class="hash-link" href="#ip-地址" title="标题的直接链接">​</a></h3><p>在 TCP/IP 网络中每个主机都有唯一的地址，它是通过 IP 协议来实现的，用来标识每一个网络节点以确保它们之间的相互通信。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ip-地址格式">IP 地址格式<a class="hash-link" href="#ip-地址格式" title="标题的直接链接">​</a></h4><p>Internet 采用一种全局通用的地址格式，为每一个网络和每一台主机都分配一个 IP 地址，以屏蔽物理网络地址的差异。IPv4 规定，IP 地址长度为 32 位（IPv6 规定地址长度为 128 位）。因此，IPv4 的地址空间为 2^32。</p><p>IP 地址是 32 位二进制数字，为了方便我们一般将 IP 地址分为 4 个 8 位字段，以 4 个十进制数表示，之间用点隔开。例如，202.112.10.105，这种记录方法称为“点-数”法。</p><p>IP 地址标识一个网络和连入此网络的一台主机。IP 地址采用一种由网络 ID（Net-id）和主机 ID（Host-id）组成的两级结构，网络 ID 表示主机所属的网络，主机 ID 代表主机本身。例如，192.168.1.102，这个 IP 地址中前 3 个十进制数表示网络 ID，最后一个十进制数表示主机 ID。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ip-地址分配">IP 地址分配<a class="hash-link" href="#ip-地址分配" title="标题的直接链接">​</a></h4><p>IP 地址分配的基本原则是，要为同一网络（子网或网段）内的所有主机分配相同的网络 ID，同一网络中的不同主机必须分配不同的主机 ID，以区分主机。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ip-地址分类编址">IP 地址分类编址<a class="hash-link" href="#ip-地址分类编址" title="标题的直接链接">​</a></h4><p>考虑到不同规模网络的需要，IP 将 32 位地址空间划分为不同的地址类别，并定义了 5 类地址，即 A 类至 E 类。其中 A、B、C 是 3 个基本的类别，分别代表不同规模的网络，由 InterNIC 在全球范围内统一分配。</p><ul><li><p>A 类地址</p><p>高 8 位代表网络 ID，低 24 位代表主机 ID。</p></li><li><p>B 类地址</p><p>高 16 位代表网络 ID，低 16 位代表主机 ID。</p></li><li><p>C 类地址</p><p>高 24 位代表网络 ID，低 8 位代表主机 ID。</p></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ip-子网与超网">IP 子网与超网<a class="hash-link" href="#ip-子网与超网" title="标题的直接链接">​</a></h3><p>子网（Subnet）是对一个网络的进一步划分。子网划分不仅解决了 IP 地址的短缺问题，而且可以让用户灵活配置自己的 IP 网络。超网（Supernet）与子网正好相反，将多个网络合并成一个网络。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="子网掩码subnet-mask">子网掩码（Subnet Mask）<a class="hash-link" href="#子网掩码subnet-mask" title="标题的直接链接">​</a></h4><p>子网掩码（Subnet Mask）用来将 IP 地址划分成网络地址和主机地址两部分。<strong>对于同一个 IP 地址，如果其子网掩码不同，则代表不同的网络或主机。</strong></p><p>与 IP 地址相同，子网掩码也是 32 位二进制数，其中高位部分对应 IP 地址中的网络位，用“1”表示；剩余低位部分对应 IP 地址中的主机位，用 “0” 表示。为了方便，同样采用“点-数”法记录。</p><ul><li>A 类地址子网掩码：255.0.0.0</li><li>B 类地址子网掩码：255.255.0.0</li><li>C 类地址子网掩码：255.255.255.0</li></ul><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="划分子网">划分子网<a class="hash-link" href="#划分子网" title="标题的直接链接">​</a></h4><p>对于一个 C 类地址网络来说，可支持 254 台主机接入网络，如果需要两个网络，并且两个网络接入主机数加起来不超过 254 台（各自的主机数较少）时，若使用两个 C 类地址网络，对于 IP 地址来说是一种浪费；此时可以利用子网掩码来将同一个 C 类地址网络进一步划分成两个不同子网，以此来提高 IP 地址的利用率。</p><p>将 IP 地址的主机 ID 部分划分成：子网 ID +主机 ID。也就是说将原来的 IP 地址两级结构扩充为三级结构：网络 ID +子网 ID +主机 ID。通过增加子网掩码中的 “1”（增加网络位），即可实现子网划分。例如，将 C 类地址的子网掩码 255.255.255.0，改成 255.255.255.128 即可。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="组合超网">组合超网<a class="hash-link" href="#组合超网" title="标题的直接链接">​</a></h4><p>对于一个 C 类地址网络来说，它仅能支持 254 台主机接入网络，如果需要一个网络，并且接入主机数多于 254（远小于 65534）时，若使用一个 B 类地址网络（可支持接入主机 65534 台），对于 IP 地址来说是一种浪费；此时可以利用子网掩码来将多个 C 类地址网络合并成一个超网，以此来提高 IP 地址的利用率。</p><p>将 IP 地址的网络 ID 一部分划分为新的主机 ID。通过减少子网掩码中的 “1”（减少网络位），即可实现超网组合。例如将 C 类地址的子网掩码 255.255.255.0，改成 255.255.248.0 即可。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="地址解析">地址解析<a class="hash-link" href="#地址解析" title="标题的直接链接">​</a></h3><p>IP 地址属于网络层的寻址，数据包通过 IP 地址及路由表在物理网络中传递，还必须遵守网络的物理层协议，底层的物理网络需要获知 IP 地址，这就需要将 IP 地址映射为物理网络地址。同时，物理网络地址也需要映射为 IP 地址。网络层提供的 ARP（地址解析协议）和 RARP（反向地址解析协议）即可实现 MAC 地址（物理地址）和 IP 地址（逻辑地址）的相互转换。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="arp地址解析协议">ARP（地址解析协议）<a class="hash-link" href="#arp地址解析协议" title="标题的直接链接">​</a></h4><p>IP 数据报必须封装成帧才能通过物理网络传输，这就要求发送方必须知道接收方的物理地址。ARP 的功能分为两部分：一部分在发送数据包时请求获得目的节点的物理地址；另一部分向请求物理地址的节点发送解析结果。</p><p>当网络中的一个节点（主机或路由器）需要获知另一个节点（主机或路由器）的物理地址时它就发送 ARP 查询报文。这个报文包括发送方的物理地址和 IP 地址，以及接收方的 IP 地址。由于发送方并不知道接收方的物理地址，查询报文就只能在网络上广播。</p><p>在网络上的每一个节点都会接受这个 ARP 查询报文，将该报文中的接收方 IP 地址与自己的 IP 地址进行比较，相同的节点向查询者回传 ARP 应答报文。该应答报文中包含接受方的 IP 地址和物理地址，以及发送方的物理地址。由于知道查询者物理地址，该报文用单播方式直接发送给查询者。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="rarp反向地址解析协议">RARP（反向地址解析协议）<a class="hash-link" href="#rarp反向地址解析协议" title="标题的直接链接">​</a></h4><p>RARP 可以实现从物理地址到 IP 地址的转换，主要被无盘计算机用来获取其 IP 地址。</p><p>ARP 假定每个主机都知道自己的物理地址和 IP 地址的映射，地址解析的目的是获取另一个网络节点的物理地址。而 RARP 则主要是通过本机的物理地址获取本机的 IP 地址，需要借助于 RARP 服务器帮助完成解析。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>虽然网络层中有 5 个协议，但 IP 协议是最核心的协议，其他 4 个协议都是为 IP 协议服务的，增加地址解析、差错控制等功能。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>协议</category>
            <category>IP</category>
        </item>
        <item>
            <title><![CDATA[TCP 与 UDP 协议]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Protocol/protocol-tcp-udp</link>
            <guid>/Computer-Technology/Protocol/protocol-tcp-udp</guid>
            <pubDate>Mon, 20 Jun 2016 17:21:00 GMT</pubDate>
            <description><![CDATA[传输层是网络分层模型中举足轻重的层，它是底层通信子网与高层资源子网的接口与桥梁，提供了面向连接的传输控制协议（Transmission Control Protocol，TCP）和无连接的用户数据报协议（User Datagram Protocol，UDP），负责提供端到端的数据传输服务。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-06-20 17:21:00 </em></p></blockquote><p>传输层是网络分层模型中举足轻重的层，它是底层通信子网与高层资源子网的接口与桥梁，提供了面向连接的传输控制协议（Transmission Control Protocol，TCP）和无连接的用户数据报协议（User Datagram Protocol，UDP），负责提供端到端的数据传输服务。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="传输层协议">传输层协议<a class="hash-link" href="#传输层协议" title="标题的直接链接">​</a></h2><p>传输层在两个应用实体之间实现可靠的、透明的、有效的端到端数据传输服务，其主要的功能为以下几个方面：</p><ul><li>创建进程间通信，进程即正在运行的应用程序。</li><li>提供控制机制，如流量控制，差错控制等。</li><li>提供连接机制。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="tcp-协议">TCP 协议<a class="hash-link" href="#tcp-协议" title="标题的直接链接">​</a></h3><p>TCP（Transmission Control Protocol，传输控制协议）是传输层最重要和最常用的协议。它提供了面向连接的、可靠的数据传输服务，保证了端到端数据传输的可靠性。以下为 TCP 协议的特点：</p><ul><li><p>面向连接</p><p>两个需要通过 TCP 进行数据传输的进程之间首先必须建立一个逻辑连接（虚电路），即 TCP 连接；在数据传输完成后需要关闭（释放）连接。一般将发出请求连接的应用进程称为客户进程，而将响应连接的应用进程称为服务器进程，即 TCP 连接的建立采用的是一种客户/服务器模型。</p></li><li><p>全双工</p><p>提供全双工数据传输服务，只要建立了 TCP 连接，就能在两个进程间进行双向的数据传输服务，但是这种传输只是端到端的传输，不支持广播和多播。</p></li><li><p>可靠</p><p>提供流量控制、拥塞控制、差错控制，从而保证数据传输的可靠性。</p></li><li><p>基于字节流</p><p>提供面向字节流的服务，两个建立了 TCP 连接的应用进程间之间交换的是字节流。在传输层上数据被当作没有信息的字节序列来对待。</p></li></ul><p>TCP 比较安全、稳定，但由于每次传输数据时都要先建立连接，并在传送完成后关闭连接，所以效率比较低，而且占用的资源也比较多。TCP 协议的主要作用是在计算机之间可靠的传输数据，将具有一定可靠性的流式通信服务提供给应用程序。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="udp-协议">UDP 协议<a class="hash-link" href="#udp-协议" title="标题的直接链接">​</a></h3><p>UDP（User Datagram Protocol，用户数据报协议）是不可靠的无连接的基于数据报的协议，支持无连接 IP 数据报的通信方式。相对于 TCP 协议来说，UDP 是一种非常简单的协议，在网络层的基础上实现了进程之间端到端的通信。以下为 UDP 协议的特点：</p><ul><li><p>无连接</p><p>传输数据之前双方不需要建立连接，因此不存在连接建立的时延。</p></li><li><p>无需维护</p><p>传输数据不需要维护连接状态，包括收发状态等，这样一台服务器可同时向多个客户端传输相同的数据，如实现多播。</p></li><li><p>报文首部短</p><p>UDP 数据报首部只有 8 字节，相对于 TCP 的 20 字节首部的开销要小很多。</p></li><li><p>吞吐量不受控制</p><p>吞吐量不受流量控制算法的调节，只受应用软件生成数据报的速率、传输带宽、信源和信宿主机性能的限制。</p></li></ul><p>UDP 的不可靠性并不影响 UDP 的可用性。在没有严格可靠性要求的情况下，UDP 避免了 TCP 面向连接的消耗，反而能提高传输速率和降低资源占用，非常适合于简单查询和响应类型的通信，如广播、路由、多媒体等广播形式的通信任务。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="进程间通信">进程间通信<a class="hash-link" href="#进程间通信" title="标题的直接链接">​</a></h2><p>传输层以下各层（通信子网）只提供相邻节点之间的点到点传输。例如，IP 协议负责在网络节点之间的通信，即主机之间的通信。作为网络层协议，IP 只能将报文交付给目的主机，但是这是一种不完整的交付，因为这个报文还必须送交到相应的进程。传输层提供端到端的数据传输，即源进程到目的进程的端到端通信。</p><p>由于在一台计算机中同时存在多个进程，进程之间要进行通信，首先要解决进程的标识问题。为了保证数据能够正确地到达指定的目的进程，必须显示地给出全局唯一的目的进程标识符。主机可以用 IP 地址进行标识，IP 地址是全局唯一的；然后我们再给主机上的进程赋予一个本地唯一的标识符端口号（Port Number）。为了区别 TCP 和 UDP 的进程，还要指明协议。因此，我们要全局唯一地标识一个进程，必须采用一个三元组来表示：&lt;协议，主机 IP 地址，端口号&gt;。</p><p>网络通信是两个进程之间的通信，两个进程相关联，因为采用的是同一种协议通信，可以用一个五元组来描述两个进程的关联：</p><blockquote><p>&lt;源 IP 地址，源端口号，协议，目的 IP 地址，目的端口号&gt;。</p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="tcp-连接机制">TCP 连接机制<a class="hash-link" href="#tcp-连接机制" title="标题的直接链接">​</a></h2><p>TCP 提供的是面向连接的数据传输服务，所以在进行数据传输前通信双方要建立 TCP 连接，数据传输完成后又要关闭 TCP 连接。我们可以将这个过程大致描述为：</p><ul><li>TCP 连接建立（三次握手）</li><li>数据传输（保持连接）</li><li>TCP 连接关闭（四次挥手）</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="连接建立三次握手">连接建立（三次握手）<a class="hash-link" href="#连接建立三次握手" title="标题的直接链接">​</a></h3><p>通信双方在使用 TCP 传输数据之前，要建立一个稳定、可靠的 TCP 连接，这个连接建立过程形象地称为“三次握手”。下面来具体分析这个过程：</p><ul><li><p>第一次握手</p><p>客户端（源主机）向服务器（目的主机）发送 TCP 连接建立请求（又称 SYN 段），其中标志 SYN=1，ACK=0；序列号为客户端初始序列号（简称 ISN）；目的端口号为所请求的服务（进程）对应的端口。同时客户端启动计时器，等待接受服务器的应答。这个 SYN 段不携带任何数据，但是它消耗一个序列号。这一步客户端执行主动打开（Action Open）。</p></li><li><p>第二次握手</p><p>服务器收到客户端的 TCP 连接建立请求后，将回应一个 TCP 连接建立应答（又称 SYN/ACK 段），其中标志 SYN=1，ACK=1；序列号为服务器初始序列号；确认号为客户端初始序列号加 1；目的端口号为客户端的源端口号。同时服务器启动计时器，等待接受客户端的应答。这个 SYN/ACK 段不携带数据，但消耗一个序列号。这一步服务器执行被动打开（Passive Open）。</p></li><li><p>第三次握手</p><p>客户端计时器超时前若收到服务器的应答报文，客户端会向服务器发送一个 TCP 连接建立确认报文（又称 ACK 段），其中标识 SYN=0，ACK=1；序列号为客户端初始序列号加 1；确认号为服务器初始序列号加 1。这个 ACK 段若不携带数据，则不消耗序列号。</p></li></ul><p>至此，服务器计时器超时前若收到客户端确认报文，则 TCP 连接正式建立。</p><p>“三次握手”的过程大致可以描述为：<strong>客户端发送（主动）连接建立请求——&gt;服务器接收请求，发送（被动）连接建立请求和应答信息——&gt;客户端发送连接建立确认信息。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="数据传输保持连接">数据传输（保持连接）<a class="hash-link" href="#数据传输保持连接" title="标题的直接链接">​</a></h3><p>在完成“三次握手”的过程后，通信双方的 TCP 连接正式建立，此时就可以进行数据双向传输了。</p><p>客户端和服务器都可以在两个方向上进行数据传输和确认。客户端和服务器分别记录对方的序列号，序列号的作用是为了同步数据。客户端向服务器发送数据报文，服务器收到后会回复一个带有 ACK 标志的确认报文段。客户端收到该确认报文段，就知道数据已经成功发送，否则，报文将被重新发送。接着它继续向服务器发送报文。</p><p>建立 TCP 连接之后，可以保持连接以免每次发送数据都要重复执行握手过程。这样，即使没有数据在 TCP 链路上传送，仍旧能够维持连接。通常应用层可以实现连接保持，如 FTP。如果应用程序不能保持连接，则可以由服务器发起 TCP 保持连接。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="连接关闭四次挥手">连接关闭（四次挥手）<a class="hash-link" href="#连接关闭四次挥手" title="标题的直接链接">​</a></h3><p>双方在完成数据传输后，可以关闭 TCP 连接，释放资源同时也能准备为其他进程提供服务，而这个关闭（释放）连接的过程也被形象地称为“四次挥手”。<strong>至于为何建立连接是“三次握手”，而关闭连接却是“四次挥手”，是因为 TCP 连接是全双工的，支持通信双方进行双向数据传输，所以每个方向上都必须单独关闭。</strong>下面来具体分析这个过程：</p><ul><li><p>第一次挥手</p><p>客户端向服务器发送 TCP 连接关闭请求（又称 FIN 段），其中标志 FIN=1。主动关闭客户端到服务器的数据传送。</p></li><li><p>第二次挥手</p><p>服务器收到客户端的 TCP 连接关闭请求后，将回应一个 TCP 连接关闭应答（又称 ACK 段），其中标志 ACK=1。并通知己方（服务器）应用程序关闭。</p></li><li><p>第三次挥手</p><p>服务器收到己方应用程序关闭信息后，向客户端发送 TCP 连接关闭请求（又称 FIN 段），其中标志 FIN=1。</p></li><li><p>第四次挥手</p><p>客户端收到服务器的 TCP 连接关闭请求后，将回应一个 TCP 连接关闭应答（又称 ACK 段），其中标志 ACK=1。</p></li></ul><p>至此，服务器收到客户端应答报文后会单向关闭 TCP 连接，稍后客户端也会单向关闭 TCP 连接，这样 TCP 连接就同时双向关闭了。</p><p>“四次挥手”的过程大致可以描述为：<strong>客户端发送（主动）连接关闭请求——&gt;服务器接受请求，发送应答信息，并通知应用程序关闭——&gt;服务器应用程序已关闭，发送（被动）连接关闭请求——&gt;客户端接受请求，并发送应答信息。</strong></p><p><strong>要注意的是，四次挥手过程中主动发起连接关闭方既可以是客户端（Client）也可以是服务器（Server）。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>对于 TCP 和 UDP 协议的报文格式，以及 TCP 连接整个过程我们可以使用 Wireshark 软件来监测，并进行具体的分析，这样我们可以直观的了解它们，也能帮助我们更好的理解。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>协议</category>
            <category>TCP</category>
            <category>UDP</category>
        </item>
        <item>
            <title><![CDATA[局域网（LAN）与广域网（WAN）]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Protocol/protocol-lan-wan</link>
            <guid>/Computer-Technology/Protocol/protocol-lan-wan</guid>
            <pubDate>Sat, 18 Jun 2016 18:22:00 GMT</pubDate>
            <description><![CDATA[TCP/IP 的网络接口层包括物理层和数据链路层，既是局域网（LAN）技术起作用的分层，又是广域网（WAN）技术和连接管理协议发挥作用的层次。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-06-18 18:22:00 </em></p></blockquote><p>TCP/IP 的网络接口层包括物理层和数据链路层，既是局域网（LAN）技术起作用的分层，又是广域网（WAN）技术和连接管理协议发挥作用的层次。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="局域网lan">局域网（LAN）<a class="hash-link" href="#局域网lan" title="标题的直接链接">​</a></h2><p>局域网（Local Area Network，LAN）是指一个局部的地理范围内（如一个学校、公司、单位），将各种计算机、外部设备和数据库等互相连接起来组成的计算机通信网。局域网通常是封闭的，但它可以通过数据通信网或专用数据电路，与远方的局域网、数据库或处理中心相连接，构成一个大范围的信息处理系统。局域网可以实现硬件资源（如服务器、打印机、扫描仪等）共享和软件资源（应用软件、文件管理等）共享，还可以实现办公自动化（如工作组内的日程安排、电子邮件和传真通信服务）等。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="局域网协议标准">局域网协议标准<a class="hash-link" href="#局域网协议标准" title="标题的直接链接">​</a></h3><p>IEEE 802 是为了规范随着局域网技术进步而产生的种类繁多的局域网产品而制定的标准，有时也称为局域网参考模型。它包括 CSDM/CD、令牌总线和令牌环网等底层（物理层和数据链路层）网络协议。</p><p>IEEE 802 标准中规定<strong>局域网体系结构由物理层和数据链路层组成，且数据链路层又划分为：介质访问控制（Media Access Control，MAC）子层和逻辑链路控制（Logical Link Control，LLC）子层。</strong></p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="物理层">物理层<a class="hash-link" href="#物理层" title="标题的直接链接">​</a></h4><p>物理层主要规定了局域网的机械、电气、功能和规程等方面的特性。例如，局域网采用的物理介质、传输距离、传输速率、传输信号数据编码与解码、物理接口特性、拓扑结构，以及的节点之间采用何种连接方式等硬件方面的问题。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="介质访问控制mac子层">介质访问控制（MAC）子层<a class="hash-link" href="#介质访问控制mac子层" title="标题的直接链接">​</a></h4><p><strong>局域网组网的一个显著特点是网上所有计算机使用一条共享信道进行广播式通信，这是与点对点链路组成的广域网通信的重要区别。</strong>因此，局域网协议需要解决的一个重要问题就是多个节点如何接入一条共享信道，即介质访问控制（MAC 访问）问题。</p><p>MAC 子层构成数据链路层的下半部分，它直接与物理层相邻，负责介质访问控制机制的实现，处理与特定类型的局域网相关的问题。例如，处理信道管理算法，如令牌传递、带有冲突检测的载波监听多路访问（CSMA/CD）、优先权（802.5 和 802.4）、差错检测和成帧。MAC 子层有以下两个主要功能：</p><ul><li>支持 LLC 子层完成介质访问控制空能，MAC 子层为不同的物理介质定义了介质访问控制标准。</li><li>在发送数据时，将从上一层接受的数据组装成带 MAC 地址和差错检测字段的数据帧；在接收数据时拆帧，并完成地址识别和差错检测。</li></ul><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="逻辑链路控制llc子层">逻辑链路控制（LLC）子层<a class="hash-link" href="#逻辑链路控制llc子层" title="标题的直接链接">​</a></h4><p>LLC 子层构成数据链路层的上半部分，与网络层和 MAC 子层相邻，负责屏蔽掉 MAC 子层的不同实现，隐藏各种局域网技术之间的差别，向网络层提供服务。LLC 子层的功能主要是建立、维持和释放数据链路，提供一个或多个服务访问点，为网络层提供面向连接的或无连接的服务。另外 LLC 子层还提供差错控制、流量控制和发送顺序控制等功能。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="以太网">以太网<a class="hash-link" href="#以太网" title="标题的直接链接">​</a></h3><p>以太网（Ethernet）主要采用总线型拓扑的基带传输系统，使用相当广泛。随着技术的发展，网桥、交换机等产品的出现，以太网得到了进一步的发展，快速以太网、吉比特以太网甚至万兆以太网相继出现。在以太网技术中，快速以太网是一个里程碑，确立了以太网技术在桌面的统治地位。以太网技术作为局域网链路层标准战胜了令牌总线、令牌环网等技术，成为局域网事实标准。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="广域网wan">广域网（WAN）<a class="hash-link" href="#广域网wan" title="标题的直接链接">​</a></h2><p>广域网（Wide Area Network，WAN）是指将跨地区的计算机互联在一起组成的计算机网络，又称为远程网。广域网除了直接连接分散的、独立的计算机之外，常被用来连接多个局域网，而 Internet 是连接多个广域网、局域网和分散的计算机所组成的网际网。</p><p><strong>广域网由通信子网和资源子网两部分构成。</strong>通信子网是由通信链路、通信节点等网络设备组成的通信网，主要使用分组交换技术。局域网使用的协议大多数是位于数据链路层或者物理层，而广域网的协议除了物理层和数据链路层外，更多集中在网络层。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="广域网通信技术">广域网通信技术<a class="hash-link" href="#广域网通信技术" title="标题的直接链接">​</a></h3><p>广域网链路分成两种：一种是专线连接，另一种是交换连接。专线是永久的点对点的服务，常用于为某些重要的企业用户提供核心或骨干连接。交换连接包括电路交换、分组交换，很少使用报文交换。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="分组交换">分组交换<a class="hash-link" href="#分组交换" title="标题的直接链接">​</a></h4><p>分组交换是将数据分隔为一个个分组（数据包）进行传送，有两种实现方式：虚电路（Virtual Circuit）和数据报（Datagram）。</p><ul><li><p>虚电路</p><p>采用虚电路方式，源节点要与目的结点进行通信之前，首先必须建立一条从源节点到目的节点的虚电路（逻辑连接），然后通过该虚电路进行数据传输，最后当数据传输结束时，释放该虚电路。虚电路方式为每一对节点之间之间的通信预先建立一条虚电路，后续的数据通信沿着建立好的虚电路进行，交换节点不必为每个报文进行路由选择。</p></li><li><p>数据报</p><p>采用数据报方式，交换机在传输数据过程中不必记录每条打开的虚电路，只需要一张表来指明到达所有可能的目的端交换机的输出线路。数据报方式中，每一个交换节点为每一个进入的报文进行一次路由选择，每个报文的路由选择独立于其他报文。</p></li></ul><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="电路交换">电路交换<a class="hash-link" href="#电路交换" title="标题的直接链接">​</a></h4><p>电路交换是在源和目的之间建立一条实在的物理专用链路，可以由一条实际的物理线路构成，也可以通过多路复用技术产生。电路交换支持按需连接，通信结束时就会被切断。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ppp-协议">PPP 协议<a class="hash-link" href="#ppp-协议" title="标题的直接链接">​</a></h3><p>常用的广域网协议有高级数据链路控制规程（HDLC）、点到点协议（PPP）、串行链路通信协议（SLIP）等。随着互联网的快速发展，现在全世界使用最广泛的数据链路层协议是点到点协议（Point-to-Point Protocol，PPP）。PPP 是使用串行线路通信的面向字节（B）的协议，它通过同步电路和异步电路提供路由器到路由器和主机到网络的连接，还可与包括 IP 在内的多种网络层协议协同工作，并且内置安全机制，如 PAP 和 CHAP 认证。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ppp-协议组件">PPP 协议组件<a class="hash-link" href="#ppp-协议组件" title="标题的直接链接">​</a></h4><ul><li><p>用于封装的 HDLC 协议</p><p>PPP 用于在点对点链路上封装数据报的是 HDLC 协议。许多数据链路层协议的封装方式都是基于 HDLC 的封装格式的，PPP 也不例外，它也采用了 HDLC 的定界帧格式。HDLC 是一种面向位（bit）的数据链路控制协议，提供了面向连接和无连接服务，是其他许多重要数据链路控制协议的基础。</p></li><li><p>链路控制协议</p><p>PPP 提供了链路控制协议（Link Control Protocol，LCP）。LCP 用于建立、配置和测试数据链路连接。它能用来协商 PPP 协议的一些配置参数选项，处理不同大小的数据帧，检测链路环路，终止一条链路。LCP 提供链路中对等体的身份认证，决定连接成功或者失败。</p></li><li><p>网络控制协议</p><p>PPP 包括一系列用于建立和配置各种网络层协议的网络控制协议（Network Control Protocol，NCP）。PPP 的网络层交由各自的网络层协议管理。PPP 支持同时使用多种网络层协议。</p></li></ul><p>PPP 协议主要包括以上三部分，PPP 执行的大部分工作是由 LCP 和 NCP 在数据链路层和网络层完成的。LCP 负责建立 PPP 连接、设置其参数，以及终止 PPP 连接；而 NCP 负责配置上层协议。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>对于局域网内的通信，只需要用到 MAC 寻址即可确定目标主机；而对于广域网通信不仅要用到 MAC 寻址，还需要用到 IP 地址进行标识，才能在全局唯一的确定目标主机。因为，MAC 地址实际上只在局域网内有效，虽然不同的设备 MAC 地址是唯一的，但由于每经过一个路由网段，数据包的源和目的 MAC 地址都要更改（源和目的 IP 地址不变），所以不同网段中存在相同的 MAC 地址也是可以的。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>协议</category>
            <category>LAN</category>
            <category>WAN</category>
        </item>
        <item>
            <title><![CDATA[网络通信关键概念]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Protocol/protocol-base</link>
            <guid>/Computer-Technology/Protocol/protocol-base</guid>
            <pubDate>Sat, 18 Jun 2016 16:17:00 GMT</pubDate>
            <description><![CDATA[计算机网络是通过通信设备与线路将地理上分散并且具有独立功能的计算机系统连接在一起，并由功能完善的软件来控制，进而实现资源共享的系统。从物理组成上来看，计算机网络包括硬件、软件和协议三大部分。计算机网络中结点间相互通信是由控制信息传送的网络协议及其他相应的网络软件共同实现的。在计算机网络通信中，有部分关键性概念需要理解透彻，在此做一总结。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-06-18 16:17:00 </em></p></blockquote><p>计算机网络是通过通信设备与线路将地理上分散并且具有独立功能的计算机系统连接在一起，并由功能完善的软件来控制，进而实现资源共享的系统。从物理组成上来看，计算机网络包括硬件、软件和协议三大部分。计算机网络中结点间相互通信是由控制信息传送的网络协议及其他相应的网络软件共同实现的。在计算机网络通信中，有部分关键性概念需要理解透彻，在此做一总结。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="网络通信协议">网络通信协议<a class="hash-link" href="#网络通信协议" title="标题的直接链接">​</a></h2><p><strong>网络通信协议简称网络协议（Poctocol），是指为了能在计算机网络中进行数据交换，实现资源共享而建立的通信规则、标准或约定的集合。</strong>在计算机网络中，只有采用相同网络协议的计算机才能进行信息的交流与沟通。网络协议有以下三个基本要素：</p><ul><li><p>语义（Semantics）</p><p>规定双方完成通信需要的控制信息及应执行的动作。</p></li><li><p>语法（Syntax）</p><p>规定通信双方交换的数据或控制信息的格式和结构。</p></li><li><p>时序（Timing）</p><p>规定通信双方彼此的应答关系，包括速度的匹配和顺序。</p></li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="点-点传输--端-端传输">点-点传输 &amp; 端-端传输<a class="hash-link" href="#点-点传输--端-端传输" title="标题的直接链接">​</a></h2><p>在网络通信过程中，定义了两种数据传输方式：<strong>点到点传输</strong>和<strong>端到端传输</strong>。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="点-点传输">点-点传输<a class="hash-link" href="#点-点传输" title="标题的直接链接">​</a></h3><p><strong>点到点（Point-To-Point，PTP）传输方式对应于物理拓扑，是一种更注重过程的传输方式。</strong>点到点传输不需要建立连接，在网络中的两个直接相连相邻节点之间的数据传输方式就是点到点传输，即相邻设备之间不存在其他设备。在 OSI 体系结构中，底三层通信子网（物理层、链路层、网络层）采用的就是点到点传输方式。</p><ul><li><p>优点</p><p>发送端设备送出数据后，它的任务已经完成，不需要参与整个传输过程，这样不会浪费发送端设备的资源。另外，即使接收端设备关机或故障，点到点传输也可以采用存储转发技术进行缓冲。</p></li><li><p>缺点</p><p>发送端发出数据后，不知道接收端能否收到或何时能收到数据。</p></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="端-端传输">端-端传输<a class="hash-link" href="#端-端传输" title="标题的直接链接">​</a></h3><p><strong>端到端（End-To-End，ETE）传输方式对应于逻辑拓扑，是一种更注重结果的传输方式。</strong>
端到端传输是依赖于网络连接的，网络要通信必须建立连接，无论（源和目的）之间经过多少个网络节点，只要建立连接就属于端到端传输，即这种连接是一种逻辑链路。在 OSI 体系结构中，高四层（传输层、会话层、表示层、应用层）采用的就是端到端传输方式。</p><ul><li><p>优点</p><p>逻辑链路建立后，发送端知道接收设备一定能收到，而且经过中间交换设备时不需要进行存储转发，因此传输延迟小。</p></li><li><p>缺点</p><p>直到接收端收到数据为止，发送端的设备一直要参与传输。如果整个传输的延迟很长，那么对发送端的设备造成很大的浪费；而且如果接收设备关机或故障，那么端到端传输不可能实现。</p></li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="面向连接协议--无连接协议">面向连接协议 &amp; 无连接协议<a class="hash-link" href="#面向连接协议--无连接协议" title="标题的直接链接">​</a></h2><p>网络通信协议可分为两种类型：<strong>面向连接协议</strong>和<strong>无连接协议</strong>。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="面向连接协议">面向连接协议<a class="hash-link" href="#面向连接协议" title="标题的直接链接">​</a></h3><p><strong>采用面向连接协议（Connection-oriented Protocol）进行通信时，发送端与接收端必须要建立连接，即两个端点之间建立数据通信信道（虚电路）。</strong>面向连接的方式通常提供的是可靠的传输服务，它能保证数据一定能够传送到目的地，而且数据内容不发生变化。 TCP 协议就是一种面向连接的协议，它提供了面向连接、可靠的字节流服务。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="无连接协议">无连接协议<a class="hash-link" href="#无连接协议" title="标题的直接链接">​</a></h3><p><strong>采用无连接协议（Connectionless Protocol）进行通信时，发送端与接收端不需要建立连接，只需要知道接收端地址即可。</strong>无连接的方式通常提供的是不可靠的传输服务，它不能保证数据一定能够到达目的地，但它可以检验出到达目的地的数据是否完整；另一方面，由于不需要建立连接，这种方式更快一些。IP、UDP 协议就是无连接的协议，它们也是数据报协议，不是通过字节流而是分组的数据报进行数据传输。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="电路交换--报文交换--分组交换">电路交换 &amp; 报文交换 &amp; 分组交换<a class="hash-link" href="#电路交换--报文交换--分组交换" title="标题的直接链接">​</a></h2><p>网络数据交换技术主要有三种：<strong>电路交换</strong>、<strong>报文交换</strong>、<strong>分组交换</strong>。现在主要使用电路交换和分组交换技术。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="电路交换">电路交换<a class="hash-link" href="#电路交换" title="标题的直接链接">​</a></h3><p><strong>电路交换（Circuit Switching，也称线路交换）是一种面向连接的服务，即两台计算机通过通信子网进行数据交换之前，首先要在通信子网中建立一条实际的、专用的（独占的）物理线路连接。</strong>最典型的例子就是电话通信系统。</p><ul><li><p>优点</p><p>通信线路为通信双方专用，数据直达，所以传输数据的时延非常小；通信双方之间的物理通路一旦建立，双方可以随时通信，实时性强；双方通信时按发送顺序传送数据，不存在失序问题；电路交换既适用于传输模拟信号，也适用于传输数字信号；电路交换的交换设备（交换机等）及控制均较简单。</p></li><li><p>缺点</p><p>平均连接建立时间对计算机通信来说显得较长；电路交换连接建立后，物理通路被通信双方独占，即使通信线路空闲，也不能供其他用户使用，因而信道利用率低；电路交换时，数据直达，不同类型、不同规格、不同速率的终端很难相互进行通信，也难以在通信过程中进行差错控制。</p></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="报文交换">报文交换<a class="hash-link" href="#报文交换" title="标题的直接链接">​</a></h3><p><strong>报文交换（Message Switching）采用存储-转发技术进行数据传输。</strong>首先将一个完整的报文传送给交换机的缓冲区，待下一个节点的交换机空闲时将报文转发给它，一级一级的最终送到目的主机。电子邮件系统（E-mail）适合采用报文交换方式。</p><ul><li><p>优点</p><p>报文交换不需要为通信双方预先建立一条专用的通信线路，不存在连接建立时延，用户可随时发送报文；采用存储-转发技术，可通过不同的逻辑链路将数据送达目的主机，提高了可靠性；而且可实现不同类型、不同规格、不同速率的终端之间相互通信；提供多目标服务，即一个报文可以同时发送到多个目的地址；允许建立数据传输的优先级，使优先级高的报文优先转换。</p></li><li><p>缺点</p><p>由于数据进入交换结点后要经历存储、转发这一过程，从而引起转发时延，同时也造成服务实时性差；报文交换只适用于数字信号；每个网络节点需要一定容量的缓冲区，成本高。</p></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="分组交换">分组交换<a class="hash-link" href="#分组交换" title="标题的直接链接">​</a></h3><p><strong>分组交换（Packet Switching，也称包交换）仍采用存储-转发传输方式，但将一个长报文先分割为若干个较短的分组，然后把这些分组逐个地发送出去。</strong>分组交换原理与报文交换类似，是目前应用最广的交换技术，它结合了电路交换和报文交换两者的优点，使其性能达到最优。分组交换的实现方式又分为两种：<strong>数据报分组交换</strong>和<strong>虚电路分组交换</strong>。</p><ul><li><p>数据报（Datagram）分组交换</p><p>通信前不需要建立逻辑连接，数据包可通过不同的逻辑链路送达目的主机，而且不同数据包到达顺序是无序的，属于无连接的工作方式。</p></li><li><p>虚电路（Virtual Circuit）分组交</p><p>通信前需要建立一条逻辑连接，数据包通过一条相同的逻辑链路，保证了数据传输的顺序，提供了可靠的服务，属于面向连接的工作方式。</p></li></ul><p>除过报文交换的优缺点外，分组交换在此基础上的优缺点为以下部分。</p><ul><li><p>优点</p><p>加速了数据在网络中的传输；简化了存储管理；减少了出错几率和重发数据量。</p></li><li><p>缺点</p><p>每个分组都要添加源、目的地址和分组编号等，开销大；采用数据报分组交换服务时，可能出现失序、丢失或重新分组。</p></li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>协议</category>
            <category>关键概念</category>
        </item>
        <item>
            <title><![CDATA[OSI 与 TCP/IP 参考模型]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Protocol/protocol-osi</link>
            <guid>/Computer-Technology/Protocol/protocol-osi</guid>
            <pubDate>Fri, 17 Jun 2016 17:39:00 GMT</pubDate>
            <description><![CDATA[目前流行的两大网络体系结构是 OSI/RM 和 TCP/IP 参考模型，他们均是分层结构。分层是为了简化问题，降低网络设计复杂性，而且各层次结构相互独立，实现的功能也相对独立。层与层之间只在层间接口处关联，层间耦合最小。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-06-17 17:39:00 </em></p></blockquote><p>目前流行的两大网络体系结构是 OSI/RM 和 TCP/IP 参考模型，他们均是分层结构。分层是为了简化问题，降低网络设计复杂性，而且各层次结构相互独立，实现的功能也相对独立。层与层之间只在层间接口处关联，层间耦合最小。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="osiopen-system-interconnect">OSI（Open System Interconnect）<a class="hash-link" href="#osiopen-system-interconnect" title="标题的直接链接">​</a></h2><p>OSI/RM（Open System Interconnection Reference Module，简称 OSI）即开放系统互联参考模型。为了解决不同网络体系结构的互联、互操作问题，ISO（国际标准化组织）制定了 OSI 模型。OSI 模型把网络通信的工作分为七层，自上而下依次为：</p><ul><li>应用层（Application）</li><li>表示层（Presentation）</li><li>会话层（Session）</li><li>传输层（Transport）</li><li>网络层（Network）</li><li>链路层（Data Link）</li><li>物理层（Physical）</li></ul><p>第 1-3 层（物理层、链路层、网络层）属于 OSI 参考模型的底层，负责创建网络通信连接的链路，通常称为 <strong>通信子网</strong>；第 5-7 层（会话层、表示层、应用层）是 OSI 参考模型的高层，具体负责端到端的数据通信、加密/解密、会话控制等，通常称为 <strong>资源子网</strong>；第 4 层（传输层）是 OSI 参考模型的高层与底层之间的连接层，起着承上启下的作用，是 OSI 参考模型中第一个端到端的层次。</p><p>OSI 参考模型中的每一层都能完成一定的功能，直接为上层提供服务，并且所有层次都相互支持，网络通信可以自上而下（发送端）或自下而上（接收端）双向进行。而且每一层的内部结构对上、下层屏蔽不可见，上层依赖于下层所提供的服务，仅通过层间接口进行数据传输，实现层间耦合最小。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="通信机制">通信机制<a class="hash-link" href="#通信机制" title="标题的直接链接">​</a></h3><p><strong>OSI 参考模型采用逐层传递、对等通信的通信机制。</strong>整个通信过程都必须经过一个自上而下（发送端），或自下而上（接收端）的数据传输过程，但通信必须在双方对等层进行。网络中的节点之间要相互通信，必须经过一层一层的信息转换来实现，即源主机向目标主机发送数据，数据必须自上而下逐层封装（数据打包），目标主机接收数据后，必须对封装的数据进行自下而上逐层分解（解封）。对于用户来说，这种数据通信看起来就像是在两台计算机相关联的对等层之间直接进行的，而对同一主机内的相邻层之间的通信是透明的，两台主机的通信就像在通信的双方对应层之间建立了一种逻辑的、虚拟的通信。实际上，真正的通信只发生在同一主机内彼此相邻的两层之间。</p><p>OSI 参考模型中，在网络各层的实体之间传送的比特组称为数据单元（Data Unit）。<strong>常用的数据单元有服务数据单元（SDU）和协议数据单元（PDU）。</strong> SDU 是在同一主机上的两层之间传送的信息，而 PDU 则是发送主机上每层发送到接受主机上的相应层（对等层）的信息。</p><p><strong>OSI 参考模型中第 1-3 层（物理层、链路层、网络层）采用的是点到点传输，而剩下的第 4-7 层（传输层、会话层、表示层、应用层）则采用端到端传输。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="物理层physical-layer">物理层（Physical Layer）<a class="hash-link" href="#物理层physical-layer" title="标题的直接链接">​</a></h3><p>物理层规定了通信设备的机械特性、电气特性、功能特性和规程特性，用于建立、维护、拆除物理链路的连接。<strong>物理层传输的数据单元是比特（bit）</strong>。物理层定义的典型规范有 EIA/TIA RS-232、EIA/TIA RS-449、V.35、RJ-45 等。物理层的典型设备有光纤、同轴电缆、双绞线、中继器、集线器和网卡等。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="数据链路层data-link-layer">数据链路层（Data Link Layer）<a class="hash-link" href="#数据链路层data-link-layer" title="标题的直接链接">​</a></h3><p>数据链路层是在物理层提供比特流服务的基础上，建立相邻结点之间的数据链路（逻辑的），通过差错控制提供数据帧在信道上无差错的传输。<strong>数据链路层传输的数据单元是帧（Frame）。</strong>数据链路层协议主要有 SDLC、HDLC、PPP、STP、帧中继等。数据链路层的典型设备有二层交换机、网桥、网卡等。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="网络层network-layer">网络层（Network Layer）<a class="hash-link" href="#网络层network-layer" title="标题的直接链接">​</a></h3><p>网络层的任务就是选择合适的网间路由和交换结点，确保数据及时传送到目的地。网络层还可以实现拥塞控制、网际互联等功能。<strong>网络层传输的数据单元是数据分组（Packet）。</strong>网络层协议主要有 IP、IPX、ICMP、IGMP、RIP、OSPF 等。网络层的典型设备就是路由器。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="传输层transport-layer">传输层（Transport Layer）<a class="hash-link" href="#传输层transport-layer" title="标题的直接链接">​</a></h3><p>传输层居中，是承上启下层，该层负责获取全部信息，为上层提供端到端的透明的、可靠的数据传输服务。<strong>传输层传输的数据单元是报文（Message）或数据包（Packets），具体也可称为数据段（TCP 协议）或数据报（UDP 协议）。</strong>传输层协议主要有 TCP、UDP、SPX 等。传输层及以上高层次的典型设备就是各种终端设备（PC、平板、手机等）。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="会话层session-layer">会话层（Session Layer）<a class="hash-link" href="#会话层session-layer" title="标题的直接链接">​</a></h3><p>会话层不参与具体的传输，它提供包括访问验证和会话管理在内的建立、维护应用进程之间通信的机制，如服务器验证用户登录等。<strong>会话层及以上的高层次中，数据传送的单元不再另外命名，统称为某层报文。</strong>会话层没有具体的协议。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="表示层presentation-layer">表示层（Presentation Layer）<a class="hash-link" href="#表示层presentation-layer" title="标题的直接链接">​</a></h3><p>表示层主要解决用户信息的语法表示、加密/解密、压缩/解压等问题。它将欲交换的数据从适合某一用户的抽象语法，转换为适合 OSI 系统内部使用的传送语法，即提供格式化的表示和转换数据服务。表示层也没有具体的协议。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="应用层application-layer">应用层（Application Layer）<a class="hash-link" href="#应用层application-layer" title="标题的直接链接">​</a></h3><p>应用层是 OSI 参考模型的最高层，它是服务用户，惟一直接为用户应用进程访问 OSI 环境提供手段和服务的层次，应用层以下各层通过应用层间接地向应用进程提供服务。应用层协议主要有 DNS、Telnet、FTP、HTTP、SMTP、SNMP 等。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="tcpiptransmission-control-protocolinternet-protocol">TCP/IP（Transmission Control Protocol/Internet Protocol）<a class="hash-link" href="#tcpiptransmission-control-protocolinternet-protocol" title="标题的直接链接">​</a></h2><p>TCP/IP（Transmission Control Protocol/Internet Protocol Reference Module，简称 TCP/IP）参考模型就是 TCP/IP 协议栈（协议簇），其中核心协议是 TCP 和 IP。它分为 4 层，与 OSI 参考模型中的分层类似，但并非完全一致。它的四层结构自上而下依次为：</p><ul><li>应用层（对应 OSI 中：应用层+表示层+会话层）</li><li>传输层（对应 OSI 中：传输层）</li><li>网际互联层（对应 OSI 中：网络层）</li><li>网络接口层（对应 OSI 中：链路层+物理层）</li></ul><p><strong>TCP/IP 协议栈与 OSI 参考模型一样采用逐层传递、对等通信的通信机制。</strong>在发送端主机自上而下进行数据的封装，发送到接收端后，接收端主机自下而上进行数据的分用（解封），实现对等层通信。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="网络接口层network-interface-layer">网络接口层（Network Interface Layer）<a class="hash-link" href="#网络接口层network-interface-layer" title="标题的直接链接">​</a></h3><p>网络接口层又称为网络访问层（Network Access Layer），包括 OSI 参考模型中的物理层和链路层，负责向网络物理介质发送数据包，从网络物理介质接受数据包。<strong>实际上，TCP/IP 并没有对物理层和链路层进行定义，只是定义了一个接口，并且支持现有的各种底层网络技术和标准。</strong>网络接口层涉及操作系统中的设备驱动程序和网络接口设备。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="网际互联层interconnection-layer">网际互联层（Interconnection Layer）<a class="hash-link" href="#网际互联层interconnection-layer" title="标题的直接链接">​</a></h3><p>网际互联层又称为 IP 层，是 TCP/IP 模型中最主要的层次，是整个体系结构的关键部分，负责处理 IP 数据包的传输、路由选择、流量控制和拥塞控制。网际互联层主要协议有网际协议 IP、地址解析协议 ARP、反向地址解析协议 RARP、Internet 控制报文协议 ICMP、组管理协议 IGMP、内部网关协议 IGP、外部网关协议 EGP 等。<strong>网际协议 IP 是 TCP/IP 协议栈中的核心协议。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="传输层transport-layer-1">传输层（Transport Layer）<a class="hash-link" href="#传输层transport-layer-1" title="标题的直接链接">​</a></h3><p><strong>传输层为两台主机上的应用程序提供端到端的通信，该层主要定义了两个端到端的协议：传输控制协议 TCP 和用户数据报协议 UDP。</strong>这两种协议对应不同的性质的服务，TCP 为主机提供可靠的面向连接的传输服务；UDP 为应用层提高简单高效的无连接传输服务。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="应用层application-layer-1">应用层（Application Layer）<a class="hash-link" href="#应用层application-layer-1" title="标题的直接链接">​</a></h3><p>应用层包括 OSI 参考模型中的会话层、表示层、应用层，直接为特定的应用提供服务。TCP/IP 协议栈给出了应用层的一些常用协议规范，如文件传输协议 FTP、简单邮件传输协议 SMTP、超文本传输协议 HTTP 等。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="osi-与-tcpip-模型比较">OSI 与 TCP/IP 模型比较<a class="hash-link" href="#osi-与-tcpip-模型比较" title="标题的直接链接">​</a></h2><ul><li>OSI 模型是一个概念模型，并没有提供一个可供实现的方法；而 TCP/IP 模型是已经被广泛实现的事实标准。OSI 参考模型制定时 TCP/IP 协议已经实现，随后为了实现网络通信标准化通过借鉴 OSI 参考模型制定了 TCP/IP 参考模型。</li><li>两种体系结构均能提供面向连接（TCP）和无连接（UDP）两种通信服务机制。</li><li>TCP/IP 参考模型的网络接口层并不是真正的一层，它没有像 OSI 模型一样定义物理层和链路层，只是定义了一个接口。</li><li>OSI 参考模型的抽象能力高，降低了各层之间耦合度，适合于描述各种网络；而 TCP/IP 是先有了协议，才制定 TCP/IP 模型的，并且各层之间耦合度相对来说比较高。</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>协议</category>
            <category>OSI</category>
            <category>TCP/IP</category>
        </item>
        <item>
            <title><![CDATA[Web 本地存储]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/web-local-storage</link>
            <guid>/Computer-Technology/Web/web-local-storage</guid>
            <pubDate>Wed, 01 Jun 2016 01:00:00 GMT</pubDate>
            <description><![CDATA[为了达到某些需求，我们通常需要在本地存储一些数据，方便我们进行用户个性化定制服务。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2018-05-27 17:27:00 </em></p></blockquote><p>为了达到某些需求，我们通常需要在本地存储一些数据，方便我们进行用户个性化定制服务。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="web-存储">Web 存储<a class="hash-link" href="#web-存储" title="标题的直接链接">​</a></h2><p>在互联网上，许多网站提供用户注册功能，因为 http 协议是个无状态的协议（无法记录客户端与服务器端状态），所以我们注册登录后每一次跳转网页都需要重新登陆。为了增强用户体验，我们不得不将状态信息保存下来，而 Web 存储技术则实现了该需求。Cookie 最多可在本地存储 4K 数据，出于安全性考虑， Cookie 中并非直接存储的是用户敏感数据（帐号、密码、个人信息等），而是一个状态 ID，该 ID 是服务器端利用 session 存储一个会话状态并分配给客户端用来进行状态识别的。因此，每一次的 http 请求都会带上 Cookie 数据发送给服务器端进行状态识别，从而达到状态保持的目的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="html5-web-本地存储">HTML5 Web 本地存储<a class="hash-link" href="#html5-web-本地存储" title="标题的直接链接">​</a></h2><p>在以前，我们是通过 <code>Cookie</code> 来实现 Web 本地存储的。不过，HTML5 为我们带来了新的 Web 本地存储功能，即 <code>localStorage</code> 与 <code>sessionStorage</code>，下面我们来简单的分析一下它们各自的特点。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cookie">Cookie<a class="hash-link" href="#cookie" title="标题的直接链接">​</a></h3><p>Cookie 相对来说用的时间很长了，技术更加成熟，尤其是这么多年以来在 Web 安全方面也有了很大的进步，在敏感信息存储方面 Cookie 的优势是明显的。而且，Cookie 在同源窗口中是共享的，同时也可以限制在某个路径下；它的有效期也是可以设置的，没有到达有效期前即使关闭浏览器窗口依然是有效的。</p><p>相反的，Cookie 的缺点也是明显的，最多只能存储约 4K 大小的数据；而且每次都会伴随同源 http 请求发送给服务器端，很浪费带宽。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="localstorage">localStorage<a class="hash-link" href="#localstorage" title="标题的直接链接">​</a></h3><p>localStorage 存储的数据量要大得多，大约 5M 左右；它在同源窗口中也是共享的。而且，localStorage 存储数据的时间甚至长达数年（不主动删除，即使浏览器关闭也存在），所以说在开发过程中我们可以使用它来存储更多的数据，并更持久的存储。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="sessionstorage">sessionStorage<a class="hash-link" href="#sessionstorage" title="标题的直接链接">​</a></h3><p>sessionStorage 存储的数据量也要大得多，但它是不能在同源窗口中共享的，也就是说它只允许在同窗口同页面中访问。而且，sessionStorage 存储的数据会在浏览器窗口关闭的时候自动删除，不能实现持久的保存数据。</p><p><strong>注意：<code>sessionStorage</code> 在不同的标签页之间无法共享。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>就目前来看，HTML5 提供的新的 Web 本地存储方法适合存储一些非敏感数据，对于用户敏感的数据还是依靠 Cookie 来存储更安全一些。而 Web 本地存储是没有绝对安全的，依然面临很严峻的考验。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>Cookie</category>
            <category>LocalStorage</category>
            <category>SessionStorage</category>
        </item>
        <item>
            <title><![CDATA[Linux-基础]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Linux/linux-base</link>
            <guid>/Computer-Technology/Linux/linux-base</guid>
            <pubDate>Sun, 29 May 2016 15:34:00 GMT</pubDate>
            <description><![CDATA[Linux 是在做一些较为底层的开发工作时的必要开发环境，了解 Linux 也对操作系统概念的理解有很大的帮助，这篇文章是对 Linux 的一些基础概念的阐述。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2018-10-13 14:11:00 </em></p></blockquote><p>Linux 是在做一些较为底层的开发工作时的必要开发环境，了解 Linux 也对操作系统概念的理解有很大的帮助，这篇文章是对 Linux 的一些基础概念的阐述。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="linux">Linux<a class="hash-link" href="#linux" title="标题的直接链接">​</a></h2><p>Linux 的诞生是在上世纪 90 年代，距离现在也就二十年左右，是一种优秀的开发环境，大多时候应用在嵌入式系统开发当中。<strong>Linux 是一个开源的基于 POSIX 和 UNIX，支持多用户、多任务、多线程和多 CPU 的操作系统。事实上，linux 指的是其操作系统的内核。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="特点">特点<a class="hash-link" href="#特点" title="标题的直接链接">​</a></h3><p>下面是一些 Linux 系统的一些特点。</p><ul><li><p>开源</p><p>Linux 操作系统的源代码是公开的，遵循 GPL 协议（开源协议），所以 Linux 允许任何人去查看它的源代码，并进行修改。这对于开发人员来说相当于提供了一个了解操作系统原理的绝佳机会。</p></li><li><p>免费</p><p>Linux 操作系统的使用是免费的，但需要遵循 GPL 协议。很多人认为开源即免费，这其实是个概念上的错误。有很多的商业项目是开源的，开源即允许个人用户去查看源代码，了解其实现过程，但并不意味着你可以将其免费用作商业用途。但是，Linux 不仅是开源的，还是免费的。还需要注意的一点就是，Linux 有不同的发行版本，部分都有商业公司支持，这样的 Linux 用作商业用途的话需要购买其许可证，之后会得到更好的技术服务支持。</p></li><li><p>兼容 POSIX 标准</p><p>POSIX 是一种可移植操作系统接口标准，POSIX 标准定义了操作系统应该为应用程序提供的接口标准，是 IEEE 为要在各种 UNIX 操作系统上运行的软件而定义的一系列 API 标准的总称，其正式称呼为 IEEE 1003，而国际标准名称为 ISO/IEC 9945。这样的好处就是，在 Linux 环境下，我们可以通过相应的模拟器运行常见的 DOS、Windows 的程序。</p></li><li><p>多用户、多任务</p><p>与微软 Windows 系统一样，Linux 也支持多用户、多任务、多线程、多 CPU，这是现代操作系统所必须具备的能力。</p></li><li><p>基于命令行</p><p>Linux 操作系统准确的说是一个基于命令行的系统，它并没有实现 GUI（图形用户界面），这就是和微软 Windows 的不同之处，这也使得 Linux 根本不可能面向社会上的大众用户。</p></li><li><p>可移植性</p><p>Linux 可运行在不同的 CPU 平台上，可移植性很强，所以 Linux 在嵌入式系统开发当中应用广泛。</p></li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="linux-的组成">Linux 的组成<a class="hash-link" href="#linux-的组成" title="标题的直接链接">​</a></h2><p>首先，Linux 可划分为以下四部分：</p><ul><li>Linux 内核</li><li>GNU 工具</li><li>图形化桌面环境</li><li>应用软件</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="linux-内核">Linux 内核<a class="hash-link" href="#linux-内核" title="标题的直接链接">​</a></h3><p><strong>Linux 系统的核心是内核。</strong>内核控制着计算机系统上所有的硬件和软件，在必要时分配硬件，并根据需要执行软件。</p><p>内核主要负责以下四种功能：</p><ul><li>系统内存管理</li><li>软件程序管理</li><li>硬件设备管理</li><li>文件系统管理</li></ul><p><strong>Linux 操作系统对于用户空间和内核空间有严格的区分，他们之间有明显的界限。</strong>用户空间主要包含 GNU C 库（glibc）和用户应用程序（User Applications）等；内核空间则包含系统调用接口（System Call Interface，SCI）、内核（Kernel）、板级支持包（Board Support Package，BSP）三层。</p><p>Windows 系统的内核是 NT，它是一种微内核，只提供操作系统必要的功能，例如进程管理，内存管理等等，微内核可以更方便的进行升级，扩展；而<strong> Linux 操作系统的内核是 linux，它是一种宏内核</strong>，不仅在内核中实现了操作系统必要的服务，而且硬件设备驱动也存在于内核中，内核效率相对于微内核来说较高，对硬件设备支持也更全面。所有不同发行版本的 Linux 操作系统都是使用的统一标准的 linux 内核，版本号由 Linux 社区所控制。</p><p>linux 内核主要包含以下几部分子系统：</p><ul><li><p>系统调用接口（System Call Interface，SCI）</p><p>系统调用接口主要实现从用户空间到内核的函数调用，是一个非常有用的函数调用多路复用和多路分解服务。</p></li><li><p>进程管理（Process Management，PM）</p><p>进程管理主要完成进程调度，管理进程共享内存空间等。</p></li><li><p>内存管理（Memory Management，MM）</p><p>内存管理主要完成对系统内存资源的管理，以及实现虚拟内存和硬盘资源交换。</p></li><li><p>虚拟文件系统（Virtual File System，VFS）</p><p>虚拟文件系统是为文件系统提供的通用的借口抽象，为 SCI 和内核与文件系统之间提供了一个交换层。</p></li><li><p>网络堆栈（Network Stack）</p><p>网络堆栈提供了大量的网络协议的用户接口，例如 IP、TCP 协议。</p></li><li><p>设备驱动（Device Drivers，DD）</p><p>包含了硬件设备驱动，并且占用了内核大量的资源。</p></li><li><p>依赖体系结构的代码（Arch）</p><p>包含 linux 内核支持的硬件体系结构相关的核心代码。</p></li></ul><p>linux 内核还是一个动态内核，支持动态添加或删除软件组件，可以在任何时候根据需要将特定模块进行插入，即实现用户定制功能。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="文件设备系统">文件（设备）系统<a class="hash-link" href="#文件设备系统" title="标题的直接链接">​</a></h4><p>Linux 操作系统支持非常多的文件系统类型，例如 ext、ext2、ext3、ext4、iso9660、xfs、ntfs、proc 等等。而且，<strong>Linux 中的一切设备都抽象成为了文件，用户通过设备文件（设备节点）来使用设备驱动操作设备。</strong>Linux 系统中将设备分为三类：</p><ul><li><p>字符设备</p><p>指那些必须以串行顺序依次进行访问的设备，如触摸屏、磁带驱动器、鼠标等，用字节流存取文件，没有缓冲区。</p></li><li><p>块设备</p><p>块设备可以从设备的任意位置读取一定长度数据的设备，包括硬盘、磁盘、U 盘、SD 卡等,有缓冲区。</p></li><li><p>网络设备</p><p>网络设备不同于前两者，不能直接对文件进行操作，不能直接访问网络设备驱动，在 Linux 中通过设备接口和 Socket（套接字）技术（协议）来进行网络设备（进程）之间的通信，从而访问网络设备驱动，实现对网络设备的操作。</p></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="gnu-工具">GNU 工具<a class="hash-link" href="#gnu-工具" title="标题的直接链接">​</a></h3><p>除了由内核控制硬件设备外，操作系统还需要工具来执行一些标准功能，比如控制文件和程序。Linus 在创建 Linux 系统内核时，并没有可用的系统工具。</p><p>GNU 组织（GNU 是 GNU’s Not Unix 的缩写）开发了一套完整的 Unix 工具，但没有可以运行它们的内核系统。这些工具是在名为开源软件（open source software，OSS）的软件理念下开发的。</p><p><strong>将 Linus 的 Linux 内核和 GNU 操作系统工具整合起来，就产生了一款完整的、功能丰富的免费操作系统。</strong>因此，Linux 操作系统又称 GNU/Linux 系统。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="核心-gnu-工具">核心 GNU 工具<a class="hash-link" href="#核心-gnu-工具" title="标题的直接链接">​</a></h4><p>GNU 项目的主旨在于为 Unix 系统管理员设计出一套类似于 Unix 的环境。这个目标促使该项目移植了很多常见的 Unix 系统命令行工具。供 Linux 系统使用的这组核心工具被称为 coreutils（core utilities）软件包。</p><p>GNU coreutils 软件包由三部分构成：</p><ul><li>用以处理文件的工具</li><li>用以操作文本的工具</li><li>用以管理进程的工具</li></ul><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shell">shell<a class="hash-link" href="#shell" title="标题的直接链接">​</a></h4><p>GNU/Linux shell 是一种特殊的交互式工具。它为用户提供了启动程序、管理文件系统中的文件以及运行在 Linux 系统上的进程的途径。shell 的核心是命令行提示符。命令行提示符是 shell 负责交互的部分。它允许你输入文本命令，然后解释命令，并在内核中执行。</p><p>shell 包含了一组内部命令，用这些命令可以完成诸如复制文件、移动文件、重命名文件、显示和终止系统中正运行的程序等操作。shell 也允许你在命令行提示符中输入程序的名称，它会将程序名传递给内核以启动它。</p><p>你也可以将多个 shell 命令放入文件中作为程序执行。这些文件被称作 shell 脚本。你在命令行上执行的任何命令都可放进一个 shell 脚本中作为一组命令执行。</p><p>在 Linux 系统上，通常有好几种 Linux shell 可用。不同的 shell 有不同的特性，有些更利于创建脚本，有些则更利于管理进程。所有 Linux 发行版默认的 shell 都是 bash shell。bash shell 由 GNU 项目开发，被当作标准 Unix shell——Bourne shell（以创建者的名字命名）的替代品。bash shell 的名
称就是针对 Bourne shell 的拼写所玩的一个文字游戏，称为 Bourne again shell。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="linux-桌面环境">Linux 桌面环境<a class="hash-link" href="#linux-桌面环境" title="标题的直接链接">​</a></h3><p>在 Linux 的早期（20 世纪 90 年代初期），能用的只有一个简单的 Linux 操作系统文本界面。这个文本界面允许系统管理员运行程序，控制程序的执行，以及在系统中移动文件。</p><p>随着 Microsoft Windows 的普及，电脑用户已经不再满足于对着老式的文本界面工作了。这推动了 OSS（open source software）社区的更多开发活动，Linux 图形化桌面环境应运而生。Linux 有各种图形化桌面可供选择。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="x-window-系统">X Window 系统<a class="hash-link" href="#x-window-系统" title="标题的直接链接">​</a></h4><p>X Window 软件是直接和 PC 上的显卡及显示器打交道的底层程序。它控制着 Linux 程序如何在电脑上显示出漂亮的窗口和图形。Linux 并非唯一使用 X Window 的操作系统，它有针对不同操作系统的版本。</p><p>核心的 X Window 软件可以产生图形化显示环境，但仅此而已。虽然对于运行独立应用这已经足够，但在日常 PC 使用中却并不是那么有用。它没有桌面环境供用户操作文件或是开启程序。为此，你需要一个建立在 X Window 系统软件之上的桌面环境。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="kde-桌面">KDE 桌面<a class="hash-link" href="#kde-桌面" title="标题的直接链接">​</a></h4><p>KDE（K Desktop Environment，K 桌面环境）最初于 1996 年作为开源项目发布。它会生成一个类似于 Microsoft Windows 的图形化桌面环境。</p><p>KDE 桌面允许你把应用程序图标和文件图标放置在桌面的特定位置上。单击应用程序图标，Linux 系统就会运行该应用程序。单击文件图标，KDE 桌面就会确定使用哪种应用程序来处理该文件。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="gnome-桌面">GNOME 桌面<a class="hash-link" href="#gnome-桌面" title="标题的直接链接">​</a></h4><p>GNOME（the GNU Network Object Model Environment，GNU 网络对象模型环境）是另一个流行的 Linux 桌面环境。GNOME 于 1999 年首次发布，现已成为许多 Linux 发行版默认的桌面环境（不过用得最多的是 Red Hat Linux）。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unity-桌面">Unity 桌面<a class="hash-link" href="#unity-桌面" title="标题的直接链接">​</a></h4><p>这是 Ubuntu 的公司自己开发的一套叫作 Unity 的 Linux 桌面环境。Unity 桌面得名于该项目的目标——为工作站、平板电脑以及移动设备提供一致的桌面体验。
不管你是在工作站还是在手机上使用 Ubuntu，Unity 桌面的使用方式都是一样的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="bootloader-是什么">Bootloader 是什么<a class="hash-link" href="#bootloader-是什么" title="标题的直接链接">​</a></h2><p><strong>Bootloader 是系统的启动加载程序，用来初始化硬件设备、建立内存空间映射图，为调用内核准备好正确的环境。</strong>Bootloader 一般包括两种不同的操作模式：</p><ul><li><p>启动加载模式</p><p>此模式下，Bootloader 会将操作系统从固态存储设备上加载进内存。</p></li><li><p>下载模式</p><p>此模式下，目标机可通过串口连接或网络连接从主机下载文件，例如内核映射和根文件系统映射。</p></li></ul><p>Bootloader 的作用主要是完成系统配置、中断接管、系统引导；装载内核、根文件系统、参数传递、内核调试、内核和根文件系统的下载。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="linux-的文件系统">Linux 的文件系统<a class="hash-link" href="#linux-的文件系统" title="标题的直接链接">​</a></h2><p>Windows 下用户可以将硬盘实现分区，即 C 盘、D 盘等，文件存储的实现是多个并行树形结构；而在 <strong>Linux 下硬盘用户是不可以分区的，文件存储的实现是单个树形结构，这种目录结构称为虚拟目录（virtual directory），最顶层则是根目录<code>/</code>。</strong></p><p>在 Linux PC 上安装的第一块硬盘称为<strong>根驱动器</strong>，它包含了虚拟目录的核心，其它目录都是从这里开始构建。Linux 会在根驱动器上创建一些特别的目录，我们称之为<strong>挂载点（mount point）</strong>。挂载点是虚拟目录中用于分配额外存储设备的目录。虚拟目录会让文件和目录出现在这些挂载点目录中，然而实际上它们却存储在另外一个驱动器中。</p><p>通常系统文件会存储在根驱动器中，而用户文件则存储在另一驱动器中。</p><p>在 Linux 系统中，通用的目录名用于表示一些常见的功能，下面是一些常见的 Linux 顶层虚拟目录名及其内容：</p><ul><li><p>/bin</p><p>二进制目录，存储一些普通的系统所必需用户级 GNU 工具，是二进制可执行命令文件</p></li><li><p>/boot</p><p>启动目录，存储 Linux 操作系统的引导程序，启动加载文件等</p></li><li><p>/dev</p><p>设备目录，Linux 在这里创建设备节点，存储系统设备文件，并不是设备驱动程序，而是设备端口文件</p></li><li><p>/etc</p><p>系统配置文件目录，存储服务器配置文件，用户账号密码等</p></li><li><p>/home</p><p>用户工作主目录，Linux 在这里创建用户目录，用户的个人配置，个人环境变量等都在此存储</p></li><li><p>/lib</p><p>库目录，存放系统和应用程序动态共享库文件，类似 Windows 上的 Dll 文件</p></li><li><p>/media</p><p>媒体目录，可移动媒体设备的常用挂载点</p></li><li><p>/mnt</p><p>挂载目录，另一个可移动媒体设备的常用挂载点</p></li><li><p>/opt</p><p>可选目录，常用于存放第三方软件包和数据文件</p></li><li><p>/proc</p><p>进程目录，存放系统信息，现有硬件及当前进程的相关信息，系统运行时由内存自动生成</p></li><li><p>/root</p><p>root 用户的工作目录</p></li><li><p>/sbin</p><p>系统二进制目录，存储许多 GNU 管理员级工具，是二进制可执行命令文件</p></li><li><p>/run</p><p>运行目录，存放系统运作时的运行时数据</p></li><li><p>/srv</p><p>服务目录，存放本地服务的相关文件</p></li><li><p>/sys</p><p>系统目录，存放系统硬件信息的相关文件</p></li><li><p>/tmp</p><p>临时目录，可以在该目录中创建和删除临时工作文件</p></li><li><p>/usr</p><p>用户二进制目录，大量用户级的 GNU 工具和数据文件都存储在这里</p></li><li><p>/var</p><p>可变目录，用以存放经常变化的文件，比如日志文件</p></li></ul><p>以上就是 Linux 根目录下一些关键性目录及其存储的文件。需要注意的是：<strong>Linux 下的文件存放并不像 Windows 下那样具有随意性，很多文件需要存放在相应的目录中才行。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="应用程序安装">应用程序安装<a class="hash-link" href="#应用程序安装" title="标题的直接链接">​</a></h2><p>Linux 是一个开源的操作系统，上面使用的软件大多数为开源软件，安装应用程序的方式与 Windows 很不相同。Linux 下的应用程序安装包多为源码包，在安装前需要进行编译，然后才能进行安装；不过，也有 RPM 包，安装过程中不需要手动编译，对技术要求较低。但是，源码包适合所有发行版本的 Linux，RPM 包却没有这个优点。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="linux-发行版">Linux 发行版<a class="hash-link" href="#linux-发行版" title="标题的直接链接">​</a></h2><p>我们将完整的 Linux 系统包称为发行版。有很多不同的 Linux 发行版来满足可能存在的各种运算需求。大多数发行版是为某个特定用户群定制的，比如商业用户、多媒体爱好者、软件开发人员或者普通家庭用户。每个定制的发行版都包含了支持特定功能所需的各种软件包，比如为多媒体爱好者准备的音频和视频编辑软件，为软件开发人员准备的编译器和集成开发环境（IDE）。</p><p>不同的 Linux 发行版通常归类为 3 种：</p><ul><li>完整的核心 Linux 发行版</li><li>特定用途的发行版</li><li>LiveCD 测试发行版</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="核心-linux-发行版">核心 Linux 发行版<a class="hash-link" href="#核心-linux-发行版" title="标题的直接链接">​</a></h3><p>核心 Linux 发行版含有内核、一个或多个图形化桌面环境以及预编译好的几乎所有能见到的 Linux 应用。它提供了一站式的完整 Linux 安装。市场上比较流行的核心 Linux 发行版有以下：</p><ul><li>Slackware - 最早的 Linux 发行版中的一员，在 Linux 极客中比较流行</li><li>Red Hat - 主要用于 Internet 服务器的商业发行版</li><li>Fedora - 从 Red Hat 分离出的家用发行版</li><li>Gentoo - 为高级 Linux 用户设计的发行版，仅包含 Linux 源代码</li><li>openSUSE - 用于商用和家用的发行版</li><li>Debian - 在 Linux 专家和商用 Linux 产品中流行的发行版</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="特定用途的-linux-发行版">特定用途的 Linux 发行版<a class="hash-link" href="#特定用途的-linux-发行版" title="标题的直接链接">​</a></h3><p>除了提供特定软件外（比如仅为商业用户提供的办公应用），定制化 Linux 发行版还尝试通过自动检测和自动配置常见硬件来帮助新手安装 Linux。这使得 Linux 的安装过程轻松愉悦了许多。</p><p>市场上流行的定制化 Linux 发行版有以下：</p><ul><li>CentOS - 一款基于 Red Hat 企业版 Linux 源代码构建的免费发行版</li><li>Ubuntu - 一款用于学校和家庭的免费发行版</li><li>PCLinuxOS - 一款用于家庭和办公的免费发行版</li><li>Mint - 一款用于家庭娱乐的免费发行版</li><li>dyne:bolic - 一款用于音频和 MIDI 应用的免费发行版</li><li>Puppy Linux - 一款适用于老旧 PC 的小型免费发行版</li></ul><p>许多特定用途的 Linux 发行版都是基于 Debian Linux。它们使用和 Debian 一样的安装文件，但仅打包了完整 Debian 系统中的一小部分。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="linux-livecd">Linux LiveCD<a class="hash-link" href="#linux-livecd" title="标题的直接链接">​</a></h3><p>Linux 世界中一个相对较新的现象是可引导的 Linux CD 发行版的出现。它无需安装就可以看到 Linux 系统是什么样的。多数现代 PC 都能从 CD 启动，而不是必须从标准硬盘启动。基于这点，一些 Linux 发行版创建了含有 Linux 样本系统（称为 Linux LiveCD）的可引导 CD。</p><p>一些可用的流行 Linux LiveCD：</p><ul><li>Knoppix - 来自德国的一款 Linux 发行版，也是最早的 LiveCD Linux</li><li>PCLinuxOS - 一款成熟的 LiveCD 形式的 Linux 发行版</li><li>Ubuntu - 为多种语言设计的世界级 Linux 项目</li><li>Slax - 基于 Slackware Linux 的一款 LiveCD Linux</li><li>Puppy Linux - 为老旧 PC 设计的一款全功能 Linux</li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>这篇文章并不能涵盖 Linux 操作系统的所有概念，Linux 的可移植性很强，使得其在嵌入式系统开发中有着广泛的应用，智能手机操作系统安卓（Android）使用的就是 linux 内核。可以说，Linux 操作系统为开发者提供了一个优秀的开发环境，同时也是一个兼具稳定性和安全性的服务器环境。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《Linux 命令行与 shell 脚本编程大全》（第 3 版）- <!-- -->[美]<!-- --> Richard Blum / Christine Bresnahan 著</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>操作系统</category>
            <category>Linux</category>
        </item>
        <item>
            <title><![CDATA[DOM-加载 JavaScript]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/DOM/dom-js</link>
            <guid>/Computer-Technology/Web/DOM/dom-js</guid>
            <pubDate>Tue, 24 May 2016 22:49:00 GMT</pubDate>
            <description><![CDATA[页面的动态交互离不开 Javascript，将 js 脚本引入页面时会阻塞页面加载，在某些时候我们则可以选择异步加载 js 脚本。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-05-24 22:49:00 </em></p></blockquote><p>页面的动态交互离不开 Javascript，将 js 脚本引入页面时会阻塞页面加载，在某些时候我们则可以选择异步加载 js 脚本。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="引入-js-代码">引入 js 代码<a class="hash-link" href="#引入-js-代码" title="标题的直接链接">​</a></h2><p>通常我们会将 JavaScript 代码写在一个单独的文件中，这样做的好处是页面整洁、结构更清晰，页面更小加载速度更快，同时也易维护。实际上在页面中引入 js 代码的方法有多种，我们按需选择即可。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="外部脚本文件允许跨域">外部脚本文件（允许跨域）<a class="hash-link" href="#外部脚本文件允许跨域" title="标题的直接链接">​</a></h3><p>这种方式是最常用的，但要注意的是 <code>&lt;script&gt;</code> 标签内如果再写 js 代码会被直接忽略掉（不执行）。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script src="./js/main.js"&gt;&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="内联脚本">内联脚本<a class="hash-link" href="#内联脚本" title="标题的直接链接">​</a></h3><p>该方式会生成一个文本节点，如果我们通过节点的 <code>innerHTML</code> 和 <code>textContent</code> 属性改变其文本内容（代码），并不会执行新的代码。此种方式也较常用。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    alert(1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="事件属性">事件属性<a class="hash-link" href="#事件属性" title="标题的直接链接">​</a></h3><p>我们可以在事件属性的值中写入一个方法引用，在事件触发时则会执行该方法。这种方法不推荐使用。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div onclick="show()"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        function show() { ... }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 作用等价形式为下</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var obj = document.querySelector('div');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        obj.onclick = show;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="javascript-协议">JavaScript 协议<a class="hash-link" href="#javascript-协议" title="标题的直接链接">​</a></h3><p>我们可以在元素的属性值中使用 JavaScript 协议来执行相应代码，但这种方式是不推荐使用的。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;a href="javascript: false"&gt;Link&lt;/a&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="加载外部-js-文件">加载外部 js 文件<a class="hash-link" href="#加载外部-js-文件" title="标题的直接链接">​</a></h2><p>页面在加载过程中，默认是同步加载 js 的，如果遇到 <code>&lt;script&gt;</code> 标签则会停止页面的一切解析行为，开始（下载）执行相应的 JavaScript 代码，直至执行完毕。这会造成页面阻塞，页面的显示效果可能会因此受到影响。<strong>所以说，我们应该尽可能将不需要立即执行的 js 脚本放在 <code>&lt;body&gt;</code> 标签的尾部加载，这时候所有的页面元素已加载完毕，并不会对页面产生过多影响。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="延迟加载">延迟加载<a class="hash-link" href="#延迟加载" title="标题的直接链接">​</a></h3><p>有时候我们的 js 文件可能很大，即便是放在 <code>&lt;body&gt;</code> 尾部也加载的很慢，或者要放的更靠前一点，这样页面的显示效果会被严重影响。此时，我们可以选择将一些不是很重要的 js 文件延迟到 <code>&lt;html&gt;</code> 标签关闭前再进行下载、执行。</p><ul><li>defer</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;!-- 一直延迟到 &lt;/html&gt; 前才开始加载 --&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script defer src="./js/main.js"&gt;&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们可以延迟多个脚本的加载，但并不是所有的浏览器最后都按顺序并且在 <code>DOMContentLoaded</code> 事件前加载它们。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="异步加载">异步加载<a class="hash-link" href="#异步加载" title="标题的直接链接">​</a></h3><p>也许我们并不想将 js 文件延迟到 <code>&lt;/html&gt;</code> 标签关闭前才进行加载，此时我们可以通过异步加载来更提前一些。</p><ul><li>async</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;!-- 开始加载，但不阻塞页面 --&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script async src="./js/main.js"&gt;&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>异步加载会一开始就进行 js 文件的下载，但不会阻塞当前页面的解析，至于何时加载完我们也不知道，但是一加载完就会执行相应代码，此时也不会阻塞页面的解析。同样地，我们可以异步加载多个文件，但必定不会按顺序进行加载，这是我们要注意的。而且，IE10 才开始支持该属性。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;!-- 测试加载完毕顺序 --&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script async onload="console.log('1 加载完毕')" src="./js/1.js"&gt;&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script async onload="console.log('2 加载完毕')" src="./js/2.js"&gt;&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script async onload="console.log('3 加载完毕')" src="./js/3.js"&gt;&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="动态引入异步加载">动态引入，异步加载<a class="hash-link" href="#动态引入异步加载" title="标题的直接链接">​</a></h2><p>我们可以在不使用 <code>async</code> 属性的情况下，动态创建 <code>&lt;script&gt;</code> 标签并插入 DOM 树，此时引入的 js 文件也会进行异步加载。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 动态引入，异步加载，可跨域</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var nScript = document.createElement('script');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nScript.src = "http://.../js/1.js";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.body.appendChild(nScript);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>该方法可以解决跨域访问资源的问题。</strong>同样的，多个文件动态引入均会进行异步加载，但也不会按顺序加载。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="获取所有-script-节点">获取所有 script 节点<a class="hash-link" href="#获取所有-script-节点" title="标题的直接链接">​</a></h2><p>我们可以通过预先设置的属性获取页面中所有 <code>&lt;script&gt;</code> 标签的节点集合，然后我们可以对其进行遍历打印一些信息。</p><ul><li>document.scripts</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 遍历并打印出 src</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Array.prototype.slice.call(document.scripts).forEach(function(e){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.log(e, e.src);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们获取的并不是一个数组，而是一个节点集合，要使用数组的 <code>forEach()</code> 方法我们就先将其转换成一个数组。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>由于 <code>&lt;script&gt;</code> 标签的同步加载特性，若我们的代码中有进行 DOM 操作，那么放在 <code>&lt;head&gt;</code> 中将会执行失败，因为此时 <code>&lt;body&gt;</code> 中要操作的元素还未解析出来。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《DOM 启蒙》，Cody Lindley，陈养剑 译</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>DOM</category>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[DOM-文本节点]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/DOM/dom-textnode</link>
            <guid>/Computer-Technology/Web/DOM/dom-textnode</guid>
            <pubDate>Tue, 24 May 2016 21:50:00 GMT</pubDate>
            <description><![CDATA[文本（Text）节点虽然很多时候我们直接用 innerHTML 去赋值替换，但当我们进行一些细微的修改时，了解一下 DOM 操作还是非常有用的。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-05-24 21:50:00 </em></p></blockquote><p>文本（Text）节点虽然很多时候我们直接用 innerHTML 去赋值替换，但当我们进行一些细微的修改时，了解一下 DOM 操作还是非常有用的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="文本节点">文本节点<a class="hash-link" href="#文本节点" title="标题的直接链接">​</a></h2><p>文本节点的 DOM 操作是不常用的，我们通常直接用元素节点的 <code>innerHTML</code> 属性直接替换其所有文本节点，但当我们要对文本节点进行局部操作时 DOM 操作却是很有用的。下面列举一些文本节点常用的属性及方法：</p><ul><li>textContent</li><li>appendData()</li><li>deleteData()</li><li>insertData()</li><li>replaceData()</li><li>subStringData()</li><li>splitText()</li><li>normalize</li><li>Data</li></ul><p>需要注意的是，我们在元素节点中留下的空格、回车符、制表符等空白字符也是被解析成文本节点的，所以说我们不压缩页面代码的话，会有许多无用的文本节点影响性能。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="文本节点的-dom-操作">文本节点的 DOM 操作<a class="hash-link" href="#文本节点的-dom-操作" title="标题的直接链接">​</a></h2><p>下面就详细介绍一下文本节点常用的 DOM 操作的过程，首先来了解一下如何创建一个文本节点并将其插入到 DOM 树中。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="创建节点并更新到-dom-树">创建节点并更新到 DOM 树<a class="hash-link" href="#创建节点并更新到-dom-树" title="标题的直接链接">​</a></h3><p>文本（Text）节点不同于元素节点，在 <code>document</code> 对象上也有专门用来创建文本节点的方法。</p><ul><li>createTextNode()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">　　&lt;h1&gt;&lt;/h1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">　　var textO = document.createTextNode('Hello World!');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector('h1').appendChild(textO);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="获取节点的文本值">获取节点的文本值<a class="hash-link" href="#获取节点的文本值" title="标题的直接链接">​</a></h3><p>文本节点的文本值是呈现出来给用户看的，但有些时候我们也需要让程序去获知被用户修改后的文本值。</p><ul><li>data</li><li>nodeValue</li><li>substringData()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var textO = document.querySelector('h1').firstChild;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取文本值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(texto.data); // Hello World!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(textO.nodeValue); // Hello World!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取文本值的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(textO.length);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(textO.data.length);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(textO.nodeValue.length);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取部分文本值（开始索引&lt;不包括&gt;，长度）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(textO.substringData(6,5)); // World</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="节点的文本值操作">节点的文本值操作<a class="hash-link" href="#节点的文本值操作" title="标题的直接链接">​</a></h3><p>文本节点的文本值事实上也是重要的数据，这涉及到一些查看、增添、删除、修改等操作。</p><ul><li>appendData()</li><li>deleteData()</li><li>insertData()</li><li>replaceData()</li><li>splitText()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;h1&gt;Hello World&lt;/h1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var textO = document.querySelector('h1').firstChild;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 添加（尾部附加）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    textO.appendData('!');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(textO.data); // Hello World!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 删除（删除位置索引&lt;不包括&gt;，删除长度）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    textO.deleteData(7,4);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(textO.data); // Hello W!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 插入（插入位置索引&lt;其后插入&gt;，插入值）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    textO.insertData(7,'orld');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(textO.data); // Hello World!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 替换（替换位置索引&lt;不包括&gt;，替换长度，替换值）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    textO.replaceData(6,5,'China')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(textO.data); // Hello China!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 分割（分割位置索引&lt;不包括&gt;，分割长度）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var sText = textO.splitText(6,5);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(sText.data); // China!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>splitText()</code> 方法会按要求将一个文本节点分割成多个文本节点，同时还会返回包含分割部分的文本节点对象。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="多个文本节点的情况">多个文本节点的情况<a class="hash-link" href="#多个文本节点的情况" title="标题的直接链接">​</a></h3><p>当我们在一个元素节点内写了很多文本值时，只要它们没有被元素节点分割，所有相邻的文本值将被浏览器解析成一个文本节点。但是，当我们主动创建多个文本节点并插入到 DOM 树中时，浏览器却不会合并这些相邻的文本节点。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="元素内所有文本值">元素内所有文本值<a class="hash-link" href="#元素内所有文本值" title="标题的直接链接">​</a></h4><p>当元素节点内的文本值被多个元素节点分割时，这些文本值会被解析成多个文本节点。元素节点的 <code>innerHTML</code> 属性获取的是该节点内的所有后代节点（包括文本节点与元素节点），而我们有时候却只想查看该节点的所有文本值（所有文本节点合并而成），下面就来看看如何查看。</p><ul><li>textContent</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;h1&gt;Hello &lt;i&gt;World!&lt;/i&gt;&lt;/h1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var eleO = document.querySelector('h1');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取所有文本值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(eleO.textContent); // Hello World!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 设置所有文本值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    eleO.textContent = 'Hello World!';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(eleO.textContent); // Hello World!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>我们会发现，<code>textContent</code> 与 <code>innerHTML</code> 获取的值不同，但是它们在进行设置时行为却是一样的，也就是说会覆盖掉目标元素节点内的所有后代节点。</strong></p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="合并多个文本节点">合并多个文本节点<a class="hash-link" href="#合并多个文本节点" title="标题的直接链接">​</a></h4><p>当有多个相邻的文本节点存在时，我们可以让其合并成一个文本节点，只需要在它们的父元素节点上使用 <code>normalize()</code> 方法即可，这里不再做示例。</p><ul><li>normalize()</li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>文本节点的属性及方法大部分都可以用在注释节点（Comment）上。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《DOM 启蒙》，Cody Lindley，陈养剑 译</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>DOM</category>
            <category>Text Node</category>
        </item>
        <item>
            <title><![CDATA[DOM-文档片段]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/DOM/dom-fragment</link>
            <guid>/Computer-Technology/Web/DOM/dom-fragment</guid>
            <pubDate>Mon, 23 May 2016 13:10:00 GMT</pubDate>
            <description><![CDATA[DOM 操作是非常消耗性能的，如果要进行大量的 DOM 操作，我们可以选择在内存中先构建一个文档片段然后一次性插入 DOM 树。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-05-23 13:10:00 </em></p></blockquote><p>DOM 操作是非常消耗性能的，如果要进行大量的 DOM 操作，我们可以选择在内存中先构建一个文档片段然后一次性插入 DOM 树。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="文档片段">文档片段<a class="hash-link" href="#文档片段" title="标题的直接链接">​</a></h2><p>文档片段（DocumentFragment）也就是 DOM 树的部分节点组合而成的局部。频繁的 DOM 操作对性能的影响是显著的，如果我们要进行大量的相似的 DOM 操作，建议在内存中创建一个文档片段并对其修饰，然后一次性插入 DOM 树。这么做的对性能的影响是最小的，同时也更灵活一些。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="创建文档片段">创建文档片段<a class="hash-link" href="#创建文档片段" title="标题的直接链接">​</a></h3><p>创建的文档片段是存放在内存中的，我们要谨慎操作，以防丢失引用或者内存泄漏，集中处理完毕后要及时更新到 DOM 树上。</p><ul><li>createDocumentFragment()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var docFrag = document.createDocumentFragment();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ['blue','green','red','pink'].forEach(function(e){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var li = document.createElement('li');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        li.textContent = e;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        li.style.backgroundColor = e;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        docFrag.appendChild(li);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这样，我们就创建好了一个文档片段，其中包含了四个 <code>li</code> 元素，我们并把它们各自的背景色设置为了其文本内容。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="更新到-dom-树">更新到 DOM 树<a class="hash-link" href="#更新到-dom-树" title="标题的直接链接">​</a></h3><p>在内存中对文档片段处理完毕后，我们就应该将其更新到 DOM 树上，采用的方法前面已经介绍过了。</p><ul><li>appendChild()</li><li>insertBefore()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;ul id="container"&gt;&lt;/ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        document.getElementById('container').appendChild(docFrag);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这样我们就将刚才创建的文档片段插入到了 DOM 树中，在页面上的效果也是我们预期的。<strong>要清楚的是，文档片段被插入 DOM 树中时，自身会被选中的 DOM 元素替代，也就是文档片段内的元素全都作为选中元素的子元素插入；而且，在插入 DOM 树后，文档片段自身也不再存在，不会发生内存泄漏的问题。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="更灵活的做法">更灵活的做法<a class="hash-link" href="#更灵活的做法" title="标题的直接链接">​</a></h3><p>为了让创建文档片段结构更加灵活一点，我们可以使用节点的属性来快速创建 DOM 结构。</p><ul><li>innerHTML</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var docFrag = document.createDocumentFragment();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var divO = document.createElement('div');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        docFrag.appendChild(divO);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        docFrag.querySelector('div').innerHTML = "&lt;ul&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&lt;/ul&gt;";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        document.getElementById('container').appendChild(docFrag);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>该方法用来创建更复杂的 DOM 结构的代码量是很少的，所以说创建文档片段可以混合不同的方法来提高效率，当然该方法可能更耗性能一些。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="重复利用">重复利用<a class="hash-link" href="#重复利用" title="标题的直接链接">​</a></h3><p>我们前面说过，文档片段在更新到 DOM 树中时会自动消失，如果我们想重复利用文档片段的话，在插入 DOM 树时将其副本插入就可以了。</p><ul><li><p>cloneNode()</p><script>document.getElementById(&#x27;container&#x27;).appendChild(docFrag.cloneNode(true));</script></li></ul><p>注意，<code>cloneNode()</code> 方法有一个布尔型参数，false 代表只复制节点自身，true 代表复制节点自身及其所有子节点。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>文档片段为我们提供了一个在内存中进行 DOM 预处理的机制，这要比我们重复进行真实 DOM 操作性能要高得多，我们应该合理利用这个机制。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《DOM 启蒙》，Cody Lindley，陈养剑 译</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>DOM</category>
            <category>Fragment</category>
        </item>
        <item>
            <title><![CDATA[DOM-事件]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/DOM/dom-event</link>
            <guid>/Computer-Technology/Web/DOM/dom-event</guid>
            <pubDate>Mon, 23 May 2016 12:18:00 GMT</pubDate>
            <description><![CDATA[JavaScript 的作用就是让 html 静态页面具备动态效果，而这些基本都是利用 DOM 事件来实现的。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-05-23 12:18:00 </em></p></blockquote><p>JavaScript 的作用就是让 html 静态页面具备动态效果，而这些基本都是利用 DOM 事件来实现的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="注册-dom-事件">注册 DOM 事件<a class="hash-link" href="#注册-dom-事件" title="标题的直接链接">​</a></h2><p>事件就是给目标 DOM 节点提前注册一个相应类型的事件方法，在合适的时机进行回调执行该方法的过程。接下来就来看看如何给目标 DOM 节点注册事件：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        background-color: #ccc;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        margin-bottom: 20px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;!-- 第一种：内联（html）事件 --&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div onclick="alert(-1)"&gt;这是个内联事件&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div id="event0"&gt;这是个0级DOM事件&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div id="event2"&gt;这是个2级DOM事件&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 第二种：属性（0级DOM）事件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var div_obj0 = document.querySelector("#event0");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_obj0.onclick = function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        alert(0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 第三种：2级DOM事件（addEventListener 方法）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var div_obj2 = document.querySelector("#event2");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_obj2.addEventListener("click", function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        alert(1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }, false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以上示例可以看出，我们有三种定义事件的方式：<strong>内联（html）事件</strong>、<strong>属性（0 级 DOM）事件</strong>、<strong>2 级 DOM 事件</strong>。事实上，前两者的本质是一样的，都是内联属性事件；<strong>我们通常都是通过第三种方式来（2 级 DOM 事件）定义事件的，它可以将同种事件定义多次而不会覆盖。</strong></p><p>我们在这里通过三种方式定义了三个事件，但它们都属于 <code>click</code> （鼠标左键点击）类型的事件，这只是其中一种事件类型，更多的事件类型我们不在这里进行一一列举。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="事件流程">事件流程<a class="hash-link" href="#事件流程" title="标题的直接链接">​</a></h2><p>如果我们给一个元素节点和它的子节点均定义了相同类型（例如 click）的事件，当子节点的事件触发时，那么它的父元素事实上也满足了事件触发条件，但是它们的先后顺序是怎样的？这时候对于整个 HTML 文档（DOM 树）来说就有一个事件流程的概念。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        height: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        background-color: #ccc;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div&gt;body是html的子节点，该div又是body的子节点&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 事件捕获阶段</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.documentElement.addEventListener('click', function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.info("1：捕获目标中");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }, true);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.body.addEventListener('click', function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.info("2：捕获目标中");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }, true);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 目标div</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector('div').addEventListener('click', function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.info("3：找到目标div");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }, false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 事件冒泡阶段</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.body.addEventListener('click', function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.info("4：事件冒泡中");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }, false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.documentElement.addEventListener('click', function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.info("5：事件冒泡中");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }, false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以上示例中，当我们用鼠标左键点击 DIV 时，控制台上会依次出现这五句话，而这正展示了 DOM 事件流程中的一部分，但足以说明事件流程这个概念。</p><p>当我们触发了某个 DOM 节点上的事件时，浏览器会从 DOM 树的根部开始遍历（捕获）到目标节点，待找到目标节点后触发事件，之后又反向遍历（冒泡）到 DOM 树的根节点。这也就是 DOM 事件流程：</p><blockquote><p><strong>捕获 -&gt; 目标触发事件 -&gt; 冒泡</strong></p></blockquote><p><strong>在捕获与冒泡过程中，若路过（遍历）的节点上定义的事件与目标节点上触发的事件类型相同的话也会被触发。</strong></p><p><code>addEventListener()</code> 方法的第三个参数是个布尔值：<strong>true 则表示事件在捕获阶段触发，false 则表示事件在冒泡阶段触发。</strong>我们通常让事件在冒泡阶段触发。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="事件对象">事件对象<a class="hash-link" href="#事件对象" title="标题的直接链接">​</a></h2><p>每一个 DOM 事件都有一个对应的 <code>event</code> 对象，该对象拥有一些属性和方法可以帮助我们更好地控制事件。下面来看看该对象的一些常用属性：</p><ul><li><p>type</p><p>事件类型（例如 click、mouseover）</p></li><li><p>target</p><p>事件触发节点对象</p></li><li><p>currentTarget</p><p>事件定义（注册）源节点对象</p></li><li><p>eventPhase</p><p>事件触发阶段（1：捕获，2：目标，3：冒泡）</p></li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        height: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        background-color: #ccc;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        margin: 20px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div&gt;分别点击该DIV和body试试看&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div&gt;分别点击该DIV和body试试看&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // body上定义事件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.body.addEventListener('click', function(event){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.info("this：", this);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.info("currentTarget：", event.currentTarget);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.info("target：", event.target);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }, true);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>以上示例可以看出，当我们分别点击 body 与 div 时，<code>target</code> 是变化的，它表示的是事件触发的节点对象；而 <code>currentTarget</code> 是不变的，它表示的是定义事件的节点对象（也就是节点自身），与 <code>this</code> 关键字相等。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="阻止事件默认行为">阻止事件默认行为<a class="hash-link" href="#阻止事件默认行为" title="标题的直接链接">​</a></h3><p>当我们验证表单时，如表单中用户输入的值不满足要求时是不能提交的，这时候就需要阻止表单的默认行为（提交）。所以说，在某些场景下，我们需要阻止事件的默认行为来达到我们的一些目的。</p><ul><li>preventDefault()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;a href="http://www.163.com"&gt;网易&lt;/a&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector("a").onclick = function(event){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 阻止超链接的默认跳转行为</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        event.preventDefault();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // return false; 也可以</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以上示例中，我们会发现点击该超链接是没有任何反应的，它不会跳转到目标页面。<strong>需要注意的是，<code>preventDefault()</code> 方法并不会阻止事件的捕获和冒泡行为。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="终止事件流程">终止事件流程<a class="hash-link" href="#终止事件流程" title="标题的直接链接">​</a></h3><p>通常我们都是让事件在冒泡阶段触发，在这种情况下当我们要很精确的控制事件触发条件时，也就是要确保 <code>event</code> 对象的 <code>target</code> 与 <code>currentTarget</code> 属性相同时，我们就要终止事件流程，防止触发其他节点的事件。</p><ul><li>stopPropagation()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;input type="text" value="请输入信息" /&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 定义body上的事件（冒泡阶段触发）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.body.addEventListener('click', function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        alert("我是body");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }, false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 定义input上的事件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector("input").addEventListener('click', function(event){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.value = "";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 终止事件流程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        event.stopPropagation();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }, false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以上示例中，当我们点击输入框时，触发了 <code>input</code> 上的事件却没有紧接着触发 <code>body</code> 上的事件，这是因为我们终止了事件流程（冒泡）。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="移除-dom-事件">移除 DOM 事件<a class="hash-link" href="#移除-dom-事件" title="标题的直接链接">​</a></h2><p>既然能定义（添加）事件，当然也能移除事件了，而我们有时候的确需要这么做。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;inout type="text" value="请输入信息" /&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 定义事件方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    function show(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        alert(this.value);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.value="";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 定义input上的0级DOM事件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector("input").onclick = show;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 移除0级DOM事件（内联事件也一样）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector("input").onclick = "";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 定义input上的2级DOM事件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector("input").addEventListener('click', show, false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 移除2级DOM事件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector("input").removeEventListener('click', show, false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>内联事件与 0 级 DOM 事件只需要给目标节点的相应内联属性赋值为空即可移除事件；<strong>而 <code>removeEventListener()</code> 可以移除事件方法为引用类型的 2 级 DOM 事件，它不能移除事件方法为匿名方法的事件。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="事件委托">事件委托<a class="hash-link" href="#事件委托" title="标题的直接链接">​</a></h2><p>有时候我们需要提前给未加入 DOM 树中的节点定义（添加）事件，这时我们可以将该事件委托（定义）给该节点的父节点，利用事件流程就可以实现我们的目的。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;form action=""&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;input type="text" value="请输入用户名" /&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;input type="password" /&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/form&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 将input(text)上的事件委托给父节点form</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector("form").addEventListener('click',function(event){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 判断事件触发目标</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(event.target.nodeName == "INPUT" &amp;&amp; event.target.type == "text"){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            alert(event.target.value);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            event.target.value="";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ｝</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }, false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>事件委托的原理就是，我们将目标节点的事件定义（委托）在其父节点上，当我们在目标节点触发了事件时，在向上冒泡的过程中碰到其父节点然后触发事件。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>灵活运用事件，可以让我们的 html 页面用户交互体验效果更好，同时事件委托也为我们提供了更改 html 文档后同类元素节点依然可以拥有相同事件的可能。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《DOM 启蒙》，Cody Lindley，陈养剑 译</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>DOM</category>
            <category>Event</category>
        </item>
        <item>
            <title><![CDATA[DOM-元素节点属性]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/DOM/dom-attribute</link>
            <guid>/Computer-Technology/Web/DOM/dom-attribute</guid>
            <pubDate>Sat, 21 May 2016 21:00:00 GMT</pubDate>
            <description><![CDATA[元素节点上具有很多属性，这些属性我们通常可以很方便的获取，并进行简单的操作。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-05-21 21:00:00 </em></p></blockquote><p>元素节点上具有很多属性，这些属性我们通常可以很方便的获取，并进行简单的操作。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="节点属性常用操作">节点属性常用操作<a class="hash-link" href="#节点属性常用操作" title="标题的直接链接">​</a></h2><p>每个 HTML 元素都有很多属性，例如（id、class、name、url、src、href）等等，元素节点上定义了一些方法供我们使用，来对这些属性进行设置、获取、移除操作。</p><ul><li>setAttribute()</li><li>getAttribute()</li><li>removeAttribute()</li></ul><p>exp:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   &lt;img style="width: 200px;height: 200px;" /&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var img_obj=document.querySelector("img");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 用方法设置单个属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    img_obj.setAttribute("src","123.png");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    img_obj.setAttribute("title","img");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    img_obj.setAttribute("alt","img");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 用方法获取单个属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(img_obj.getAttribute("src"));  // 输出 123.png</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(img_obj.getAttribute("title"));  // 输出 img</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(img_obj.getAttribute("alt"));  // 输出 img</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 用方法移除单个属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    img_obj.removeAttribute("src");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    img_obj.removeAttribute("title");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    img_obj.removeAttribute("alt");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>要注意的是，我们通常也可以直接获取、设置、移除某个元素节点上的属性，但是用方法获取比较好，并且获取的是原始值。例如，img 元素的 <code>src</code> 属性若直接获取得到的是计算后的绝对路径，而用 <code>getAttribute()</code> 方法获取得到的则是我们写在标签上的原始数据。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 直接获取属性（绝对路径）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(img_obj.src);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出 file:///C:/Users/Administrator.USER-20141121ES/Desktop/html/123.png</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 用方法获取（原始值）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(img_obj.getAttribute("src"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出 123.png</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>所以，我们要获取元素的属性，务必用 <code>getAttribute()</code> 方法。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="内联-css-属性">内联 CSS 属性<a class="hash-link" href="#内联-css-属性" title="标题的直接链接">​</a></h2><p>每个 HTML 元素都有个 <code>style</code> 属性，可以用来插入针对该元素的内联 CSS 属性。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div style="width: 200px;height: 200px;background-color: #ccc;border: 5px dotted blue;"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取内联style属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("div").style);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出 CSSStyleDeclaration {0: "width", 1: "height", 2: "background-color"...}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>元素节点的 style 内联属性返回一个 <code>CSSStyleDeclaration</code> 对象，该对象仅包含该元素节点的内联 CSS 属性（不包含内部样式表、外部样式表中的 CSS 属性）。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="单个-css-属性操作">单个 CSS 属性操作<a class="hash-link" href="#单个-css-属性操作" title="标题的直接链接">​</a></h3><p>元素节点的内联 CSS 属性都是该元素的 <code>style（CSSStyleDeclaration）</code> 对象上的一个个属性，所以我们可以通过 style（CSSStyleDeclaration）对象来设置、获取、移除单个内联 CSS 属性。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var div_style=document.querySelector("div").style;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 直接设置单个内联CSS属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_style.width="200px";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_style.height="200px";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_style.backgroundColor="red";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 直接获取单个内联CSS属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(div_style.width); //输出200px</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(div_style.height); //输出200px</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(div_style.backgroundColor);  // 输出red</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 直接移除单个内联CSS属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_style.width="";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_style.height="";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_style.backgroundColor="";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>要注意的是，<code>style（CSSStyleDeclaration）</code> 对象的属性名并不包含 <code>-</code> 字符，比如 <code>background-color</code> 属性名是不存在的。这些包含横线的属性名需要转译，通常规则如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 写成驼峰体命名法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">background-color ---&gt; backgroundColor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">font-size ---&gt; fontSize</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">border-bottom ---&gt; borderBottom</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">margin-top ---&gt; marginTop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 简写属性也可以</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">border ---&gt; border</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">margin ---&gt; margin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 如果属性名为 javascript 关键字，则加前缀</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">float ---&gt; cssFloat</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如果我们觉得属性名转译不太方便的话，我们还可以通过 <code>style（CSSStyleDeclaration）</code> 对象上定义的方法来进行设置、获取、移除单个内联 CSS 属性的操作。</p><ul><li>setProperty()</li><li>getPropertyValue()</li><li>removeProperty()</li></ul><p>exp:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var div_style=document.querySelector("div").style;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 用方法设置单个内联CSS属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_style.setProperty("width","200px");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_style.setProperty("height","200px");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_style.setProperty("background-color","red");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 用方法获取单个内联CSS属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(div_style.getPropertyValue("width"));  // 输出200px</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(div_style.getPropertyValue("height"));  // 输出200px</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(div_style.getPropertyValue("background-color"));  // 输出red</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 用方法移除单个内联CSS属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_style.removeProperty("width");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_style.removeProperty("height");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_style.removeProperty("backgroundColor");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="批量-css-属性操作">批量 CSS 属性操作<a class="hash-link" href="#批量-css-属性操作" title="标题的直接链接">​</a></h3><p>当我们需要批量操作内联 CSS 属性的时候，一个一个的进行未免太过麻烦，这里我们可以一次性改变所有内联 CSS 属性。</p><ul><li>cssText</li></ul><p>exp:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var div_obj=document.querySelector("div");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 用内联style属性对象上的方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 设置所有内联CSS属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_obj.style.cssText="width: 200px;height: 200px;background-color: #ccc";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取所有内联CSS属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(div_obj.style.cssText);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出 width: 200px; height: 200px; background-color: rgb(204, 204, 204);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 移除所有内联CSS属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_obj.style.cssText="";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 用元素自身的方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 设置所有内联CSS属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_obj.setAttribute("style","width: 200px;height: 200px;background-color: #ccc");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取所有内联CSS属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(div_obj.getAttribute("style"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出 width: 200px;height: 200px;background-color: #ccc;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 移除所有内联CSS属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_obj.removeAttribute("style");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="计算后的-css-属性">计算后的 CSS 属性<a class="hash-link" href="#计算后的-css-属性" title="标题的直接链接">​</a></h2><p>我们其实最想得到的是元素内联 CSS 样式以及级联（内部样式表、外部样式表）CSS 样式计算后得到的最终样式，而不仅仅是未计算的内联样式。</p><ul><li>getComputedStyle()</li></ul><p>exp:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        width: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        height: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        background-color: #ccc;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div style="background-color: red;border: 1px solid blue;"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var div_obj=document.querySelector("div");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 此为内部样式表中的CSS属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(window.getComputedStyle(div_obj).width);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出 200px</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(window.getComputedStyle(div_obj).height);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出 200px</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 内联CSS属性覆盖了内部样式表中的CSS属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(window.getComputedStyle(div_obj).backgroundColor);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出 rgb(255, 0, 0)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 此为内联CSS属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(window.getComputedStyle(div_obj).border);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出 1px solid rgb(0, 0, 255)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong><code>getComputedStyle()</code> 方法获取的是计算后的最终样式（包括内联样式、内部样式表、外部样式表），CSS 属性名注意要进行转译（例如，background-color =&gt; backgroundColor）。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="利用-id-和-class-改变-css-样式">利用 id 和 class 改变 CSS 样式<a class="hash-link" href="#利用-id-和-class-改变-css-样式" title="标题的直接链接">​</a></h2><p>更多的时候，我们都是将 CSS 样式写在内部样式表或者外部样式表中的，这样做便于维护和替换。我们可以通过改变元素节点的内联 <code>id</code> 或 <code>class</code> 属性来批量替换 CSS 样式。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    #a{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        background-color: red;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .b1{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        border:1px solid blue;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .b2{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        width: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        height: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        background-color: yellow;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        margin: 0 auto;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="b1"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var div_obj=document.querySelector("div");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 添加ID，改变背景颜色</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_obj.setAttribute("id","a");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取ID</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(div_obj.getAttribute("id"));  // 输出 a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 去掉ID</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_obj.removeAttribute("id");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 添加class,让DIV居中</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_obj.classList.add("b2");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取class</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(div_obj.getAttribute("class"));  // 输出 b1 b2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(div_obj.classList); //输出 DOMTokenList ["b1","b2"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 删减class的一部分，去掉边框</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div_obj.classList.remove("b1");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 再次获取class</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(div_obj.getAttribute("class"));   // 输出 b2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(div_obj.classList); //输出 DOMTokenList ["b2"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>要特别注意的是，通过改变 <code>id</code> 或 <code>class</code> 属性值更改的是内部样式表、外部样式表中的 CSS 样式属性，要比内联 CSS 样式属性的优先级低。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>其实要进行批量的改变 CSS 样式，我们完全可以替换元素的 <code>id</code> 和 <code>class</code> 属性（CSS 选择器），这样既方便还可以重复利用样式，这也是我们常用的方式。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《DOM 启蒙》，Cody Lindley，陈养剑 译</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>DOM</category>
            <category>Attribute</category>
        </item>
        <item>
            <title><![CDATA[CSS 清除浮动]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/CSS/css-clear-float</link>
            <guid>/Computer-Technology/Web/CSS/css-clear-float</guid>
            <pubDate>Sat, 21 May 2016 18:25:00 GMT</pubDate>
            <description><![CDATA[在浮动布局中，有时候会因为父元素没有设置高度而子元素浮动导致父元素坍塌，我们就需要清除浮动撑起父元素的高度，在这里总结一下常用方法。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-05-21 18:25:00 </em></p></blockquote><p>在浮动布局中，有时候会因为父元素没有设置高度而子元素浮动导致父元素坍塌，我们就需要清除浮动撑起父元素的高度，在这里总结一下常用方法。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="浮动">浮动<a class="hash-link" href="#浮动" title="标题的直接链接">​</a></h2><p>我们通常为了将块级（block）子元素水平排列，就将其浮动（<code>float: left|right</code>）起来而达到我们的目的，当然这会带来一些问题。所以，我们应尽可能清除浮动所带来的副作用，以免影响其它元素的布局。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    #container{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        background-color: grey;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .inner {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        margin: 15px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        width: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        height: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        background-color: blue;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        float: left;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div id="container"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;div class="inner"&gt;1&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;div class="inner"&gt;2&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;div class="inner"&gt;3&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此时，我们并看不到外层 div 的灰色背景，打开调试工具会发现外层 div 的 <code>height: 0</code>。当我们没有设置父元素高度，恰巧所有子元素浮动时，父元素的高度会成为 <code>0</code>，而没有被子元素撑起来。这是因为，子元素浮动之后脱离了文档流。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="清除浮动">清除浮动<a class="hash-link" href="#清除浮动" title="标题的直接链接">​</a></h2><p>清除浮动的方法很多，灵活性很大，通常我们只用一两种，但是都了解一下还是应该的。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="添加块级子元素">添加块级子元素<a class="hash-link" href="#添加块级子元素" title="标题的直接链接">​</a></h3><p>我们知道，当所有子元素浮动之后，我们继续在后面添加一个不浮动的块级（block）子元素，浮动的子元素会漂浮在该元素上方。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;div id="container"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="inner"&gt;3&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div style="clear:both;"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/div&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在所有浮动子元素尾部添加一个<strong>块级元素</strong>并<strong>清除浮动</strong>，我们会发现父元素被撑高了，而且此元素也没有影响页面布局的副作用。该方法的原理是：该元素由于设置了清除浮动，不允许有浮动元素漂浮在自己上方，所以该元素自然就排在了所有浮动元素之后，而该元素高为 0 相当于隐藏，因此也不会产生影响其它元素。</p><p>但是，该方法是不推荐的，因为添加一个没有表现内容的标签会显得页面代码复杂化，所以我们应该选择更好的方法。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="父元素-overflow-auto">父元素 overflow: auto<a class="hash-link" href="#父元素-overflow-auto" title="标题的直接链接">​</a></h3><p>我们也可以从父元素着手来解决浮动问题，当然这也不是个最佳方法。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    #container {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        overflow: auto;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        zoom: 1;  /* IE兼容 */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/style&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>我们可以通过给父元素设置 <code>overflow: atuo;zoom: 1;</code> 来达到清除浮动的目的。</strong>后者是为了低版本的 IE 兼容性而设置的。</p><p>此方法实际上也是不推荐的，简单的来说我们并不能确保父元素不会产生滚动条从而影响页面美观性。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="伪元素-after">伪元素 :after<a class="hash-link" href="#伪元素-after" title="标题的直接链接">​</a></h3><p>接下来要说的就是一种推荐的做法了，这个方法被大多数人采用。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    #container {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        zoom: 1;  /* IE兼容 */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    #container:after {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        clear: both;  /* 清除浮动 */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        content: '';  /* 伪元素默认属性 */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        height: 0;  /* 保证不显示 */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        display: block;  /* 确保为块元素 */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        visibility: hidden;  /* 确保渲染但不显示 */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/style&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>该方法事实上是对上面两个方法的综合，伪元素不是实际的 DOM 元素，这是其优势。<strong>该方法是最为优雅的清除浮动的方法，我们应该尽可能的采用该方法来清除浮动，不过还是应该视情况而定。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="双伪元素">双伪元素<a class="hash-link" href="#双伪元素" title="标题的直接链接">​</a></h3><p>随着浏览器的更新，标准的统一和兼容，可以使用更简洁的双伪元素法清除浮动，它与上面的原理相同。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    #container:before, #container:after {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        content:"";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        display:table;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    #container:after {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        clear:both;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    #container {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        zoom:1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/style&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里的 <code>:before</code> 伪元素并不是用来清除浮动的，而是解决垂直方向上 <code>margin</code> 重叠问题。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="其他方法">其他方法<a class="hash-link" href="#其他方法" title="标题的直接链接">​</a></h3><p>在实际开发过程中，我们发现并不是只有以上三种方法会产生清除浮动的效果，而其他某些时候也会产生该效果，下面就简单的列举一下。</p><ul><li>父元素也浮动时；</li><li>父元素为 <code>position: absolute</code> 时；</li><li>父元素为 <code>display: table</code> 时。</li></ul><p>以上这些均是一些副作用产生了清除浮动的效果，不应该作为清除浮动的目的来使用，因为这样会产生一些其他问题。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>也许，CSS 清除浮动的方法不止这些，不过我们只是单纯的为了清除浮动，采取最优雅的方法即可。其实，直接定义父元素的高度也相当于清除了浮动的副作用。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>CSS</category>
            <category>Float</category>
        </item>
        <item>
            <title><![CDATA[DOM-元素节点几何量]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/DOM/dom-rule</link>
            <guid>/Computer-Technology/Web/DOM/dom-rule</guid>
            <pubDate>Thu, 19 May 2016 14:54:00 GMT</pubDate>
            <description><![CDATA[当我们在查看 HTML 文档时，每个元素节点被解析后，都画成了可视形状。我们可以获取每个元素节点的几何量（宽、高、偏移量）以及页面滚动距离。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-05-19 14:54:00 </em></p></blockquote><p>当我们在查看 HTML 文档时，每个元素节点被解析后，都画成了可视形状。我们可以获取每个元素节点的几何量（宽、高、偏移量）以及页面滚动距离。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="元素节点几何量">元素节点几何量<a class="hash-link" href="#元素节点几何量" title="标题的直接链接">​</a></h2><p>通常我们将一个元素抽象成一个盒子模型，具有 content（内容）、padding（填充、内边距）、border（边框）、margin（外边距）这些尺寸属性。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="定位偏移量">定位偏移量<a class="hash-link" href="#定位偏移量" title="标题的直接链接">​</a></h3><p>使用元素节点的 <code>offsetTop</code> 与 <code>offsetLeft</code> 属性，我们可以分别获取该元素节点<strong>顶部与左侧外边框</strong>相对于 <code>offsetParent</code> 的<strong>顶部与左侧内边框</strong>的偏移像素量。</p><ul><li>offsetParent</li><li>offsetTop</li><li>offsetLeft</li></ul><p>一个元素节点的 <code>offsetParent</code> 判定依据为查找<strong>距离该元素节点最近的 CSS 定位（position）值不为 static（默认值）的祖先元素，</strong>直至 <code>body</code> 元素为止。如果在查询过程中，找到 <code>td</code>、<code>th</code>、<code>table</code> 元素之一，且它的定位值为 <code>static</code>，则将它作为 <code>offsetParent</code>。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    #out{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        width: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        height: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        background-color: #ccc;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        border: 5px solid yellow;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        padding: 10px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        margin: 15px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        position: relative;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    #in{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        width: 100px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        height: 100px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        background-color: red;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        border: 3px solid blue;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        padding: 6px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        margin: 9px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div id="out"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;div id="in"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 查看内部DIV的offsetParent</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("#in").offsetParent);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出&lt;div id="out"&gt;...&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 这是因为外部DIV的position="relative/absolute"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 验证内部DIV的offsetTop与offsetParent的值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("#in").offsetTop);  // 输出19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("#in").offsetLeft);  // 输出19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述示例可以看出，符合<strong>外边框到 <code>offsetParent</code> 内边框</strong>的计算方式。通俗的说就是，我们将一个小盒子放到一个大盒子中，小盒子外侧到大盒子内侧的距离就是我们要计算的值。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="盒子属性">盒子属性<a class="hash-link" href="#盒子属性" title="标题的直接链接">​</a></h3><p>在可视区（浏览器 HTML 文档显示区，不包含浏览器导航、地址栏等）内，我们可以通过 <code>getBoundingClientRect()</code> 方法获取某个元素的矩形盒子基本属性。</p><ul><li>getBoundingClientRect()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    body{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        border: 0px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        padding: 0px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        margin: 0px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        width: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        height: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        background-color: #ccc;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        border: 10px solid yellow;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        padding: 30px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        margin: 50px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取DIV的矩形盒子基本属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("div").getBoundingClientRect());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出ClientRect{top: 50, right: 330, bottom: 330, left: 50, width: 280, height: 280}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 可以单独获得某项基本属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("div").getBoundingClientRect().top);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出50</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述示例可以看出，<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code> 属性表示该元素矩形的<strong>上、下、左、右外边框</strong>相对于浏览器<strong>可视区上、下、左、右边沿</strong>的偏移像素量。通俗的说就是，在存放快递盒子的仓库中，每个盒子四周外侧到仓库四周墙壁的距离就是我们要计算的值。</p><p><code>width</code> 与 <code>height</code> 属性表示该元素矩形的可视尺寸（宽、高），不包括 <code>margin</code>（外边距）。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="盒子尺寸">盒子尺寸<a class="hash-link" href="#盒子尺寸" title="标题的直接链接">​</a></h3><p>我们可以通过一些属性获取可视区（浏览器 HTML 文档显示区，不包含浏览器导航、地址栏等）内元素矩形的尺寸。</p><ul><li>offsetWidth</li><li>offsetHeight</li><li>clientWidth</li><li>clientHeight</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        width: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        height: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        background-color: #ccc;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        border: 10px solid yellow;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        padding: 30px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        margin: 50px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取DIV的矩形盒子尺寸</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("div").offsetWidth);  // 输出280</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("div").offsetHeight);  // 输出280</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("div").clientWidth);  // 输出260</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("div").clientHeight);  // 输出260</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述示例可以看出，<code>offsetWidth</code> 与 <code>offsetHeight</code> 属性表示的是元素矩形的可视尺寸（宽、高），不包括 <code>margin</code>（外边距）。</p><p>但是，<code>clientWidth</code> 与 <code>clientHeight</code> 属性表示的是元素矩形的有效尺寸（宽、高），不包括 <code>margin</code>（外边距）、<code>border</code>（边框）。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="获取特定点上最顶层元素节点">获取特定点上最顶层元素节点<a class="hash-link" href="#获取特定点上最顶层元素节点" title="标题的直接链接">​</a></h3><p>我们可以使用 <code>elementFromPoint()</code> 方法获取可视区（浏览器 HTML 文档显示区，不包含浏览器导航、地址栏等）内，特定点上最顶层元素节点的引用。</p><ul><li>elementFromPoint()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取文档可视区内left=50，top=50处最顶层元素节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.elementFromPoint(50,50));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>如果没有设置 z 轴索引值 <code>z-index</code>，则最顶层元素节点就是 HTML 文档中该点上最后被解析的元素节点。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="滚动几何量">滚动几何量<a class="hash-link" href="#滚动几何量" title="标题的直接链接">​</a></h2><p>当 HTML 文档太大（页面元素太多）时，或者当某个元素节点内内容太多时，会出现左右滚动条。此时，我们可能需要知道该元素节点的滚动区域、滚动距离等等。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="滚动尺寸">滚动尺寸<a class="hash-link" href="#滚动尺寸" title="标题的直接链接">​</a></h3><p>我们可以通过以下属性来获取 HTML 页面或者某个元素节点的滚动尺寸（总高、总宽）。</p><ul><li>scrollWidth</li><li>scrollHeight</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    div{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        width: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        height: 200px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        background-color: #ccc;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        overflow: auto;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        width: 1000px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        height: 10000px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        margin: 0px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;p&gt;&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取DIV的滚动尺寸</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("div").scrollWidth);  // 输出1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("div").scrollHeight);  // 输出1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>当滚动条未出现（滚动区域&lt;元素尺寸）时，这两个属性将返回 <code>clientWidth</code> 与 <code>clientHeight</code> 属性的值，也就是有效尺寸。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="滚动距离">滚动距离<a class="hash-link" href="#滚动距离" title="标题的直接链接">​</a></h3><p>通常页内导航可以将视区跳转到页内某个区域内，或者当页面向下滚动时才继续加载图片等等。这些功能的实现都要获取（设置）所滚动的距离。</p><ul><li>scrollLeft</li><li>scrollTop</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        width: 10000px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        height: 10000px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;p&gt;&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 利用事件将窗口滚动距离显示在标题上</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    window.onscroll=function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        scroll_left=document.body.scrollLeft || document.documentElement.scrollLeft;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        scroll_top=document.body.scrollTop || document.documentElement.scrollTop;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        document.title=scroll_left+","+scroll_top;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如果我们想让页面滚动到某一处，直接给 <code>scrollLeft</code> 和 <code>scrollTop</code> 属性赋值即可。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="滚动元素节点到视区内">滚动元素节点到视区内<a class="hash-link" href="#滚动元素节点到视区内" title="标题的直接链接">​</a></h3><p>页内导航通常也可以根据选取特定元素，将视区跳转到该元素节点上来实现，这样实现的方式是最科学的。</p><ul><li>scrollIntoView()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    button{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        margin: 10px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        height: 1000px;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        background-color: #ccc;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;button&gt;跳转到第一段&lt;/button&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;button&gt;跳转到第二段&lt;/button&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;button&gt;跳转到第三段&lt;/button&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;button&gt;跳转到第四段&lt;/button&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;button&gt;跳转到第五段&lt;/button&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p id="p1"&gt;第一段&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p id="p2"&gt;第二段&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p id="p3"&gt;第三段&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p id="p4"&gt;第四段&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p id="p5"&gt;第五段&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取按钮集合并转换为数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var buttons=document.getElementsByTagName("button");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buttons=Array.prototype.slice.call(buttons);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 利用事件实现按钮跳转</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for (var i = buttons.length - 1; i &gt;= 0; i--) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        buttons[i].onclick=function(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            var index=buttons.indexOf(this)+1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            document.querySelector("#p"+index).scrollIntoView();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>元素节点的几何量（尺寸、定位偏移量），页面元素的滚动距离等等都是我们经常使用的值，所以清楚的了解什么属性、方法获取什么值是非常有必要的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《DOM 启蒙》，Cody Lindley，陈养剑 译</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>DOM</category>
            <category>Rule</category>
        </item>
        <item>
            <title><![CDATA[编辑器：Sublime Text 常用插件]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Tools/tools-sublime</link>
            <guid>/Computer-Technology/Tools/tools-sublime</guid>
            <pubDate>Thu, 19 May 2016 13:38:00 GMT</pubDate>
            <description><![CDATA[Sumblime Text 是一个具有漂亮的界面和强大功能的文本编辑器，而且也支持许多丰富的插件。它是一个收费软件，但是允许开发人员无限期的免费试用。这篇文章介绍一下常用的插件。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-05-19 13:38:00 </em></p></blockquote><p>Sumblime Text 是一个具有漂亮的界面和强大功能的文本编辑器，而且也支持许多丰富的插件。它是一个收费软件，但是允许开发人员无限期的免费试用。这篇文章介绍一下常用的插件。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="安装-sublime-text">安装 Sublime Text<a class="hash-link" href="#安装-sublime-text" title="标题的直接链接">​</a></h2><p>Sublime Text 编辑器，我们直接去官网下载相应版本安装即可，2 或 3 版本官网均有链接。</p><blockquote><p><strong>Sublime Text：</strong><a href="http://www.sublimetext.com/" target="_blank" rel="noopener noreferrer">http://www.sublimetext.com/</a></p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="必备插件-package-control">必备插件 Package Control<a class="hash-link" href="#必备插件-package-control" title="标题的直接链接">​</a></h2><p>Package Control 插件是一个方便 Sublime Text 管理插件的插件，所以要安装其他插件之前，应该先安装它。</p><blockquote><p><strong>Package Control：</strong><a href="https://packagecontrol.io/installation" target="_blank" rel="noopener noreferrer">https://packagecontrol.io/installation</a></p></blockquote><p>进入以上网站，按照其说明的两种方法即可安装该插件。在这里说一下最简单的方法：<strong>打开 Sublime Text 按<kbd>Ctrl + ~</kbd>键进入控制台，然后复制网站中相应版本的代码到控制台，按回车执行即可，看左下角状态栏显示安装成功信息，重启 Sublime Text。</strong></p><p>注意该插件网站上有许多其他插件的详细介绍和安装方法哟。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="插件安装方法">插件安装方法<a class="hash-link" href="#插件安装方法" title="标题的直接链接">​</a></h2><p>以后我们通过该插件来管理其他插件的安装，其他插件的安装方式也有两种：在线安装、本地安装。我们通常采用简单快捷的方式，即在线安装。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="在线安装">在线安装<a class="hash-link" href="#在线安装" title="标题的直接链接">​</a></h3><p>打开 Sublime Text 按<kbd>Ctrl + Shift + P</kbd>键出现输入框后输入 <code>install package</code> 命令按回车，等待一会之后输入框又会出现，此时即可输入相应插件名字，选择好后按回车，查看左下角状态栏信息，即可安装成功。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="本地安装">本地安装<a class="hash-link" href="#本地安装" title="标题的直接链接">​</a></h3><p>我们事先从网站上将插件的源文件下载到本地，然后打开 Sublime Text 选择工具栏中 <strong>Preferences -&gt; Browse Packages</strong> 会自动打开一个文件夹，我们将下载的插件源文件拷进该文件夹中，重启 Sublime Text 即可。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="常用插件">常用插件<a class="hash-link" href="#常用插件" title="标题的直接链接">​</a></h2><p>下面，将会介绍一些在 Sublime Text 使用过程中比较常用的简单插件，安装方法不再重复，查看前面即可。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="imesupport">IMESupport<a class="hash-link" href="#imesupport" title="标题的直接链接">​</a></h3><p>让人郁闷的是，在 Sublime Text 中输入法的输入框不能跟随光标，总是在屏幕的某个角上，这样打字的时候感觉很不习惯。IMESupport 这个小插件就是为了解决这个问题而诞生，它的作者是一位日本人。</p><blockquote><p><strong>IMESupport：</strong><a href="https://github.com/chikatoike/IMESupport" target="_blank" rel="noopener noreferrer">https://github.com/chikatoike/IMESupport</a></p></blockquote><p>该插件安装成功后，不用重启 Sublime Text 即可看到效果。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="emmet">Emmet<a class="hash-link" href="#emmet" title="标题的直接链接">​</a></h3><p>该插件的前身为 Zen coding ，改名为 Emmet 后也带来了许多新特性，对于从事前端开发的朋友来说是很强大的。该插件可以实现代码自动完成、语法提示、支持 CSS 语法选择器代码生成、批量操作等等。</p><blockquote><p><strong>Emmet：</strong><a href="http://docs.emmet.io/" target="_blank" rel="noopener noreferrer">http://docs.emmet.io/</a></p></blockquote><p>需要注意的是，该插件体积比较大，在进行安装的时候要注意左下角状态栏信息，等待 PyV8（必备，自动下载） 成功安装之后该插件方可生效。</p><blockquote><p><strong>PyV8：</strong><a href="https://github.com/emmetio/pyv8-binaries" target="_blank" rel="noopener noreferrer">https://github.com/emmetio/pyv8-binaries</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="color-highlighter">Color Highlighter<a class="hash-link" href="#color-highlighter" title="标题的直接链接">​</a></h3><p>这款插件可以让我们设置的 CSS 样式颜色可视化，从而帮助我们更好的掌握页面颜色的布局。</p><blockquote><p><strong>Color Highlighter：</strong><a href="https://packagecontrol.io/packages/Color%20Highlighter" target="_blank" rel="noopener noreferrer">https://packagecontrol.io/packages/Color%20Highlighter</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="syncedsidebarbg">SyncedSideBarBg<a class="hash-link" href="#syncedsidebarbg" title="标题的直接链接">​</a></h3><p>该插件可以让 Sublime Text 的侧边栏，也就是文件夹目录的背景色与主题同步，默认是灰白色的不太好看。侧边栏可以按<kbd>Ctrl + K + B</kbd>键唤出。</p><blockquote><p><strong>SyncedSideBarBg：</strong><a href="https://packagecontrol.io/packages/SyncedSideBar" target="_blank" rel="noopener noreferrer">https://packagecontrol.io/packages/SyncedSideBar</a></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="jsformat">JsFormat<a class="hash-link" href="#jsformat" title="标题的直接链接">​</a></h3><p>JsFormat 插件可以一键格式化对齐我们的 JavaScript 代码，让凌乱的代码瞬间变得整齐起来，可读性大大提高。</p><blockquote><p><strong>JsFormat：</strong><a href="https://packagecontrol.io/packages/JsFormat" target="_blank" rel="noopener noreferrer">https://packagecontrol.io/packages/JsFormat</a></p></blockquote><p>安装好之后，任意打开一个 js 文件，按<kbd>Ctrl + Alt + F</kbd>即可格式化代码看到效果。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="a-file-icon">A File Icon<a class="hash-link" href="#a-file-icon" title="标题的直接链接">​</a></h3><p>A File Icon 插件可以美化侧边栏文件的图表，文件分类的视觉效果更加直观。</p><blockquote><p><strong>A File Icon：</strong><a href="https://packagecontrol.io/packages/A%20File%20Icon" target="_blank" rel="noopener noreferrer">https://packagecontrol.io/packages/A%20File%20Icon</a></p></blockquote>]]></content:encoded>
            <category>计算机技术</category>
            <category>工具</category>
            <category>编辑器</category>
            <category>Sublime Text</category>
            <category>插件</category>
        </item>
        <item>
            <title><![CDATA[编辑器：Sublime Text - Vim 插件]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Tools/tools-sublime-vim</link>
            <guid>/Computer-Technology/Tools/tools-sublime-vim</guid>
            <pubDate>Wed, 18 May 2016 12:55:00 GMT</pubDate>
            <description><![CDATA[Sumblime Text 是一个具有漂亮的界面和强大功能的文本编辑器，而且也支持许多丰富的插件。它是一个收费软件，但是允许开发人员无限期的免费试用。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-05-18 12:55:00 </em></p></blockquote><p>Sumblime Text 是一个具有漂亮的界面和强大功能的文本编辑器，而且也支持许多丰富的插件。它是一个收费软件，但是允许开发人员无限期的免费试用。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="vim">Vim<a class="hash-link" href="#vim" title="标题的直接链接">​</a></h2><p>Vim 是 Linux 操作系统下类 Vi 编辑器，是一款被开发者广泛使用，并且功能强大的文本编辑器。而 Sublime Text 最初的设计初衷也是基于 Vim 的设计思想，被设计为一个跨平台的具有丰富扩展功能的 Vim。随着后来的发展，它已经不仅仅是单纯的模仿 Vim，而是支持越来越多的插件和强大的功能。</p><p>Vim 插件在目前的新版本中都是默认没有安装的，但是有了 Vim 插件我们可以像在 Linux 操作系统下使用 Vim 一样使用 Sublime Text，这样我们的开发效率会大大提升。下面我们就来看看如何在 Sublime Text 3 中安装 Vim 插件，并且了解一下 Vim 插件的常用功能。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="vim-插件安装">Vim 插件安装<a class="hash-link" href="#vim-插件安装" title="标题的直接链接">​</a></h2><p>首先，我们要安装好 Sublime Text 3 和 Package Control 插件。</p><blockquote><p><strong>Sublime Text：</strong><a href="http://www.sublimetext.com/" target="_blank" rel="noopener noreferrer">http://www.sublimetext.com/</a> <br> &gt; <strong>Package Control：</strong><a href="https://packagecontrol.io/installation" target="_blank" rel="noopener noreferrer">https://packagecontrol.io/installation</a></p></blockquote><p>然后，我们安装 Vim 插件，这里有两种方法：在线安装和本地安装。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="在线安装">在线安装<a class="hash-link" href="#在线安装" title="标题的直接链接">​</a></h3><p>打开 Sublime Text 3，<kbd>Ctrl+Shift+P</kbd>打开命令行，输入 <code>Install Package</code> 回车，等一会之后命令行再次出现，输入 <code>vintageous</code> 回车。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="本地安装">本地安装<a class="hash-link" href="#本地安装" title="标题的直接链接">​</a></h3><p>先下载 Vim 插件文件：</p><blockquote><p><strong>Vintageous：</strong><a href="https://packagecontrol.io/packages/Vintageous" target="_blank" rel="noopener noreferrer">https://packagecontrol.io/packages/Vintageous</a></p></blockquote><p>打开 Sublime Text 3，在菜单中选择 <strong>Preferences-&gt;Browse Packages</strong>，将下载好的 Vim 插件文件夹拷进打开的文件夹，关闭文件夹。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="用户配置">用户配置<a class="hash-link" href="#用户配置" title="标题的直接链接">​</a></h3><p>打开 Sublime Text 3，在菜单 <strong>Preferences</strong> 下选择 <strong>Settings-User</strong>，也就是用户设置。我们可以找到以下这句：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">"ignored_packages": ["Vintage"]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这句代码的意思就是，Sublime 默认是关闭 Vim 插件的。我们将其改为：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">"ignored_packages": []</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后，保存退出，关闭 Sublime Text 3 重启即可。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="vim-插件使用">Vim 插件使用<a class="hash-link" href="#vim-插件使用" title="标题的直接链接">​</a></h2><p>Vim 插件会有三个模式：插入模式（INSERT MODE）、命令模式（COMMAND MODE）、行末模式。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="插入模式">插入模式<a class="hash-link" href="#插入模式" title="标题的直接链接">​</a></h3><p>插入模式也就是编辑模式，我们写代码的时候用的模式。此模式下可以输入代码，和普通的编辑器一样，按键盘左上角<kbd>Esc</kbd>即可进入命令模式。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="命令模令">命令模令<a class="hash-link" href="#命令模令" title="标题的直接链接">​</a></h3><p>命令模式提供便捷强大的快捷键，是 Vim 插件的核心模式。此模式下，进入插入模式有八种方式：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">i  // 光标前插入</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">a  // 光标后插入</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">s  // 替换插入（删除当前光标所在字符）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Shitf+I  // 行首插入（光标所在行）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Shift+A  // 行尾插入（光标所在行）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Shift+S  // 行替换插入（删除光标所在行）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">o  // 下一行插入（光标所在行下添加一行）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Shift+O  // 上一行插入（光标所在行上添加一行）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后，命令模式下进入行末模式的方式是：<kbd>Shift+;</kbd>，也就是冒号。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="常用快捷键">常用快捷键<a class="hash-link" href="#常用快捷键" title="标题的直接链接">​</a></h4><p>命令模式下还有许多便捷而强大的快捷键，下面来了解一下。</p><ul><li><p>光标移动</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  h  // 光标左移</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  j  // 光标下移</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  k  // 光标上移</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  l  // 光标右移</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  gg  // 光标移动到文档开头</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Shift+G  // 光标移动到文档结尾</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>复制、粘贴、剪切/删除、撤销/恢复（批量操作）</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  yy  // 复制光标所在整行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  2+yy // 复制光标所在行开始向下2（n）行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  p   // 光标所在行下方添加一行并粘贴</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  2+p  // 光标所在行下方添加2（n）行并粘贴</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Shitf+P  // 光标所在行上方添加一行并粘贴</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  dd  // 删除、剪切光标所在整行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  2+dd  // 删除、剪切光标所在行开始向下2（n）行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  u  // 撤销</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Ctrl+Y  // 恢复</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  r  // 替换光标所在字符</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>其他删除/剪切方式</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  d+gg  // 光标所在行到文档开头之间全部删除、剪切</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  d+Shift+G  // 光标所在行到文档结尾之间全部删除、剪切</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  d+2+gg  // 光标所在行到第2（n）行之间全部删除、剪切</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  d+2+Shift+G  // 同上</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  d+^  // 光标所在字符到行首之间全部删除、剪切</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  d+$  // 光标所在字符到行尾之间全部删除、剪切</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Shift+D  // 同上</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  d+w  // 删除光标所在处一个单词、符号</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  x  // 删除光标所在字符</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  2+x // 删除光标所在字符开始向后2（n）个字符</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="行末模式">行末模式<a class="hash-link" href="#行末模式" title="标题的直接链接">​</a></h3><p>行末模式也就是通常我们所说的菜单栏，提供文件保存等操作。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">w  // 保存当前文档</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">x  // 保存文档并关闭</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>Vim 插件有三种模式，但是不能互相切换，命令模式是其切换枢纽。三者切换关系如下：</p><blockquote><p><strong>插入模式&lt;---&gt;命令模式&lt;---&gt;行末模式</strong></p></blockquote><p>为了方便、安全，我们通常将其初始化模式设置为 <strong>命令模式</strong>，方式：打开 Sublime Text 3，在菜单 <strong>Preferences</strong> 下选择 <strong>Settings-User</strong>，也就是用户设置；添加下面这句：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">"vintage_start_in_command_mode": true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>计算机技术</category>
            <category>工具</category>
            <category>编辑器</category>
            <category>Sublime Text</category>
            <category>插件</category>
            <category>Vim</category>
        </item>
        <item>
            <title><![CDATA[DOM-节点集合]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/DOM/dom-nodelist</link>
            <guid>/Computer-Technology/Web/DOM/dom-nodelist</guid>
            <pubDate>Tue, 17 May 2016 22:30:00 GMT</pubDate>
            <description><![CDATA[当从文档树中选取成组的节点或者使用预定义的节点集合时，这些节点都是放在 NodeList 或者一个 HTMLCollecton 之中，而不是一个数组（Array）中。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-05-17 22:30:00 </em></p></blockquote><p>当从文档树中选取成组的节点或者使用预定义的节点集合时，这些节点都是放在 NodeList 或者一个 HTMLCollecton 之中，而不是一个数组（Array）中。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="节点集合">节点集合<a class="hash-link" href="#节点集合" title="标题的直接链接">​</a></h2><p>我们将一个 <code>NodeList</code> 或者 <code>HTMLCollecton</code> 称为节点集合，也就是类数组的节点对象集合。节点集合一般有以下特征：</p><ul><li><p>实时或静态</p><p>这意味着在集合中包含的节点对象们或是实时文档树的某一部分，或是某一实时文档树的快照。</p></li><li><p>顺序一致性</p><p>默认情况下，集合中的节点对象以其所在 DOM 树中的顺序排序，这就意味着这个顺序与从树到分支的线性路径吻合。</p></li><li><p>length 属性</p><p>我们可以通过其 <code>length</code> 属性获取该节点集合中的节点数目。</p></li></ul><p><strong>注意，<code>NodeList</code> 与 <code>HTMLCollection</code> 都是实时列表。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="获取所有直属子节点">获取所有直属子节点<a class="hash-link" href="#获取所有直属子节点" title="标题的直接链接">​</a></h2><p>利用节点对象身上的 <code>childNodes</code> 属性会获取一个类数组的包含直属（第一代）子节点的列表，也就是 <code>NodeList</code>。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p&gt;Hello,World!&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出&lt;body&gt;元素节点的所有直属子节点集合</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.body.childNodes);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出为 [text, p, text, script]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>要注意的是，它并不是一个纯数组，而是类数组的集合。为什么有两个子节点是文本（Text）节点，是因为 <code>&lt;p&gt;</code> 标签前后都有回车符和空格。</p><p><code>childNodes</code> 属性返回的 <code>NodeList</code> 仅包含直属子节点；而且不仅包含元素（Element）节点，还包含其他所有类型节点，例如文本（Text）节点、注释（Comment）节点。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="获取所有元素节点集合">获取所有元素节点集合<a class="hash-link" href="#获取所有元素节点集合" title="标题的直接链接">​</a></h2><p>对于一个<strong>元素节点对象</strong>，我们可以利用其 <code>children</code> 属性获取其所有的 <strong>直属子元素节点</strong>。而且还有以下几个文档对象属性可以获取预定义的元素节点集合：</p><ul><li><p>document.all</p><p>获取 HTML 文档中所有元素节点的集合。</p></li><li><p>document.forms</p><p>获取 HTML 文档中所有（from）元素。</p></li><li><p>document.images</p><p>获取 HTML 文档中所有（img）元素。</p></li><li><p>document.links</p><p>获取 HTML 文档中所有（a）元素。</p></li><li><p>document.scripts</p><p>获取 HTML 文档中所有（script）元素。</p></li><li><p>document.styleSheets</p><p>获取 HTML 文档中所有（link、style）元素。</p></li></ul><p>以上类数组列表中，<code>document.all</code> 构建自 <code>HTMLAllCollection</code>；<code>styleSheets</code> 构建自 <code>StyleSheetList</code>；其他的均构建自 <code>HTMLCollection</code>。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="将节点集合转换成数组">将节点集合转换成数组<a class="hash-link" href="#将节点集合转换成数组" title="标题的直接链接">​</a></h2><p>节点集合（NodeList 与 HTMLCollection）都是类数组，但并不是真正的数组，后者继承数组的方法。我们做以验证：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;a href=""&gt;&lt;/a&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 验证 NodeList</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(Array.isArray(document.body.childNodes)); // 输出false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 验证 HTMLCollection</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(Array.isArray(document.links)); // 输出false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如何将一个类数组列表转换成真正的 javascript 数组？</p><p>我们只需要将类数组列表传给 <code>call()</code> 或者 <code>apply()</code>，在它们中调用一个数组方法，它们就会返回一个未经修改的真正的 javascript 数组。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;a href=""&gt;&lt;/a&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // NodeList 转换成数组并验证</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(Array.isArray(Array.prototype.slice.call(document.body.childNodes)));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // HTMLCollection 转换成数组并验证</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(Array.isArray(Array.prototype.slice.call(document.links)));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>将其转换为真正的 javascript 数组有以下好处：</p><ul><li><p>获取快照</p><p>NodeList、HTMLCollection 都是实时列表，这么做使我们能够获取该列表的快照，不与实时 DOM 绑定。</p></li><li><p>方便操作</p><p>转换成数组之后，我们可以使用数组的方法，例如 forEach、pop、map、reduce 等。</p></li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>其实节点集合我们通常可能不太关注，我们大多数时候关注的都是单个节点。但是，在某些需要批量操作的场景，这时候节点集合倒是不错的选择。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《DOM 启蒙》，Cody Lindley，陈养剑 译</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>DOM</category>
            <category>NodeList</category>
        </item>
        <item>
            <title><![CDATA[DOM-选取元素节点]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/DOM/dom-select</link>
            <guid>/Computer-Technology/Web/DOM/dom-select</guid>
            <pubDate>Tue, 17 May 2016 22:10:00 GMT</pubDate>
            <description><![CDATA[DOM 操作都是通过对文档树中节点的访问来实现的，如何选取特定的元素节点是关键，进而才能访问该元素节点实现修改、查看、移除、替换等操作。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-05-17 22:10:00 </em></p></blockquote><p>DOM 操作都是通过对文档树中节点的访问来实现的，如何选取特定的元素节点是关键，进而才能访问该元素节点实现修改、查看、移除、替换等操作。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="选取特定单一元素节点">选取特定单一元素节点<a class="hash-link" href="#选取特定单一元素节点" title="标题的直接链接">​</a></h2><p>取得某一特定单一元素节点的引用最常用的方式如下：</p><ul><li>querySelector()</li><li>getElementById()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;ul id="animal"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li id="Dog"&gt;Dog&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li id="Cat"&gt;Cat&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li id="Pig"&gt;Pig&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // querySecletor()方法可通过多种途径获取第一个&lt;li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("li"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("ul&gt;li"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("#Dog"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("#animal&gt;#Dog"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // getElementById()通过ID属性获取</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.getElementById("Dog"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong><code>getElementById()</code> 方法仅能通过节点的 id 属性获取目标节点的引用；而 <code>querySelector()</code> 方法更强大，它可以接受一个 CSS 选择器语法格式（例如 ul &gt; li）的参数，而且它只会返回第一个符合条件的节点的引用。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="选取特定元素节点集合">选取特定元素节点集合<a class="hash-link" href="#选取特定元素节点集合" title="标题的直接链接">​</a></h2><p>取得某一特定元素节点集合最常用的方式如下：</p><ul><li>querySelectorAll()</li><li>getElementsByTagName()</li><li>getElementsByClassName()</li><li>getElementsByName()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;ul id="animals"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li class="animal"&gt;Dog&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li class="animal"&gt;Cat&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li class="animal"&gt;Pig&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // querySecletorAll()方法可通过多种途径获取第三个&lt;li&gt;集合</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelectorAll("li"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelectorAll("ul&gt;li"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelectorAll("#animals&gt;.animal"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // getElementsByTagName()通过标签名称获取</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.getElementsByTagName("li"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // getElementsByClassName()通过class属性获取</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.getElementsByClassName("animal"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>同样地，<code>querySelectorAll()</code> 方法更强大一些，它可以接受一个 CSS 选择器语法格式（例如 ul &gt; li）的参数。<code>getElementsByName()</code> 方法可以通过节点的 <code>name</code> 属性获取特定节点集合的引用，但是它并不常用。</p><p><strong><code>querySelectorAll()</code> 方法获取的节点集合是静态的，也就是说是非实时的，它只是创建该节点集合时文档的快照；而其他的方法获取的节点集合都是实时的，会及时反映文档的当前状态。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="选取所有的直属子元素节点">选取所有的直属子元素节点<a class="hash-link" href="#选取所有的直属子元素节点" title="标题的直接链接">​</a></h2><p>使用<strong>元素节点</strong>上的 <code>children</code> 属性，我们可以获取该元素节点的所有直属（第一代）子元素节点。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li&gt;Dog&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li&gt;Cat&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li&gt;Pig&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取&lt;ul&gt;元素内的所有&lt;li&gt;子元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector("ul").children);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>获取的该节点集合是实时的，文档中任何改动都将会动态反映到集合中。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="选取与上下文有关的元素节点">选取与上下文有关的元素节点<a class="hash-link" href="#选取与上下文有关的元素节点" title="标题的直接链接">​</a></h2><p>虽然 <code>querySelector()</code>、<code>querySelectorAll()</code>、<code>getElementsByTagName()</code>、<code>getElementsByClassName()</code> 这些方法一般都通过 <code>document</code> 对象访问，其实在元素节点上也有定义。这样我们可以将这些方法的查找范围缩小到文档树中某一特定分支（或者分支集）。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;ul id="fruits"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li&gt;Apple&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li&gt;Banana&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li&gt;Pear&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;ul id="animals"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li&gt;Dog&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li&gt;Cat&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li&gt;Pig&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取第二个&lt;ul&gt;元素中的所有&lt;li&gt;子元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelectorAll("#animals&gt;li"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 这样也可以</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var li_animals=document.querySelector("#animals");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(li_animals.querySelectorAll("li"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="预定义的元素节点选取">预定义的元素节点选取<a class="hash-link" href="#预定义的元素节点选取" title="标题的直接链接">​</a></h2><p>有一些很方便的预定义的元素集合，如下所示：</p><ul><li><p>document.all</p><p>获取 HTML 文档中所有元素节点的集合。</p></li><li><p>document.forms</p><p>获取 HTML 文档中所有（from）元素。</p></li><li><p>document.images</p><p>获取 HTML 文档中所有（img）元素。</p></li><li><p>document.links</p><p>获取 HTML 文档中所有（a）元素。</p></li><li><p>document.scripts</p><p>获取 HTML 文档中所有（script）元素。</p></li><li><p>document.styleSheets</p><p>获取 HTML 文档中所有（link、style）元素。</p></li></ul><p>以上类数组列表中，<code>document.all</code> 构建自 HTMLAllCollection；<code>styleSheets</code> 构建自 StyleSheetList；其他的均构建自 HTMLCollection，并且都是实时的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="验证特定元素节点">验证特定元素节点<a class="hash-link" href="#验证特定元素节点" title="标题的直接链接">​</a></h2><p>使用 <code>matchesSelector()</code> 方法，我们可以判断一个元素是否匹配某个选择器字符串。但是该方法在不同内核的浏览器中实现不一样，分别加了前缀：</p><ul><li>mozMatchesSelector()</li><li>webkitMatchesSelector()</li><li>msMatchesSelector()</li><li>oMatchesSelector()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;ul id="fruits"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li&gt;Apple&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li&gt;Banana&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li&gt;Pear&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;ul id="animals"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li id="Dog"&gt;Dog&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li&gt;Cat&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li&gt;Pig&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 验证id为Dog的&lt;li&gt;元素是否是第二个&lt;ul&gt;元素的子元素节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var a=document.querySelector("#Dog").webkitMatchesSelector("#animals&gt;li");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(a);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p><code>querySelector()</code> 与 <code>querySelectorAll()</code> 方法相对来说要功能强大一些，但要特别注意的是后者获取的节点集合不是实时的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《DOM 启蒙》，Cody Lindley，陈养剑 译</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>DOM</category>
            <category>Selector</category>
        </item>
        <item>
            <title><![CDATA[DOM-元素节点]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/DOM/dom-elementnode</link>
            <guid>/Computer-Technology/Web/DOM/dom-elementnode</guid>
            <pubDate>Tue, 17 May 2016 13:19:00 GMT</pubDate>
            <description><![CDATA[可以说，元素节点是 DOM 树中的核心部分，我们进行文档的操作通常都是建立在元素节点上的。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-05-17 13:19:00 </em></p></blockquote><p>可以说，元素节点是 DOM 树中的核心部分，我们进行文档的操作通常都是建立在元素节点上的。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="元素节点">元素节点<a class="hash-link" href="#元素节点" title="标题的直接链接">​</a></h2><blockquote><p>元素节点（Element Node）是我们最常用的 DOM 节点，不同类型的节点都有其自己的构造方法，并且它们身上还有许多属性和方法（包括继承的）来帮助我们完成 DOM 操作。</p></blockquote><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector('div').constructor);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出 function HTMLDivElement() { [native code] }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>DOM 中每一个元素节点都是从唯一的 Javascript 接口/构造器构建的。<strong>对于任何节点（不仅是元素节点），我们可以通过 <code>constructor</code> 属性来获知它们的构造方法。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="元素节点-dom-操作">元素节点 DOM 操作<a class="hash-link" href="#元素节点-dom-操作" title="标题的直接链接">​</a></h2><p>前面在介绍 DOM 时元素节点（Element Node）的部分属性与方法已做过示例，在此仅简单的提及。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="创建节点">创建节点<a class="hash-link" href="#创建节点" title="标题的直接链接">​</a></h3><ul><li>document.createElement()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 创建一个DIV节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var new_div=document.createElement('div');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="获取标签名">获取标签名<a class="hash-link" href="#获取标签名" title="标题的直接链接">​</a></h3><ul><li>tagName</li><li>nodeName</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取DIV元素的标签名</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector('div').tagName);  // 输出 "DIV"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector('div').nodeName);  // 输出 "DIV"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="获取属性列表集合">获取属性列表/集合<a class="hash-link" href="#获取属性列表集合" title="标题的直接链接">​</a></h3><p>每个元素节点身上都有很多属性（包括继承自 Node），我们可以取得一个由当前元素定义的 Attr（属性）节点组成的集合。</p><ul><li>attributes</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;input type="text" id="id" class="class" title="input" data-foo="dataFoo" value="123"/&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取属性列表/集合</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var attr=document.querySelector('input').attributes;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(attr);  // 输出 NamedNodeMap{...}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 遍历取得属性名与值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for (var i in attr) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.log(attr[i].nodeName+':'+attr[i].nodeValue);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们使用元素节点的 <code>attributes</code> 属性获取的是一个包含其所有属性与相应值的属性节点对象集合（NamedNodeMap），因为每一个属性事实上也是一个属性节点对象（Attr 节点）。<strong>我们要知道的是，<code>NamedNodeMap</code> 是一个实时数组，会随元素节点属性的变化而变化。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="属性操作">属性操作<a class="hash-link" href="#属性操作" title="标题的直接链接">​</a></h3><ul><li>setAttribute()</li><li>getAttribute()</li><li>removeAttribute()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 设置属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector('img').setAttribute('src','123.png');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector('img').getAttribute('src'));  // 输出 123.png</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 移除属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector('img').removeAttribute('src');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="属性检测">属性检测<a class="hash-link" href="#属性检测" title="标题的直接链接">​</a></h3><p>有时候，我们可能想知道一个元素节点身上是否有某个特定属性时，我们也可以通过下面的方法获知。</p><ul><li>hasAttributes</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;input type="text" title="" checked&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 查看input元素是否有title属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector('input').hasAttribute('title'));  // 输出 true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 查看input元素是否有checked属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector('input').hasAttribute('checked'));  // 输出 true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>从上述示例可以看出，当元素节点具有该属性，即使该属性值为空也是存在的。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-属性">class 属性<a class="hash-link" href="#class-属性" title="标题的直接链接">​</a></h3><p>一个元素节点可以包含多个定义的类样式，这些 <code>className</code> 均被放在 <code>class</code> 属性中用空格分割，而我们可以对它们进行单独操作。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="获取-class-列表">获取 class 列表<a class="hash-link" href="#获取-class-列表" title="标题的直接链接">​</a></h4><ul><li>classList</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="a b c"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取div元素的class属性列表</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector('div').classList);  // 输出 ['a','b','c']</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取div元素的class属性值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector('div').className);  // 输出 a b c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>因为 <code>class</code> 是 JavaScript 的关键字，所以获取 class 属性的值时使用 <code>className</code> 代替。</strong></p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-值操作">class 值操作<a class="hash-link" href="#class-值操作" title="标题的直接链接">​</a></h4><p>我们可以对 <code>class</code> 属性列表中的值进行单独修改，添加或者移除某一个 class 值。</p><ul><li>add()</li><li>remove()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="a b"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 给class属性列表中添加c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector('div').classList.add('c');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector('div').className);  // 输出 a b c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 从class属性列表中移除b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector('div').classList.remove('b');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector('div').className);  // 输出 a c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-值检测">class 值检测<a class="hash-link" href="#class-值检测" title="标题的直接链接">​</a></h4><p>当然，我们也可以检测 <code>classList</code> 中是否包含某一特定的 class 值。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="a b"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 查看class属性列表中是否包含b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector('div').classList.contains('b'));  // 输出 true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 查看class属性列表中是否包含c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector('div').classList.contains('c'));  // 输出 false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="toggle-自动化">toggle 自动化<a class="hash-link" href="#toggle-自动化" title="标题的直接链接">​</a></h4><p>当我们要实现特效时，可能要经历查看某个 <code>class</code> 样式是否存在，不存在时添加，存在时移除这个过程。然而，我们可以自动地一步来完成这三个过程。</p><ul><li>toggle()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div class="a b"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector('div').classList.toggle('b');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector('div').classList.toggle('c');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 查看class属性值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector('div').className);  // 输出 a c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="data-属性">data-<!-- -->*<!-- -->属性<a class="hash-link" href="#data-属性" title="标题的直接链接">​</a></h3><p>元素节点上经常会出现一些类似 <code>data-*</code> 形式的属性，这些属性是为了让我们实现某些目的而进行数据保存的属性。</p><ul><li>dataset</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;div data-foo-foo="foo" data-bar-bar="bar"&gt;&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取DIV元素上的数据集合</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector('div').dataset);  // 输出 DOMStringMap {...}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取一个数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(document.querySelector('div').dataset.fooFoo);  // 输出foo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 设置一个数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector('div').dataset.gooGoo = 'goo';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 删除一个数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    delete document.querySelector('div').dataset.barBar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>要注意的是，对单个数据引用时不需要加 <code>data</code> 前缀，并且当属性名中有 <code>-</code> 时应采用驼峰式命名方式书写（例如 foo-foo ==&gt; fooFoo）。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>除此之外，元素节点的插入、替换、遍历等等我们在 DOM 介绍时均已经说过，它们适用于任何类型的节点对象，我们不在此赘述。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《DOM 启蒙》，Cody Lindley，陈养剑 译</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>DOM</category>
            <category>Element Node</category>
        </item>
        <item>
            <title><![CDATA[文档对象模型（DOM）]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/DOM/dom</link>
            <guid>/Computer-Technology/Web/DOM/dom</guid>
            <pubDate>Mon, 16 May 2016 14:04:00 GMT</pubDate>
            <description><![CDATA[在网页设计中，有一个很重要的角色需要我们了解，DOM 帮助我们对页面元素进行增、删、改等全方位的操作，而且让 JavaScript 在客户端修改 HTML 文档成为一个很简单的事情，可以说 DOM 为我们操作 HTML 文档提供了强大的编程接口。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-05-16 14:04:00 </em></p></blockquote><p>在网页设计中，有一个很重要的角色需要我们了解，DOM 帮助我们对页面元素进行增、删、改等全方位的操作，而且让 JavaScript 在客户端修改 HTML 文档成为一个很简单的事情，可以说 DOM 为我们操作 HTML 文档提供了强大的编程接口。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="文档对象模型">文档对象模型<a class="hash-link" href="#文档对象模型" title="标题的直接链接">​</a></h2><p>Document 对象是 BOM 中的核心对象，也是最为复杂的一个。Html 文档解析时，会创建一个 Document 对象，并将整个文档以树形结构展现，而这种结构被抽象为 DOM（Document Object Model），也就是文档对象模型。</p><p>DOM 最大的特点就是，它是一种树形/层次结构，由许多节点组成，而 DOM 中将这些节点抽象为一个对象，称为节点对象（Node Object）。DOM 中的所有操作都是通过访问这些节点对象来进行的，所以我们要了解 DOM 就要首先了解这些节点对象。</p><p>这里要说的一点就是，DOM 是遵循 W3C 标准的。而且 DOM 最初是为 XML 文档设计的应用编程接口，后来为了在 HTML 文档中使用而被扩展。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="节点对象类型">节点对象类型<a class="hash-link" href="#节点对象类型" title="标题的直接链接">​</a></h3><p>HTML 文档中绝大部分常见的节点对象类型（Node Object Model）有以下几个：</p><ul><li>DOCUMENT_NODE（文档，如 window.document）</li><li>DOCUMENT_TYPE_NODE（文档类型，如 <code>&lt;!DOCTYPE html&gt;</code>）</li><li>ELEMENT_NODE（元素，如<!-- -->&lt;<!-- -->html<!-- -->&gt;<!-- -->、<!-- -->&lt;<!-- -->body<!-- -->&gt;<!-- -->、<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->、<!-- -->&lt;<!-- -->p<!-- -->&gt;<!-- -->、<!-- -->&lt;<!-- -->script<!-- -->&gt;<!-- -->）</li><li>ATTRIBUTE_NODE（属性，如 id="main"）</li><li>TEXT_NODE（文本内容）</li><li>COMMENT_NODE（注释，<!-- -->&lt;<!-- -->!-- --<!-- -->&gt;<!-- -->）</li><li>DOCUMENT_FRAGMENT_NODE（文档片段，如 document.creatDocumentFragment()）</li></ul><p>这些其实都是浏览器 javascript 环境下 Node 对象的常量属性，用来存储映射节点到某一特定节点对象类型的数值代号。我们可以通过以下代码获取 Node 对象的所有属性：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for(var key in Node){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.log(key,"=" + Node[key]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 控制台输出</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // ELEMENT_NODE =1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // ATTRIBUTE_NODE =2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // TEXT_NODE =3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // CDATA_SECTION_NODE =4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // ENTITY_REFERENCE_NODE =5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // ENTITY_NODE =6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // ···</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>每一种节点对象类型都对应着一种接口，并且都有其 JavaScript 构造函数。<strong><code>ATTRIBUTE_NODE</code> 并不是树的一部分，不参与构成 DOM 树结构。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="节点对象node-object">节点对象（Node Object）<a class="hash-link" href="#节点对象node-object" title="标题的直接链接">​</a></h2><p>如果知道关于面向对象编程知识的话，很容易去理解节点对象。DOM 树里面每个节点对象都从 Node 继承属性和方法。例如：</p><ul><li>Object<!-- -->&lt;<!-- -->Node<!-- -->&lt;<!-- -->Element<!-- -->&lt;<!-- -->HTMLElement<!-- -->&lt;<!-- -->(如 HTML<!-- -->*<!-- -->Element)</li><li>Object<!-- -->&lt;<!-- -->Node<!-- -->&lt;<!-- -->CharacterData<!-- -->&lt;<!-- -->Text</li><li>Object<!-- -->&lt;<!-- -->Node<!-- -->&lt;<!-- -->Document<!-- -->&lt;<!-- -->HTMLDocument</li></ul><p>其实，可以看出的是节点对象与 JavaScript 中的其他对象一样，都继承自 <code>Object.prototype</code>。我们可以遍历一个元素（Element）对象，查看其继承的所有属性和方法。如下所示：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;a href=""&gt;&lt;/a&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var a_obj = document.querySelector("a");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for (var key in a_obj){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        document.write(key+"&lt;br /&gt;");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 输出</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // target</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // download</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // ping</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="通用属性方法">通用属性、方法<a class="hash-link" href="#通用属性方法" title="标题的直接链接">​</a></h3><p>由于所有的节点对象都继承自 Node ，所以它们有一些共同的属性、方法用来操作、查看、遍历 DOM 的基础值与函数。</p><ul><li>节点属性<ul><li>parentNode</li><li>firstChild</li><li>lastChild</li><li>previousSibling</li><li>nextSibling</li><li>childNodes</li><li>nodeName</li><li>nodeType</li><li>nodeValue</li></ul></li><li>节点方法<ul><li>appendChild()</li><li>insertBefore()</li><li>removeChild()</li><li>replaceChild()</li><li>cloneNode()</li><li>compareDocumentPosition()</li><li>contains()</li><li>hasChildNodes()</li><li>isEqualNode()</li></ul></li><li>文档方法<ul><li>document.createElement()</li><li>document.createTextNode()</li><li>document.createComment()</li></ul></li><li>HTML<!-- -->*<!-- -->Element 属性<ul><li>innerHTML</li><li>outerHTML</li><li>textContent</li><li>innerText</li><li>outerText</li><li>firstElementChild</li><li>lastElementChild</li><li>nextElementSibling</li><li>previousElementSibling</li><li>childElementCount</li><li>children</li></ul></li><li>HTML 元素方法<ul><li>insertAdjacentHTML()</li><li>insertAdjacentText()</li></ul></li></ul><p>以上这些属性、方法就可以用来操作 HTML 文档，实现增、删、改等操作，要记住的一点就是：<strong>DOM 操作通常都是通过访问节点对象来实现。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="识别节点对象类型与名称">识别节点对象类型与名称<a class="hash-link" href="#识别节点对象类型与名称" title="标题的直接链接">​</a></h3><p>我们可以看到所有的节点对象都具有 <code>nodeType</code> 和 <code>nodeName</code> 属性，继承自 Node。下面，我们来看看它们的返回值是什么。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p&gt;Hello World!&lt;/p&gt;&lt;hr /&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 查看p元素标签的nodeType和nodeName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_obj=document.querySelector("p");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.write(p_obj.nodeType+"&lt;br /&gt;"); // 输出1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.write(p_obj.nodeName+"&lt;br /&gt;"); // 输出P</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 查看p标签内文本节点的nodeType和nodeName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    text_obj=document.querySelector("p").firstChild;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.write(text_obj.nodeType+"&lt;br /&gt;"); // 输出3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.write(text_obj.nodeName+"&lt;br /&gt;"); // 输出#text</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其实，我们可以看出来 <code>nodeType</code> 的返回值就是前面讲到的 Node 常量属性的值，这样我们就可以确定一个节点对象的类型了；而 <code>nodeName</code> 的返回值通常就是元素标签的名称大写。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="获取节点的值">获取节点的值<a class="hash-link" href="#获取节点的值" title="标题的直接链接">​</a></h3><p>绝大多数节点类型（除了 Text 和 Comment）的 <code>nodeValue</code> 属性都返回 nil。它的作用就是获取 Text 与 Comment 节点的实际文本字符串。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p&gt;Hello World!&lt;/p&gt;&lt;hr /&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 查看p标签内文本节点的nodeValue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    text_obj=document.querySelector("p").firstChild;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.write(text_obj.nodeValue); // 输出Hello World!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当然，我们也可以给 Text 或 Comment 节点的 <code>nodeValue</code> 赋值改变其字符串内容。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="常用-dom-操作">常用 DOM 操作<a class="hash-link" href="#常用-dom-操作" title="标题的直接链接">​</a></h2><p>接下来我们来看看如何使用这些节点对象的通用属性、方法来进行 DOM 操作。遍历节点、创建节点、插入节点、移除节点、替换节点、复制节点等等都是最基础的 DOM 操作。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="遍历节点对象">遍历节点对象<a class="hash-link" href="#遍历节点对象" title="标题的直接链接">​</a></h3><p>我们要使用 JavaScript 进行 DOM 操作，首先就要了解 DOM 树的结构，也就是节点的序列。这时候我们可以通过一个目标节点来实现遍历节点。</p><ul><li>parentNode</li><li>firstChild</li><li>lastChild</li><li>previousSibling</li><li>nextSibling</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li id="A"&gt;&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;li id="B"&gt;&lt;/li&gt;&lt;em&gt;&lt;/em&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    这里要注意的是，&lt;ul&gt;元素节点有4个直属子节点，包括：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        两个&lt;li&gt;元素节点，一个&lt;em&gt;元素节点，一个文本（Text）节点。</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    这是因为第一个&lt;/li&gt;后面的回车符也是文本字符。</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 先找到一个目标节点&lt;ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var ul_obj=document.querySelector("ul");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取它的父节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.write(ul_obj.parentNode.nodeName+"&lt;br /&gt;"); // 输出BODY</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取它的第一个直属子节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.write(ul_obj.firstChild.nodeName+"&lt;br /&gt;"); // 输出LI</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取它的最后一个直属子节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.write(ul_obj.lastChild.nodeName+"&lt;br /&gt;"); // 输出EM</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 重新找一个目标节点&lt;li id="B"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var B_obj=document.querySelector("#B");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取它的上一个兄弟节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.write(B_obj.previousSibling.nodeName+"&lt;br /&gt;"); // 输出#text</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取它的下一个兄弟节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.write(B_obj.nextSibling.nodeName+"&lt;br /&gt;"); // 输出EM</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述示例可以分为两部分来看，先看 <code>parentNode</code> 、<code>firstChild</code>、<code>lastChild</code> 这三个属性，它们分别返回的是目标节点的<strong>父节点</strong>、<strong>首个直属子节点</strong>、<strong>末尾直属子节点</strong>。<strong>直属子节点的意思就是一个节点的第一代子节点。</strong>可以看出来这三个属性分别是跨越了 DOM 树的层结构，可以让某个节点获取到它的上层或者下层节点。</p><p>接下来的两个属性 <code>previousSibling</code> 和 <code>nextSibling</code>，分别返回的是目标节点的<strong>上一个兄弟节点</strong>和<strong>下一个兄弟节点</strong>。因为返回的是兄弟节点，所以说这两个属性并没有跨越 DOM 树的层结构，属于同级操作。</p><p>总的来说，我们可以通过这五个属性获取某个节点的上层节点、下层节点，同级节点，实现 DOM 树节点的遍历。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="创建节点对象">创建节点对象<a class="hash-link" href="#创建节点对象" title="标题的直接链接">​</a></h3><p>在 HTML 文档解析完成后，所有节点都是基于文档内容创建的，形成 DOM 树结构。然而，我们还可以通过 JavaScript 来创建额外的节点对象。下面就以创建元素（Element）与文本（Text）节点为例：</p><ul><li>document.createElement()</li><li>document.createTextNode()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 创建一个元素节点div</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var new_div=document.createElement("div");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.write(new_div.nodeType+"&lt;br /&gt;"); // 输出1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 创建一个文本节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var new_text=document.createTextNode("Hello World!");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.write(new_text.nodeType+"&lt;br /&gt;"); // 输出3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="插入节点对象">插入节点对象<a class="hash-link" href="#插入节点对象" title="标题的直接链接">​</a></h3><p>创建好节点对象后，我们就可以将其插入到 DOM 树中，让其成为 HTML 文档的一部分。</p><ul><li>appendChild()</li><li>insertBefore()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p&gt;Hello,&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var new_text=document.createTextNode("World!");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 添加新文本节点到P元素节点的子节点序列的末尾</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var p_obj=document.querySelector("p");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_obj.appendChild(new_text);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述示例可以看到，<code>&lt;p&gt;</code> 标签内的字符串变为 "Hello,World!"，新创建的文本（Text）节点对象被添加在了 p 元素节点的子节点（Child Nodes）序列末尾。<strong>所以 <code>appendChild()</code> 方法的作用就是将新节点对象插入到目标节点的子节点序列末尾。</strong>如果目标节点没有子节点，新的节点则作为其首个子节点插入。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p&gt;World!&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var new_text=document.createTextNode("Hello,");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 添加新文本节点到目标节点的前面</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var p_obj=document.querySelector("p");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_obj.insertBefore(new_text,p_obj.firstChild);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述示例可以看到，<code>&lt;p&gt;</code> 标签内的字符串变为 "Hello,World!"，新创建的文本（Text）节点对象被添加在了 p 元素节点的首个子节点前面。<strong>所以 <code>insertBefore()</code> 方法的作用就是将新节点对象插入到目标节点的某个子节点位置前面。</strong>如果没有给定第二个参数（插入子节点位置），则和 <code>appendChild()</code> 效果是一样的。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="移除与替换节点对象">移除与替换节点对象<a class="hash-link" href="#移除与替换节点对象" title="标题的直接链接">​</a></h3><p>有时候我们需要去改变原来的 HTML 文档内容，而不是插入新节点，因此我们要在 DOM 树中某一节点上进行移除、替换操作。</p><ul><li>removeChild()</li><li>replaceChild()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p id="p1"&gt;Welcome to China!&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p id="p2"&gt;Hello,World!&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 先找到要移除的子节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var p1_obj=document.getElementById("p1");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 在父节点上删除该子节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p1_obj.parentNode.removeChild(p1_obj);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述示例可以看到，第一个 <code>&lt;p&gt;</code> 标签不见了。<strong>从 DOM 树中要移除一个节点，我们通常先找到要移除的节点，然后通过它的 <code>parentNode</code> 属性获取父节点，在父节点上利用 <code>removeChild()</code> 移除该子节点。</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p&gt;&lt;strong&gt;Hello,World!&lt;/strong&gt;&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 创建新的文本节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var new_text=document.createTextNode("Welcome to China!");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 先找到要替换的节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var strong_obj=document.querySelector("strong");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 在父节点上替换该子节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    strong_obj.parentNode.replaceChild(new_text,strong_obj);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述示例可以看到，<code>&lt;p&gt;</code> 标签内的字符串变为了 "Welcome to China!"，并且没有加粗。<strong>从 DOM 树中要替换一个节点，我们通常先创建一个新节点，接下来找到要替换的节点，然后通过它的 <code>parentNode</code> 属性获取父节点，在父节点上利用 <code>replaceChild()</code> 替换该子节点。</strong>该方法的第一个参数为新节点，第二个参数为被替换节点。</p><p><strong>要值得注意的是，<code>removeChild()</code> 与 <code>replaceChild()</code> 这两个方法会分别返回被替换和被移除的相应节点。这些节点只是从 DOM 树中移出，而并没有消失，在内存中仍然持有它的引用。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="复制节点对象">复制节点对象<a class="hash-link" href="#复制节点对象" title="标题的直接链接">​</a></h3><p>当然，我们有时候要创建一个 DOM 树中存在的节点时，最方便的办法就是直接复制一份。</p><ul><li>cloneNode()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p&gt;&lt;strong&gt;Hello,World!&lt;/strong&gt;&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 复制节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var p_obj=document.querySelector("p").cloneNode(true);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 插入到&lt;Body&gt;的子节点序列末尾</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.body.appendChild(p_obj);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述示例可以看到，不仅复制了 p 元素节点，而且其子节点也被全部复制了。<strong><code>cloneNode()</code> 有一个参数，为布尔值，<code>false</code> 代表仅仅复制节点自身，<code>true</code> 代表复制节点及其所有子节点。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="元素element节点的-dom-操作">元素（Element）节点的 DOM 操作<a class="hash-link" href="#元素element节点的-dom-操作" title="标题的直接链接">​</a></h2><p>上面了解的是所有节点类型的 DOM 操作，由于我们通常打交道的都是元素（Element）节点，所以有必要了解一些 HTML 元素节点特有的属性、方法，如何利用它们进行 DOM 操作，完成一些重要的功能。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="获取元素节点内容">获取元素节点内容<a class="hash-link" href="#获取元素节点内容" title="标题的直接链接">​</a></h3><p>其实我们可以通过 JavaScript 获取某个元素节点的内容，也就是所谓的源代码。</p><ul><li>innerHTML</li><li>outerHTML</li><li>textContent</li><li>innerText</li><li>outerText</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```typescript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 我们随便打开一个页面，在控制台进行下列操作</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 下面这句会弹出&amp;lt;html&amp;gt;元素内的源代码，但不包括&amp;lt;html&amp;gt;标签</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">alert(document.documentElement.innerHTML);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 下面这句会弹出&amp;lt;html&amp;gt;元素内的源代码，包括&amp;lt;html&amp;gt;标签</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">alert(document.documentElement.outerHTML);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 下面两句会弹出&amp;lt;html&amp;gt;元素内的所有文本节点的字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">alert(document.documentElement.innerText);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">alert(document.documentElement.outerText);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 下面这句也会弹出&amp;lt;html&amp;gt;元素内的所有文本节点的字符串，但稍不一样</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">alert(document.documentElement.textContent);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述示例可以看出，<code>innerHTML</code> 与 <code>outerHTML</code> 这两个属性都可以获取一个元素节点的内容（源代码）；<strong>不同的是前者不包括该节点的标签，而后者包括该节点的标签。</strong></p><p>其次，<code>innerText</code>、<code>outerText</code> 与 <code>textContent</code> 这三个属性均可以获取一个元素节点内的所有文本节点；<strong>不同的是前者只会获取所有<u>样式设置为显示</u>的文本节点；而后者不仅会获取<u>样式设置为隐藏</u>的文本节点，还会获取该节点内 <code>style</code> 与 <code>script</code> 标签内的全部内容（源代码）。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="用字符串创建节点并插入-dom-树">用字符串创建节点并插入 DOM 树<a class="hash-link" href="#用字符串创建节点并插入-dom-树" title="标题的直接链接">​</a></h3><p>在常用 DOM 操作的学习过程中，我们学会了如何创建一个节点，并将该节点插入到 DOM 树中。但对于元素（Element）节点来说，我们其实可以一步完成创建与插入操作。</p><ul><li>innerHTML</li><li>textContent</li><li>innerText</li><li>insertAdjacentHTML()</li><li>insertAdjacentText()</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;h1&gt;&lt;/h1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p&gt;&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 创建&lt;strong&gt;元素节点和文本节点并插入DOM树</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector("p").innerHTML="&lt;strong&gt;Hello&lt;/strong&gt; World!";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 创建文本节点并插入DOM树,下面两句效果一样</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector("h1").textContent="China";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector("h1").innerText="China";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述示例可以看到，通过给 <code>innerHTML</code> 与 <code>textContent</code>、<code>innerText</code> 属性赋值，可以替换掉一个元素节点内的节点结构（源代码），也就是创建新节点并插入到 DOM 树中，覆盖掉该元素节点原来的所有子节点。</p><p>不过，<code>innerHTML</code> 属性会检测字符串中的元素标签，并将其转换成实际的 DOM 节点插入到 DOM 树中；而 <code>textContent</code>、<code>innerText</code> 属性会将整个字符串当作一个文本节点直接插入到 DOM 树中，字符串中的元素标签将会失效。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p&gt;World!&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // insertAdjacentHTML()与insertAdjacentText()方法均有两个参数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 第一个参数可选项为：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // "beforebegin"   （开始标签前）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // "afterbegin"    （开始标签后）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // "beforeend"     （关闭标签前）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // "afterend"      （关闭标签后）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 创建&lt;strong&gt;元素节点和文本节点并插入到p节点开始标签后面</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector("p").insertAdjacentHTML("afterbegin","&lt;strong&gt;Hello&lt;/strong&gt;");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>insertAdjacentHTML()</code> 方法与 <code>innerHTML</code> 属性功能一样，而 <code>insertAdjacentText()</code> 方法与 <code>textContent</code>、<code>innerText</code> 属性功能一样。上述示例可以看出，这两个方法根据第一个参数可以实现精准插入。<strong>需要注意的是，这两个方法并不会覆盖掉节点内原来的所有子节点，而是将新的节点插入到子节点序列中的相应位置。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="移除与替换元素节点">移除与替换元素节点<a class="hash-link" href="#移除与替换元素节点" title="标题的直接链接">​</a></h3><p>当然，我们也可以一步完成元素（Element）节点的移除与替换。</p><ul><li>outerHTML</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p&gt;Hello,World!&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;span&gt;你好!&lt;/span&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 移除&lt;span&gt;元素节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector('span').outerHTML = '';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 替换&lt;p&gt;元素为&lt;h1&gt;元素,并替换文本节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    document.querySelector('p').outerHTML = '&lt;h1&gt;Hello,China!&lt;/h1&gt;';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="遍历元素节点对象">遍历元素节点对象<a class="hash-link" href="#遍历元素节点对象" title="标题的直接链接">​</a></h3><p>在进行常用 DOM 操作学习时，我们遍历节点对象时会包含所有节点对象（元素节点、文本节点、注释节点等），但是我们通常只关心元素（Element）节点。</p><ul><li>firstElementChild</li><li>lastElementChild</li><li>nextElementSibling</li><li>previousElementSibling</li></ul><p>以上这些属性与前面所介绍的属性相类似，只不过这些属性会忽略掉其他类型的节点对象，只返回元素节点对象。当然，利用这些属性完成 DOM 树的元素节点遍历也是类似的，我们不再详细举例讨论。</p><p><strong>利用 <code>childElementCount</code> 可以获取目标节点直属子元素节点的数目。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>DOM 是一个很复杂的体系，要理解的就是它是一个树形结构，HTML 文档解析时创建了许多节点，而我们所有的 DOM 操作都是依靠访问这些节点对象实现的。DOM 树中的节点其实就是一个个接口，提供了我们使用 JavaScript 操作 HTML 文档的编程接口。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="参考">参考<a class="hash-link" href="#参考" title="标题的直接链接">​</a></h2><ul><li>《DOM 启蒙》，Cody Lindley，陈养剑 译</li></ul>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>DOM</category>
        </item>
        <item>
            <title><![CDATA[浏览器对象模型（BOM）]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Web/DOM/dom-bom</link>
            <guid>/Computer-Technology/Web/DOM/dom-bom</guid>
            <pubDate>Sun, 15 May 2016 12:02:00 GMT</pubDate>
            <description><![CDATA[在网页开发中，我们通常专注于内容的设计，而有些时候我们需要进行不同窗口之间的交互，这时候我们就需要学习如何运用 BOM 中的许多核心对象，及其属性、方法。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-05-15 12:02:00 </em></p></blockquote><p>在网页开发中，我们通常专注于内容的设计，而有些时候我们需要进行不同窗口之间的交互，这时候我们就需要学习如何运用 BOM 中的许多核心对象，及其属性、方法。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="浏览器对象模型">浏览器对象模型<a class="hash-link" href="#浏览器对象模型" title="标题的直接链接">​</a></h2><p>BOM（Browser Object Model）即浏览器对象模型，我们熟知的另一个对象模型为 DOM（Document Object Model），也就是文档对象模型。这两个都是网页设计中非常重要的概念，我们可以简单的理解为 BOM 注重的是不同网页（框架、窗口）之间的交互（浏览器层面），而 DOM 注重的是同一网页下的内容设计（网页层面）。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="bom-中的对象">BOM 中的对象<a class="hash-link" href="#bom-中的对象" title="标题的直接链接">​</a></h3><p>我们首先要了解的就是 BOM 中的对象，然后再对各个对象中的属性、方法进行探究。BOM 中有以下几个对象：</p><ul><li>Window</li><li>Navigator</li><li>Screen</li><li>History</li><li>Location</li><li>Document（DOM）</li></ul><p>其中最核心就是 <code>Document</code> 对象，也就是我们所说的 DOM，它本身很复杂，在此我们对它不做过多讨论。剩下的几个对象中，我们常用的并且比较重要的就是 <code>Window</code> 和 <code>Location</code> 对象了，后面将会详细讨论。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="window">Window<a class="hash-link" href="#window" title="标题的直接链接">​</a></h2><p>Window 对象表示的就是我们的浏览器窗口。如果 html 文档中包含框架（frame/iframe 标签），那么每一个框架也都对应一个 Window 对象，<code>frames[]</code> 数组存放不同窗口的 <code>Window</code> 对象。Window 对象是我们很常用也很重要的 BOM 对象。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="常用属性">常用属性<a class="hash-link" href="#常用属性" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">frames[]      // 窗口数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">length        // 获取frame个数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">name          // 获取/设置窗口名称</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">opener        // 获取窗口的打开/创建者</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">parent        // 获取窗口的父窗口</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">top           // 获取顶级窗口</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">closed        // 测试窗口是否已关闭</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面这些属性大多都是与框架有关的，并且也是比较常用的，主要作用就如注释所写都简单易懂。<strong>除此之外，我们还需要知道的是，其他的 BOM 对象的引用均需要 <code>window</code> 才能获取，所以 Window 对象的属性中包括其他 BOM 对象的引用属性。</strong>如下所示：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">navigator   // Navigator对象引用</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">screen      // Screen对象引用</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">history     // History对象引用</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">location    // Location对象引用</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">document    // Document对象引用</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 例如</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">window.document.title;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">window.location;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="常用方法">常用方法<a class="hash-link" href="#常用方法" title="标题的直接链接">​</a></h3><p>Window 对象有很多常用的内建方法，下面我们来分类介绍。首先介绍两个方法：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">open();    // 打开一个窗口</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">close();   // 关闭一个窗口</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>需要说明的是，目前这两个方法基本不会用到，而且各个浏览器对 <code>open()</code> 方法的支持是越来越差了，打开新的网页我们通常用 <code>&lt;a&gt;</code> 去完成。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">alert()    // 警告对话框</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">prompt()   // 输入对话框</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">confirm()  // 确认对话框</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 例如</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">window.alert(location);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">window.prompt("验证码","默认文本");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">window.confirm("要关闭当前页面吗？");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以上三个方法均实现的是弹出式的对话框。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">setInterval()    // 创建计时器</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">clearInterval()  // 清除计时器</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">setTimeout()     // 创建超时器</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">clearTimeout()    // 清除计时器</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 例如</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">setInterval("update()",1000);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以上方法通常用来实现一些特效，均接受两个参数：执行代码（回调函数）和时间(ms)。计时器就是按指定时间间隔反复执行代码，超时器则是按指定时间到时后执行一次代码即可完成。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">moveBy()      // 相对于浏览器原左上角坐标的移动坐标</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">moveTo()      // 直接设置浏览器左上角坐标</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resizeBy()    // 相对于浏览器原窗口大小的调整像素</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resizeTo()    // 直接设置浏览器窗口大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">scrollBy()    // 相对于浏览器原窗口滚动位置的滚动距离</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">scrollTo()    // 直接设置窗口滚动距离</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以上方法，都是对浏览器窗口进行的一些操作，<code>By()</code> 方法设置的都是相对参数，而 <code>To()</code> 方法设置的是绝对参数。</p><p><strong>最后，我们需要知道的是 Window 对象在 javascript 中是全局对象（浏览器环境），所以在使用的时候我们通常可以不写 <code>window</code>。</strong>如下所示：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 下面三种用法等价</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">window.document.title;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">self.document.title;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">document.title;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="navigator">Navigator<a class="hash-link" href="#navigator" title="标题的直接链接">​</a></h2><p>Navigator 对象包含浏览器有关的信息，如浏览器版本号、内核等等。这个对象我们通常用来精准（直接）判断浏览器为 IE、FireFox、Chrome 等等。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="常用属性-1">常用属性<a class="hash-link" href="#常用属性-1" title="标题的直接链接">​</a></h3><p>Navigator 对象中我们需要注意的属性有三个。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">appName    // 浏览器名称</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">appVersion // 使用浏览器的平台系统和版本信息</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">userAgent  // 浏览器客户端代理</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里需要注意的是 <code>appName</code> 属性返回的并不是真正的浏览器名称，FireFox、Chrome 等非 IE 浏览器返回的均是 Netscape(网景)，网景浏览器是第一代浏览器。我们想要获知浏览器的真正名称则需要用到 <code>userAgent</code> 属性。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 直接（精准）判断浏览器名称</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var ua = window.navigator.userAgent;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (ua.search(/msie/i) &gt;= 0){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    alert("你使用的是IE浏览器！");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">} else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (ua.search(/chrome/i) &gt;= 0){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        alert("你使用的是谷歌浏览器！");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (ua.search(/firefox/i) &gt;= 0){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            alert("你使用的是火狐浏览器！");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="screen">Screen<a class="hash-link" href="#screen" title="标题的直接链接">​</a></h2><p>Screen 对象包含客户端显示器屏幕的一些信息，例如分辨率、颜色深度、刷新率等等。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="常用属性-2">常用属性<a class="hash-link" href="#常用属性-2" title="标题的直接链接">​</a></h3><p>我们通常关心的是分辨率和浏览器窗口大小的问题，与之有关的 Screen 对象属性有四个。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">width       // 显示器分辨率的宽</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">height      // 显示器分辨率的高</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">availWidth  // 显示屏幕除任务栏以外的有效宽</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">availHeight // 显示屏幕除任务栏以外的有效高</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="history">History<a class="hash-link" href="#history" title="标题的直接链接">​</a></h2><p>History 对象包含浏览器的访问历史信息。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="属性">属性<a class="hash-link" href="#属性" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">length      // 访问历史记录列表的URL数量</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="方法">方法<a class="hash-link" href="#方法" title="标题的直接链接">​</a></h3><p>History 对象有三个方法，是用来控制页面前进、后退、跳转的。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">back()     // 后退一个网页</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">forward()  // 前进一个网页</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">go()       // 按参数进行跳转</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 下面两个等价</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">back();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">go(-1);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这些我们通常不会用到，浏览器自身已经具备这些能力。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="location">Location<a class="hash-link" href="#location" title="标题的直接链接">​</a></h2><p>Location 对象包含有关页面 URL 的信息。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="常用属性-3">常用属性<a class="hash-link" href="#常用属性-3" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">hash       // 页面的锚(#)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">href       // 设置/获取完整URL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">search     // 设置/获取？后的URL部分</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 下面两个等价</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">location.href = "http://wang1212.github.io/";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">location = "http://wang1212.github.io/";</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="方法-1">方法<a class="hash-link" href="#方法-1" title="标题的直接链接">​</a></h3><p>Location 对象也仅仅只有三个方法，但很重要。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">assign()     // 加载新页面</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">reload()     // 页面重载/刷新</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">replace()    // 替换当前页面，但不留历史记录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 例如，导航栏没有历史记录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">location.replace("http://wang1212.github.io/");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>至此，我们对 BOM 对象有了一个简单全面的认识，了解了各个对象中一些常用的属性、方法。在这里我们没有探讨 <code>Document</code> 对象，这是因为它其实就是 DOM，是一个比 BOM 还庞大的体系，需要单独去讨论。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>Web</category>
            <category>Web 前端</category>
            <category>DOM</category>
            <category>BOM</category>
        </item>
        <item>
            <title><![CDATA[CPU 的七种寻址方式]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Computer/computer-cpu-addressing-mode</link>
            <guid>/Computer-Technology/Computer/computer-cpu-addressing-mode</guid>
            <pubDate>Thu, 05 May 2016 01:53:00 GMT</pubDate>
            <description><![CDATA[CPU 获取数据的方式不仅仅一种，多种方式也为不同数据的获取提供了不同的效率考量，保证了寻址效率与指令的灵活性。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-05-05 01:53:00 </em></p></blockquote><p>CPU 获取数据的方式不仅仅一种，多种方式也为不同数据的获取提供了不同的效率考量，保证了寻址效率与指令的灵活性。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cpu-寻址方式">CPU 寻址方式<a class="hash-link" href="#cpu-寻址方式" title="标题的直接链接">​</a></h2><p>数据一般均存储在外存(硬盘)中，在需要的时候，会将数据先从外存读入内存(存储器)中，然后 CPU 再直接从内存(缓存)中获取。获取的数据有时候会直接使用；而有时候会先存入 CPU 内部寄存器，稍后再从寄存器中获取。所以，CPU 获取数据的方式是多样化的。</p><p>在为了保证<strong>寻址效率</strong>和<strong>指令灵活性</strong>的基础上，设计有 7 种寻址方式，他们分别是：</p><ul><li>立即(数)寻址</li><li>(存储器)直接寻址</li><li>寄存器（直接）寻址</li><li>寄存器间接寻址</li><li>寄存器相对寻址</li><li>基址、变址寻址</li><li>基址、变址、相对寻址</li></ul><p>下面结合早期 Inter 的微处理器 8088(8086) 以及汇编指令来举例说明这七种寻址方式的判断方法和原理。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="立即数寻址">立即(数)寻址<a class="hash-link" href="#立即数寻址" title="标题的直接链接">​</a></h3><p><strong>源操作数</strong>直接包含在指令中，与操作码一起放在代码段区域中。CPU 读出指令操作码后，在其下面的地址中可立即读出源操作数。</p><p>立即寻址方式的操作也称为<strong>立即数</strong>。立即数可以是 8 位，也可以是 16 位。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MOV AL, 05H     （8位立即数）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MOV DX, 8000H   （16位立即数）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>注意：<strong>源操作数</strong>才可以是立即数，<strong>目的操作数</strong>为立即数是违法操作。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MOV 05H, AL     （违法指令）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>原因：这就和高级语言中变量赋值一样，=号左边必须是变量名，而不能是常数。</p><p><strong>立即数寻址方式通常用来给寄存器赋初值。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="存储器直接寻址">(存储器)直接寻址<a class="hash-link" href="#存储器直接寻址" title="标题的直接链接">​</a></h3><p>操作数存放在存储器(内存)中，在指令给出的是该操作数的有效地址(段内偏移地址)。操作数通常存放在数据段中，默认的段地址存放在 D 段寄存器中。</p><p>操作数的内存地址：<strong>DS 段地址 ×16(左移 4 位)+16 位偏移地址=20 位内存地址</strong>。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MOV BX, [2000H]    (假设段地址 DS=1000H)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">内存地址：1000H×16+2000H=12000H</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>注意：段地址也有可能不在 DS 中，此时指令中会给出存放段地址的寄存器号(段超越前缀不可省略)。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MOV ES:[2000H], AX  （段地址存放在ES寄存器中）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="寄存器直接寻址">寄存器(直接)寻址<a class="hash-link" href="#寄存器直接寻址" title="标题的直接链接">​</a></h3><p>操作数存放在 CPU 内部寄存器中，例如 AX、BX、CX、DX 等。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MOV DS, AX</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MOV AL, BL</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>注意：由于 AX 是累加器，如果将结果存放在 AX 中，即将 AX 作为目的操作数存放位置，通常指令的执行时间要短一些。</p><p>寄存器寻址方式，减少了读/写存储器单元的次数，所以，<strong>使用寄存器寻址方式的指令一般执行速度比较快。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="寄存器间接寻址">寄存器间接寻址<a class="hash-link" href="#寄存器间接寻址" title="标题的直接链接">​</a></h3><p>操作数存放在存储器(内存)中，有效地址(段内偏移地址)存放在内部寄存器 SI、DI、BX、BP 之一中，由于段地址可存放在 DS 和 SS 中又分为两种：</p><ul><li>若段内偏移地址存放于 SI、DI、BX 之一中，默认段地址存放在 DS 寄存器中。</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MOV AX, [SI]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MOV AX, [DI]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MOV AX, [BX]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>操作数的内存地址：<strong>DS 段地址 ×16(左移 4 位)+<!-- -->[SI][di]<!-- -->[BX]<!-- -->偏移地址=20 位内存地址。</strong></p><ul><li>若段内偏移地址存放于 BP 中，默认段地址存放在寄存器 SS(堆栈段)中。</li></ul><p>exp：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MOV BX, [BP]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>操作数的内存地址：<strong>SS 段地址 ×16(左移 4 位)+<!-- -->[BP]<!-- -->偏移地址=20 位内存地址。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="寄存器相对寻址">寄存器相对寻址<a class="hash-link" href="#寄存器相对寻址" title="标题的直接链接">​</a></h3><p>操作数存放在存储器(内存)中，有效地址(段内偏移地址)存放在内部寄存器 SI、DI、BX、BP 之一中，由于段地址存放在 DS、SS 之一中，所以也可分为两类，不再细说，类比寄存器间接寻址方式即可。</p><p>相比于寄存器间接寻址方式，寄存器相对寻址的不同之处在于多了一个 8 位或 16 位的带符号常数偏移量。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MOV AL, [SI-200H]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>操作数的内存地址：<strong>SS 或 DS 段地址 ×16(左移 4 位)+<!-- -->[BP]<!-- -->或<!-- -->[SI][di]<!-- -->[BX]<!-- -->偏移地址+常数偏移量=20 位内存地址。</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MOV AL, [SI-2]    (假设 DS=3000H,SI=1000H)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">内存地址：3000H×16+1000H-2=30FFEH</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="基址变址寻址">基址、变址寻址<a class="hash-link" href="#基址变址寻址" title="标题的直接链接">​</a></h3><p>操作数存放在存储器(内存)中，基址存放在内部寄存器 BX、BP 之一中，变址存放在内部寄存器 SI、DI 之一中，由于段地址存放在内部寄存器 SS、DS 之一中，所以也可分为两类，类比寄存器间接寻址方式即可。</p><p>操作数内存地址：<strong>SS 或 DS 段地址 ×16(左移 4 位)+<!-- -->[BP]<!-- -->或<!-- -->[BX]<!-- -->基址+<!-- -->[SI][di]<!-- -->变址=20 位内存地址</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MOV AL, [BP][DI]    (假设 SS=8000H,BP=1000H,DI=0500H)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">内存地址：8000H×16+1000H+0500H=81500H</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="基址变址相对寻址">基址、变址、相对寻址<a class="hash-link" href="#基址变址相对寻址" title="标题的直接链接">​</a></h3><p>操作数存放在存储器(内存)中，基址存放在内部寄存器 BX、BP 之一中，变址存放在内部寄存器 SI、DI 之一中，由于段地址存放在内部寄存器 SS、DS 之一中，所以也可分为两类，类比寄存器间接寻址方式即可。</p><p>相比于基址、变址寻址方式，基址、变址、相对寻址的不同之处在于多了一个 8 位或 16 位的带符号常数偏移量。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MOV AL, 1000H[BP][DI]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>操作数内存地址：<strong>SS 或 DS 段地址 ×16(左移 4 位)+<!-- -->[BP]<!-- -->或<!-- -->[BX]<!-- -->基址+<!-- -->[SI][di]<!-- -->变址+常数偏移量=20 位内存地址</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MOV AL, 0010H[BX][SI]  (假设 DS=6000H,BX=5000H,SI=0300H)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">内存地址：6000H×16+5000H+0300H+0010H=65310H</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="寻址类别">寻址类别<a class="hash-link" href="#寻址类别" title="标题的直接链接">​</a></h2><p>这七种 CPU 寻址方式中，可以根据操作数是否在存储器(内存)中分为两类：<strong>内存寻址方式</strong>和<strong>非内存寻址方式</strong>。其中内存寻址方式包含：</p><ul><li>(存储器)直接寻址</li><li>寄存器间接寻址</li><li>寄存器相对寻址</li><li>基址、变址寻址</li><li>基址、变址、相对寻址</li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>通常来说，要根据汇编指令判断寻址方式，需要知道目标 CPU 是什么，以及 CPU 内部寄存器的设计布局是什么，这样才能正确判断出寻址方式。以上的七种寻址方式说明全部是基于 Inter 的 8086(8088)处理器的。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>计算机</category>
            <category>CPU</category>
        </item>
        <item>
            <title><![CDATA[内存的 3 种刷新方式]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Computer/computer-memory-refresh</link>
            <guid>/Computer-Technology/Computer/computer-memory-refresh</guid>
            <pubDate>Tue, 03 May 2016 01:59:00 GMT</pubDate>
            <description><![CDATA[内存为我们提供了一个数据快速交换的缓冲区，但同时会在掉电的情况下数据丢失，来看看内存是如何在带电情况下刷新数据的。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-05-03 01:59:00 </em></p></blockquote><p><strong>众所周知，内存（Memory）是带电存储的，掉电就会丢失数据，所以需要刷新来保持数据。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="原因">原因<a class="hash-link" href="#原因" title="标题的直接链接">​</a></h2><p>由于内存（Memory）以及缓存（Cache）都由相应的存储单元芯片<strong>DRAM</strong>和<strong>SRAM</strong>构成存储阵列，是一种半导体存储器件。并且，所有的数据都是逻辑 <code>1</code> 和 <code>0</code> 的组合。</p><p>至于 <code>1</code> 与 <code>0</code> 的输出，这源于存储单元芯片的基本结构：晶体管（场效应管）。其中，高低电平（1 和 0）的输出取决于源极<strong>电容</strong>上保存的电荷量，而电容上电荷的保持是需要一定电压维持的。所以一断电，电容上的电荷会全部消失，相应的数据也就会消失。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="解决方案刷新">解决方案：刷新<a class="hash-link" href="#解决方案刷新" title="标题的直接链接">​</a></h2><p>解决的方法策略就是，在电容上电荷消失之前，对其刷新一次，让其保持原状态，即保证数据的正确存储。</p><p>一般有三种方式：</p><ol><li>集中刷新 （单次耗费时间）</li><li>分散刷新 （刷新太过频繁）</li><li>异步刷新 （高效率，低时间消耗）</li></ol><p>一般情况下，电容上的电荷可保持<strong>2ms</strong>，数据读写周期为<strong>0.5us</strong>，并且存储阵列的刷新均是<strong>按行</strong>刷新的。同时，内存刷新相当于一次数据的读写，消耗时间基本和读写周期相同。下面以<strong>128 行 ×128 行 ×8bit</strong>的存储阵列，即就是 16KB<!-- -->*<!-- -->8bit 的内存（Memory）为例，进行说明：</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="集中刷新">集中刷新<a class="hash-link" href="#集中刷新" title="标题的直接链接">​</a></h3><p>集中刷新的原理就是，快到 2ms 的时候，也就是电容上电荷即将消失时，停止一切读写状态，对内存进行<strong>所有行</strong>刷新，那么这样耗费的时间就是：</p><blockquote><p><strong>刷新消耗时间：</strong>128 行 ×0.5us=64us</p></blockquote><p>这就相当于，在每过 2ms，就有 64us 刷新时间，这 64us 期间内存停止与外界的一切交互，这对数据读写效率的影响是巨大的。</p><p><strong>特点：单次时间耗费巨大。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="分散刷新">分散刷新<a class="hash-link" href="#分散刷新" title="标题的直接链接">​</a></h3><p>分散刷新的原理就是，每次读写操作完成之后，就<strong>刷新一行</strong>，这样相当于每次读写操作的时间翻倍<strong>0.5us(读写)+0.5us(刷新)</strong>。</p><blockquote><p><strong>每行刷新间隔：</strong>128 行 ×1us=128us</p></blockquote><p>电容上的电荷可保持 2ms，但是分散刷新每隔 128us 就会刷新一次，这样显得太过频繁，在一定程度上影响了读写操作的效率。</p><p><strong>特点：刷新太过频繁。</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="异步刷新">异步刷新<a class="hash-link" href="#异步刷新" title="标题的直接链接">​</a></h3><p>异步刷新的原理就是，既然电容上电荷可保持 2ms，那么就在几乎快到 2ms 的时候刷新。这样相当于每行只刷新一次，对读写操作的影响是最小的。</p><blockquote><p><strong>行间刷新间隔：</strong>2ms÷128 行=15.625us （取 15.5us） <br> &gt; <strong>每行刷新间隔：</strong>15.5us×128 行=1.984ms</p></blockquote><p>可以看出，异步刷新事实上是改进了的分散刷新，分散刷新太过频繁，异步刷新将分散刷新的每行刷新间隔延长到几乎 2ms，保证数据不会丢失即可，极大的降低了刷新操作对读写过程的影响。</p><p><strong>特点：刷新一次，保证数据正确性，同时最小化对读写操作的影响。</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>这就是内存（Memory）以及缓存（Cache）需要带电存储数据的原因，以及保证数据存储正确性的解决策略：刷新操作，其 3 种方式的详细解释。</p>]]></content:encoded>
            <category>计算机技术</category>
            <category>计算机</category>
            <category>内存</category>
        </item>
        <item>
            <title><![CDATA[微处理器寻址范围]]></title>
            <link>https://wang1212.github.io/Computer-Technology/Computer/computer-microprocessor-addressing-range</link>
            <guid>/Computer-Technology/Computer/computer-microprocessor-addressing-range</guid>
            <pubDate>Thu, 28 Apr 2016 01:42:00 GMT</pubDate>
            <description><![CDATA[为什么内存不是越大越好，内存的大小受限于处理器的寻址范围。]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>最后更新于 2016-04-28 01:42:00 </em></p></blockquote><p>在此之前，让我们带着下面这个问题来看这篇文章：<strong>64 位处理器所支持的最大内存(寻址范围)为多少？</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="处理器">处理器<a class="hash-link" href="#处理器" title="标题的直接链接">​</a></h2><p>处理器（CPU）担负着整个计算机系统的核心任务执行责任，所以我们经常关心它的运算处理能力，也就是 CPU 的性能。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="微处理器">微处理器<a class="hash-link" href="#微处理器" title="标题的直接链接">​</a></h3><p>我们经常所说的 Inter、AMD 两大常见品牌厂商出售的桌面端的处理器称为处理器（CPU），而把移动端嵌入式系统中 ARM 架构的处理器称为微处理器（MPU）。事实上，几乎电子设备上均有微型处理器，例如路由器、智能家电等等，只不过以上所提到的离我们最近而且我们也最熟悉。</p><p>CPU 的性能涉及到多个方面，我们常人最关心的一般就是主频，也就是 CPU 的时钟频率；L1、L2 缓存，这个可能部分人还不是很了解，事实上缓存非常关键，稍后会讲到；工艺，CPU 的工艺不仅可以降低功耗与成本，对性能的提高也是非常重要的；架构，这个对非专业的人来说很难理解，我们暂且可以理解为 CPU 内部各个协同工作器件的设计布局；还有很多，我们不一一列举，来具体探讨一下与今天的主题相关的方面：缓存。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="缓存cache">缓存（Cache）<a class="hash-link" href="#缓存cache" title="标题的直接链接">​</a></h3><p>你可能无法想象，你经常关注的 CPU 主频对其性能的重要性小于缓存。缓存就如同它的名字，它的存在就是为了起缓冲作用。它缓冲的是 CPU 与内存之间的数据交互。由于目前 CPU 的时钟频率（主频）远超内存(memory)的工作频率，所以内存的数据传输速度根本跟不上 CPU 的请求速度，这对 CPU 来说是一种浪费。所以采用一种技术，即缓存技术，将缓存工作频率设计在 CPU 时钟与内存频率之间，极大地提高了数据传输速度。</p><blockquote><p><strong>数据交互有两种途径：</strong> <br> &gt; <!-- -->[10%，慢]<!-- --> 处理器(CPU) &lt;--&gt; 内存(memory) <br> &gt; <!-- -->[90%，快]<!-- --> 处理器(CPU) &lt;--&gt; 缓存(Cache) &lt;--&gt; 内存(memory)</p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="微处理器内存寻址">微处理器内存寻址<a class="hash-link" href="#微处理器内存寻址" title="标题的直接链接">​</a></h2><p>既然 CPU 与内存之间有数据交互，那么就要确认每次数据读/写时的内存物理地址，如同游戏中在背包中存取东西时，首先要找到目标背包格子，才能进行正确的存取操作。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="内存条的组成">内存条的组成<a class="hash-link" href="#内存条的组成" title="标题的直接链接">​</a></h3><p>一根 1G 的内存条是由许多内存颗粒(DRAM 芯片)，例如 16K<!-- -->*<!-- -->8bit 的芯片，即存储单元构成的，这个过程需要字扩展、位扩展构成逻辑存储阵列。</p><p>按这样的想法，我们很容易拼成几十 G 的内存条，暂且不去说性能如何，CPU 能正确寻址吗？从而完成数据读写吗？</p><blockquote><p><strong>内存条构成：</strong> <br>
(DRAM)16K<em>8bit ---字/位扩展---&gt; (Memory)1G</em>32bit</p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cpu-的地址线和数据线">CPU 的地址线和数据线<a class="hash-link" href="#cpu-的地址线和数据线" title="标题的直接链接">​</a></h3><p>每个 CPU 都有固定条数的<strong>数据线(Data)</strong>和<strong>地址线(Address)</strong>，顾名思义，很容易理解数据线就是用来传输数据的，地址线就是用来寻址的。这样的理解其实是相当正确的，只不过你稍加深入的学习，就很容易混淆概念甚至怀疑自己，从而建立错误的认知。</p><p><strong>记住：地址位宽决定了 CPU 的寻址范围。</strong></p><p>我们现在来讨论：64 处理器的寻址范围或者说支持的最大内存是多少？</p><p>这个问题的出现缘于 64 位处理器的诞生，宣传中不乏 32 位处理器最高可支持 4G 内存，64 位处理器可支持更大内存(这是官方话)。</p><p>百度上大多数答案都是 2^64 次方，像 CSDN、知乎等等的专业性较强的论坛上也会有少部分人这样回答。而他们有的会给出理由：64 根数据线，所以是 2^64 次方，换算下来应该有 16GT。</p><p><strong>是的，如今所谓的 32 位或者 64 位处理器，32 和 64 指的就是 CPU 的字长，即数据(Data)位宽。</strong></p><p>这是错误的概念！有很多人会觉得很正常，而且有自己的证明理由。例如：64 根数据线，可表示数据的范围就是 2^64，所以寻址范围理所当然就是如此。</p><p>首先，很多人这么理解是有原因的。学习微机原理时，我们都是以 Inter 的 8086/8088 为例来学习的，而恰好：<strong>8086 数据位宽 16bit，8088 数据位宽 8bit，它们的地址位宽均为 20bit。</strong>这样导致的结果就是，Data 位宽小于 Address 位宽的情况下，我们总以为由于数据线表示的范围不足以表示每一个地址，所以寻址范围由 Data 决定了。</p><p><strong>有趣的是，8086/8088 采用了段基地址和段偏移地址的方式，让 8086 只有 16 根数据线(2^16=64KB)的情况下，可以寻址到 1MB(也就是 20 根地址线)。</strong>很多人觉得这仅仅是为了增大寻址范围(这是个错误的说法)，却未曾想过这是务必要做的。</p><blockquote><p><strong>段基地址+段偏移地址：</strong> <br>
16bit 的 Data 可表示 2^16=64KB 的地址范围 <br>
16 块 64KB 内存条 ---(16bit 的 Data + 片选信号)---&gt; 1MB 地址范围</p></blockquote><p>假如不这样做，那么 16bit 的 Data 只能表示 64KB 地址范围，20bit 的 Address 其中就有 4 根闲置下来，既然多余了还要它干什么？但是，针脚的工艺那么难，无聊的加 4 根针脚闹着玩？所以说，用段基地址+段偏移地址来增加寻址范围(这么说是不对的，应该是弥补)是务必要做的，即就是：<strong>事实上，数据位宽并没有决定寻址范围。</strong></p><p>那可以说，数据位宽与地址位宽同时决定了寻址范围吗？</p><p>我的答案是不可以这么说。你可以这么想，地址位宽大于数据位宽时，可以采用段基地址+段偏移地址方式来表示；那么当地址位宽=数据位宽时，刚好足够表示；至于数据位宽再增加时，虽然表示的数大了，但是地址位宽不足，无法表示超出部分的物理地址。所以说，无论数据位宽怎么变，最终寻址方式和范围都是相对于地址位宽来说的。</p><blockquote><p><strong>数据(Data)位宽：</strong>即字长，CPU 同一时刻所能传输最大数据位 <br> &gt; <strong>地址(Address)位宽：</strong>单独决定 CPU 的寻址范围</p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="结语">结语<a class="hash-link" href="#结语" title="标题的直接链接">​</a></h2><p>由于工艺难度，CPU 上针脚数目的增加是非常难的，而且 CPU 针脚过多时，也需要主板能支持，就目前的工艺来看，最高可支持(2^37 次方)128G 内存条。</p><p><strong>因此，64 位处理器指的是数据位宽 64bit，并不是地址位宽，那么最大可支持内存(寻址范围)也就不可能是 2^64 次方，并且远小于此。</strong></p>]]></content:encoded>
            <category>计算机技术</category>
            <category>计算机</category>
            <category>MPU</category>
        </item>
    </channel>
</rss>