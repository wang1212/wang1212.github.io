import React, { useEffect, useState, useCallback, useRef } from 'react';
import Layout from '@theme/Layout';
import BackToTopButton from '@theme/BackToTopButton';
import type { ArchiveBlogPost, Props } from '@theme/BlogArchivePage';
import BlogArchivePage from '@theme-original/BlogArchivePage';
import { useAutoAnimate } from '@formkit/auto-animate/react';
import StatsViews, { type CalendarData } from './StatsViews';
import PostList, { listPostsByYear, type YearProps } from './PostList';

/**
 * ! Ë¶ÜÁõñÂÜÖÈÉ®ÂÆûÁé∞
 */

const descriptionSet = [
  '‰∫∫‰∏çÂ∫îËØ•ÊòØÊèíÂú®Ëä±Áì∂Èáå‰æõ‰∫∫ËßÇËµèÁöÑÈùôÁâ©ÔºåËÄåÊòØËîìÂª∂Âú®ËçâÂéü‰∏äÈöèÈ£éËµ∑ËàûÁöÑÈüµÂæã„ÄÇÁîüÂëΩ‰∏çÊòØÂÆâÊéíÔºåËÄåÊòØËøΩÊ±ÇÔºå‰∫∫ÁîüÁöÑÊÑè‰πâ‰πüËÆ∏Ê∞∏ËøúÊ≤°ÊúâÁ≠îÊ°àÔºå‰ΩÜ‰πüË¶ÅÂ∞ΩÊÉÖÊÑüÂèóËøôÁßçÊ≤°ÊúâÁ≠îÊ°àÁöÑ‰∫∫Áîü„ÄÇ',
  'ÂÖ∂ÂÆûÊàë‰ª¨ÊØè‰∏™‰∫∫ÁöÑÁîüÊ¥ªÈÉΩÊòØ‰∏Ä‰∏™‰∏ñÁïåÔºåÂç≥‰ΩøÊúÄÂπ≥Âá°ÁöÑ‰∫∫‰πüË¶Å‰∏∫‰ªñÁîüÊ¥ªÁöÑÈÇ£‰∏™‰∏ñÁïåËÄåÂ•ãÊñó„ÄÇ',
  '‰∫∫‰∏ÄËæàÂ≠êÊúÄÁèçË¥µÁöÑÂìÅË¥®ÂÖ∂ÂÆûÂ∞±‰∏§Ê†∑Ôºö‰∏Ä‰∏™ÊòØÁÉ≠Ë°ÄÔºå‰∏Ä‰∏™ÊòØÂ§©Áúü„ÄÇ',
  '‰Ω†‰∏çËÉΩÂõ†‰∏∫Ëá™Â∑±ÂèòÊàê‰∫Ü‰∏çÁóõ‰∏çÁóíÁöÑ‰∫∫ÔºåÂ∞±ÂéªÂò≤Á¨ëÈÇ£‰∫õÁà±ÊÅ®ÂàÜÊòéÁöÑ‰∫∫„ÄÇ',
  'Â∞äÈáçÈÇ£‰∫õ‰∏é‰Ω†Êäó‰∫âÁöÑ‰∫∫ÔºåÂõ†‰∏∫‰Ω†‰∫âÁöÑÊòØÁêÜÔºå‰∏çÊòØÂéªÊçüÊØÅÂØπÊñπÁöÑ‰∫∫Ê†º„ÄÇ',
  'Ê¢¶ÊÉ≥Ëøô‰∏úË•ø‰∏éÁªèÂÖ∏‰∏ÄÊ†∑ÔºåÊ∞∏Ëøú‰∏ç‰ºöÂõ†Êó∂Èó¥ËÄåË§™Ëâ≤ÔºåÂèçËÄåÊõ¥ÊòæÁèçË¥µ„ÄÇ',
  'Êàë‰ª¨Ëµ∞ËøáÁöÑÊØè‰∏ÄÊ≠•‰∏ç‰∏ÄÂÆöÊòØÂÆåÁæéÁöÑÔºå‰ΩÜÊØè‰∏ÄÊ≠•ÈÉΩÊúâÂÄºÂæóÊ∑±ÊÄùÁöÑÊÑè‰πâ„ÄÇ',
  'ÂÅöÁîüÊ¥ªÁöÑÂØºÊºîÔºå‰∏çÊàêÔºõÊ¨°‰πãÔºåÂÅöÊºîÂëòÔºõÂÜçÊ¨°‰πãÔºåÂÅöËßÇ‰ºó„ÄÇ',
  'ËΩØ‰ª∂Âè™ÊòØ‰∏ÄÁßçÂ∏ÆÂä©‰∫∫‰ª¨ÂÆåÊàêÊüê‰∫õ‰∫ãÊÉÖÁöÑÂ∑•ÂÖ∑‚Äî‚ÄîËÆ∏Â§öÁ®ãÂ∫èÂëò‰ªéÊù•‰∏çÁêÜËß£Ëøô‰∏ÄÁÇπ„ÄÇÂÖ≥Ê≥®‰∫§‰ªòÁöÑ‰ª∑ÂÄºÔºå‰∏çË¶ÅËøáÂàÜÂÖ≥Ê≥®Â∑•ÂÖ∑ÁöÑÁªÜËäÇ - John Carmack',
  'const res = ["üë®", "‚Äç", "üë©", "‚Äç", "üëß", "‚Äç", "üë¶"].join(\'\'); console.log(res);',
];

/** ! custom config */
const customConfig = {
  archive: {
    title: 'Â≤ÅÊúàÁïôÁóï',
    description: () =>
      descriptionSet[Math.floor(Math.random() * descriptionSet.length)],
  },
};

// ------------------------------------------------------------------------------------

type SortBy = 'date' | 'update';

// ÁßªÂä®Âà∞‰∫Ü PostList.tsx

type TagMap = Map<string, { item: unknown; count: number }>;

function getTagMap(blogPosts: readonly ArchiveBlogPost[]): TagMap {
  const tagMap: TagMap = new Map();

  blogPosts.forEach((post) => {
    (post.metadata.tags || []).forEach((tag) => {
      let tagData = tagMap.get(tag.label);
      if (!tagMap.has(tag.label)) {
        tagData = { item: tag, count: 0 };
      }
      tagData.count++;
      tagMap.set(tag.label, tagData);
    });
  });

  return tagMap;
}

export default function BlogArchivePageWrapper(props: Props) {
  const [description] = useState(customConfig.archive.description());
  const title = customConfig.archive.title;

  const [tag, setTag] = useState<string | null>(null);

  const END_YEAR = new Date().getFullYear();
  const YEARS = Array.from({ length: 5 }, (_, i) => END_YEAR - i);
  const [sortBy, setSortBy] = useState<SortBy>('update');

  // ‰ªéÊñáÁ´†Êï∞ÊçÆ‰∏≠ÊèêÂèñÊâÄÊúâÂπ¥‰ªΩ
  const getAvailableYears = useCallback(
    (posts: typeof props.archive.blogPosts) => {
      const years = new Set<number>();
      posts.forEach((post) => {
        // ‰ΩøÁî® frontMatter.update Êàñ frontMatter.date ‰Ωú‰∏∫Êó•ÊúüÊ∫ê
        const dateStr =
          (post.metadata.frontMatter.update as string) ||
          post.metadata.frontMatter.date;
        if (dateStr) {
          const date = new Date(dateStr);
          if (!isNaN(date.getTime())) {
            years.add(date.getFullYear());
          }
        }
      });
      return Array.from(years).sort((a, b) => b - a); // ÈôçÂ∫èÊéíÂàó
    },
    []
  );

  const availableYears = getAvailableYears(props.archive.blogPosts);
  const [calendarYear, setCalendarYear] = useState<number>(
    availableYears[0] || new Date().getFullYear()
  );

  // ÁîüÊàêÊó•ÂéÜÊï∞ÊçÆ
  const generateCalendarData = useCallback(() => {
    const data: CalendarData[] = [];
    const dateCountMap = new Map<string, number>();

    // ÁªüËÆ°ÊØèÂ§©ÁöÑÂçöÊñáÊï∞ÈáèÔºàÂåÖÊã¨ update Â≠óÊÆµÔºâ
    props.archive.blogPosts.forEach((post) => {
      const { date, update } = post.metadata.frontMatter;
      [date, update].forEach((dateStr) => {
        if (
          dateStr &&
          new Date(dateStr as string).toString() !== 'Invalid Date'
        ) {
          const dateKey = new Date(dateStr as string)
            .toISOString()
            .split('T')[0];
          dateCountMap.set(dateKey, (dateCountMap.get(dateKey) || 0) + 1);
        }
      });
    });

    // ËΩ¨Êç¢‰∏∫Êó•ÂéÜÊï∞ÊçÆÊ†ºÂºè
    dateCountMap.forEach((count, date) => {
      data.push({
        date,
        count,
      });
    });

    return data;
  }, [props.archive.blogPosts]);

  const calendarData = generateCalendarData();

  const YEARS_PER_PAGE = 3;
  const [allYears, setAllYears] = useState<YearProps[]>([]);
  const [renderedYears, setRenderedYears] = useState<YearProps[]>([]);
  const [page, setPage] = useState(1);
  const observerRef = useRef<HTMLDivElement>(null);
  const [contentRef] = useAutoAnimate<HTMLDivElement>();

  const tagMap = getTagMap(props.archive.blogPosts);
  const tagList: [string, number][] = Array.from(
    tagMap,
    ([tagName, tagData]) => [tagName, tagData.count]
  );

  const updateTag = useCallback(
    (tag: string) => {
      setTag((prevTag) => {
        const urlParamsTemp = new URLSearchParams(window.location.search);
        const newTag = prevTag === tag ? null : tag;

        if (newTag === null) {
          urlParamsTemp.delete('tag');
        } else {
          urlParamsTemp.set('tag', newTag);
        }

        window.history.replaceState(
          { tag: newTag },
          '',
          `${window.location.pathname}?${urlParamsTemp.toString()}`
        );
        return newTag;
      });
    },
    [setTag]
  );

  useEffect(() => {
    setTag(window.history?.state?.tag || null);
  }, [setTag]);

  useEffect(() => {
    const posts = !tag
      ? props.archive.blogPosts
      : props.archive.blogPosts.filter((post) =>
          post.metadata.frontMatter.tags.includes(tag)
        );

    const calculatedYears = listPostsByYear(posts, sortBy);
    setAllYears(calculatedYears);
    setRenderedYears(calculatedYears.slice(0, YEARS_PER_PAGE));
    setPage(1);

    // Êõ¥Êñ∞ÂèØÁî®Âπ¥‰ªΩ
    const years = getAvailableYears(posts);
    setCalendarYear((prev) =>
      years.includes(prev) ? prev : years[0] || new Date().getFullYear()
    );
  }, [tag, sortBy, props.archive.blogPosts, getAvailableYears]);

  const loadMoreYears = useCallback(() => {
    setPage((prevPage) => {
      const nextPage = prevPage + 1;
      const newYears = allYears.slice(0, nextPage * YEARS_PER_PAGE);
      setRenderedYears(newYears);
      return nextPage;
    });
  }, [allYears]);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        if (
          entries[0].isIntersecting &&
          renderedYears.length < allYears.length
        ) {
          loadMoreYears();
        }
      },
      { rootMargin: '200px' } // Load a bit before it's visible
    );

    const currentObserverRef = observerRef.current;
    if (currentObserverRef) {
      observer.observe(currentObserverRef);
    }

    return () => {
      if (currentObserverRef) {
        observer.unobserve(currentObserverRef);
      }
    };
  }, [renderedYears, allYears, loadMoreYears]);

  return (
    <>
      <Layout title={customConfig.archive.title} description={description}>
        <BackToTopButton />

        <header className="hero hero--primary">
          <div className="container">
            <h1 className="hero__title">{title}</h1>
            <p className="hero__subtitle">{description}</p>
          </div>
        </header>
        <main>
          {props.archive.blogPosts.length > 0 ? (
            <>
              <section className="margin-vert--lg">
                <div className="container">
                  <div ref={contentRef}>
                    <StatsViews
                      tagList={tagList}
                      currentTag={tag}
                      onTagClick={updateTag}
                      calendarData={calendarData}
                      calendarYear={calendarYear}
                      availableYears={availableYears}
                      onYearChange={setCalendarYear}
                      initialMode="activityCalendar"
                    />
                  </div>
                  <hr className="margin-vert--lg" style={{ opacity: 0.25 }} />
                </div>
              </section>
              <PostList
                sortBy={sortBy}
                updateSortBy={setSortBy}
                tag={tag}
                years={renderedYears}
                loadMoreRef={observerRef}
                hasMore={renderedYears.length < allYears.length}
              />
            </>
          ) : (
            ''
          )}
        </main>
      </Layout>
      {/* <BlogArchivePage {...props} /> */}
    </>
  );
}
